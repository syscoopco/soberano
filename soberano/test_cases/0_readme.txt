--------------------------
|| TEST CASES SELECTION ||
--------------------------

1) Part of test cases are generated by means of PICT tool provided by Microsoft TM.

2) .pict files are the inputs to pict.

3) .xls files (Excel) are the outputs from pict.

4) Pict execution command line example for order 3 (order 3 generates more cases than pairwise): pict responsibilities.pict > responsibilities_test_cases.xls /o:3

5) Test cases of interest, not generated by PICT, are added manually to PICT output and highlighted with a yellow background.

6) The final sets of test cases are stored in .xlsx files with names ending in "_enriched".

7) For manually selected test cases sets, no .pict file is provided. Only a .xlsx file containing the test case specifications is provided.

8) Test cases filenames can be easily be associated to the feature or business facet targeted by the tests.

-------------------------------
|| TESTING APPROACH OVERVIEW ||
-------------------------------

1) Dur yo Soberano has to do mostly with business automation (business rules, organizational structure, processes),
it's accepted the tight coupling of these elements.

2) That's the main reason why it was chosen a testing approach forcing an ordering on the test execution order, though non-ordered tests are possible.

3) Tests are grouped in classes.

4) Each ordered test class's name is prefixed with the number of the order in which it is executed. For example: "O1_...", "O2_..."

5) The assumption here is, since the system follows the business and not the opposite, the more business states covered
the more pieces of system|system states|system state transitions|user interactions tested.

6) If needed, you always might go further than pairwise testing (higher orders), or add additional discovered cases manually.

7) For every test, once preconditions are set, ZATS Mimic -by zkoss.org- is the tool used to evaluate the system with test
cases, from the zul files (user interactions) to the screen outputs|state changes. This aims to cover as much system components
as possible.

------------------------------
|| LOGICAL MODEL GENERATION ||
------------------------------

1) First test to run (FTTR) results in a relational logical model generated and deployed in a DBMS.

2) FTTR has as inputs:

	a) Object-role Modeling conceptual scheme of the business UoD.
	
	b) Object-role Modeling metamodel supporting the conceptual scheme above.
	
	c) SQL query batch files completing the logical model generation with rules not captured by .orm files, and logical optimizations.

3) So, FTTR can be used to generate an empty database for production target environment.
