package co.syscoop.soberano.test.generation;

import co.syscoop.soberano.rules.enforcer.generator.LogicalQueriesBatch;

public class LogicalQueriesForSoberanoMetamodel extends LogicalQueriesBatch {

	public LogicalQueriesForSoberanoMetamodel() {
		super.setBatch(new String[] {
				"--authorities tree updating function\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_Authority_updateTreeIdentifiers\"(\n"
				+ "	authorityid integer,\n"
				+ "	identifier integer)\n"
				+ "    RETURNS void\n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "AS $BODY$\n"
				+ "DECLARE\n"
				+ "	authorityRow RECORD;\n"
				+ "BEGIN\n"
				+ "	--Si es la primera vez que se llama (es decir, se trata del llamado externo desde el punto de vista recursivo),\n"
				+ "	IF authorityId = 1 AND identifier = 1 THEN\n"
				+ "\n"
				+ "		--Se limpian los identificadores izquierdo y derecho.\n"
				+ "		UPDATE \"metamodel\".\"Authority\" SET \"This_is_identified_by_LeftIdentifier\" = NULL, \"This_is_identified_by_RightIdentifier\" = NULL;\n"
				+ "	END IF;\n"
				+ "\n"
				+ "	--Si la autoridad ya tiene identificador izquierdo,\n"
				+ "	IF EXISTS(SELECT * FROM \"metamodel\".\"Authority\" WHERE \"AuthorityHasAuthorityId\" = authorityId\n"
				+ "				AND \"This_is_identified_by_LeftIdentifier\" IS NOT NULL) THEN\n"
				+ "		\n"
				+ "		--Si la autoridad tiene subordinadas que aún no tienen identificador izquierdo,\n"
				+ "		IF EXISTS(SELECT * FROM \"metamodel\".\"Authority\" WHERE \"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\" = authorityId\n"
				+ "				AND \"This_is_identified_by_LeftIdentifier\" IS NULL) THEN\n"
				+ "\n"
				+ "			--Se invoca a la función para cualquiera de las subordinadas sin identificador izquierdo.\n"
				+ "			SELECT * INTO authorityRow FROM \"metamodel\".\"Authority\" \n"
				+ "					WHERE \"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\" = authorityId\n"
				+ "							AND \"This_is_identified_by_LeftIdentifier\" IS NULL LIMIT 1;\n"
				+ "			PERFORM \"metamodel\".\"fn_Authority_updateTreeIdentifiers\"(authorityRow.\"AuthorityHasAuthorityId\",\n"
				+ "											identifier);\n"
				+ "		ELSE\n"
				+ "			--Se actualiza el identificador derecho.\n"
				+ "			UPDATE \"metamodel\".\"Authority\" SET \"This_is_identified_by_RightIdentifier\" = identifier\n"
				+ "				WHERE \"AuthorityHasAuthorityId\" = authorityId;\n"
				+ "\n"
				+ "			--Si no se trata de la autoridad tope,\n"
				+ "			IF authorityId <> 1 THEN\n"
				+ "			\n"
				+ "				--Se invoca a la función para  la autoridad superior.\n"
				+ "				SELECT * INTO authorityRow FROM \"metamodel\".\"Authority\" \n"
				+ "					WHERE \"AuthorityHasAuthorityId\" = authorityId;\n"
				+ "				PERFORM \"metamodel\".\"fn_Authority_updateTreeIdentifiers\"(authorityRow.\"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\",\n"
				+ "											identifier + 1);\n"
				+ "			END IF;\n"
				+ "		END IF;\n"
				+ "\n"
				+ "	--Si la autoridad no tiene identificador izquierdo,\n"
				+ "	ELSE\n"
				+ "		--Actualiza su identificador izquierdo.\n"
				+ "		UPDATE \"metamodel\".\"Authority\" SET \"This_is_identified_by_LeftIdentifier\" = identifier \n"
				+ "			WHERE \"AuthorityHasAuthorityId\" = authorityId;\n"
				+ "				\n"
				+ "		--Si la autoridad tiene subordinadas que aún no tienen identificador izquierdo,\n"
				+ "		IF EXISTS(SELECT * FROM \"metamodel\".\"Authority\" WHERE \"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\" = authorityId\n"
				+ "				AND \"This_is_identified_by_LeftIdentifier\" IS NULL) THEN\n"
				+ "\n"
				+ "			--Se invoca a la función para cualquiera de las subordinadas sin identificador izquierdo.\n"
				+ "			SELECT * INTO authorityRow FROM \"metamodel\".\"Authority\" \n"
				+ "					WHERE \"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\" = authorityId \n"
				+ "						AND \"This_is_identified_by_LeftIdentifier\" IS NULL LIMIT 1;\n"
				+ "			PERFORM \"metamodel\".\"fn_Authority_updateTreeIdentifiers\"(authorityRow.\"AuthorityHasAuthorityId\",\n"
				+ "											identifier + 1);\n"
				+ "		ELSE\n"
				+ "			--Se actualiza el identificador derecho.\n"
				+ "			UPDATE \"metamodel\".\"Authority\" SET \"This_is_identified_by_RightIdentifier\" = identifier + 1 \n"
				+ "				WHERE \"AuthorityHasAuthorityId\" = authorityId;\n"
				+ "\n"
				+ "			--Si no se trata de la autoridad tope,\n"
				+ "			IF authorityId <> 1 THEN\n"
				+ "			\n"
				+ "				--Se invoca a la función para  la organización superior.\n"
				+ "				SELECT * INTO authorityRow FROM \"metamodel\".\"Authority\" \n"
				+ "					WHERE \"AuthorityHasAuthorityId\" = authorityId;\n"
				+ "				PERFORM \"metamodel\".\"fn_Authority_updateTreeIdentifiers\"(authorityRow.\"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\",\n"
				+ "											identifier + 2);\n"
				+ "			END IF;\n"
				+ "		END IF;\n"
				+ "	END IF;\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--authority inserting function\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_Authority_insert\"(name character varying, isSubordinatedToAuthorityWithId integer) RETURNS integer AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	newAuthorityId integer;\n"
				+ "BEGIN\n"
				+ "	INSERT INTO \"metamodel\".\"Authority\" (\"This_has_Name\",\n"
				+ "						\"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\")\n"
				+ "		VALUES (name,\n"
				+ "			isSubordinatedToAuthorityWithId) RETURNING \"AuthorityHasAuthorityId\" INTO newAuthorityId;\n"
				+ "			\n"
				+ "	--update the authorities tree identifiers from the top authority\n"
				+ "	PERFORM \"metamodel\".\"fn_Authority_updateTreeIdentifiers\"(1, 1);\n"
				+ "	RETURN newAuthorityId;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--user inserting function\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_User_insert\"(\n"
				+ "    loginname character varying,\n"
				+ "    isenabled boolean)\n"
				+ "  RETURNS integer AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	userId integer;\n"
				+ "BEGIN\n"
				+ "	INSERT INTO \"metamodel\".\"User\" (\"This_has_LoginName\", \"User_is_enabled\") \n"
				+ "		VALUES (loginname, isenabled) RETURNING \"UserHasUserId\" INTO userId;\n"
				+ "	RETURN userId;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--retrieves the distinct names of the responsibilities assigned to the user with a given login name\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_User_getResponsabilities\"(\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS SETOF character varying \n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "    ROWS 1000\n"
				+ "\n"
				+ "AS $BODY$\n"
				+ "BEGIN\n"
				+ "	--returns \n"
				+ "	RETURN QUERY SELECT DISTINCT responsibility.\"This_has_Name\" AS \"ResponsibilityName\"\n"
				+ "			FROM \"metamodel\".\"Authority\" authority,\n"
				+ "				\"metamodel\".\"Responsibility\" responsibility,\n"
				+ "				\"metamodel\".\"User\" users,\n"
				+ "				\"metamodel\".\"UserIsAssignedToResponsibilityForAuthority\" assignment\n"
				+ "			WHERE assignment.\"UserHasUserId\" = users.\"UserHasUserId\"\n"
				+ "				AND assignment.\"ResponsibilityHasResponsibilityId\" = responsibility.\"ResponsibilityHasResponsibilityId\"\n"
				+ "				AND authority.\"AuthorityHasAuthorityId\" = assignment.\"AuthorityHasAuthorityId\"\n"
				+ "				AND users.\"User_is_enabled\" = true\n"
				+ "				AND users.\"This_has_LoginName\" = loginname;\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--responsibility assignation function\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_User_assignToResponsibilities\"(\n"
				+ "    userId integer,\n"
				+ "    responsibilities integer[],\n"
				+ "    authorities integer[])\n"
				+ "  RETURNS void AS\n"
				+ "$BODY$\n"
				+ "BEGIN\n"
				+ "	--Se eliminan todas las asignaciones de ese usuario.\n"
				+ "	DELETE FROM \"metamodel\".\"UserIsAssignedToResponsibilityForAuthority\" WHERE \"UserHasUserId\" = userId;\n"
				+ "	\n"
				+ "	--Se barren las responsabilidades.\n"
				+ "	FOR i IN array_lower(responsibilities, 1) .. array_upper(responsibilities, 1) LOOP\n"
				+ "		\n"
				+ "		--Se inserta la asignación.\n"
				+ "		INSERT INTO \"metamodel\".\"UserIsAssignedToResponsibilityForAuthority\" \n"
				+ "			(\"UserHasUserId\",\n"
				+ "			\"ResponsibilityHasResponsibilityId\",\n"
				+ "			\"AuthorityHasAuthorityId\")\n"
				+ "			VALUES (userId, \n"
				+ "				responsibilities[i],\n"
				+ "				authorities[i]);\n"
				+ "	END LOOP;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--function for testing responsibility filter expressions matching \n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_User_matches_responsibilityFilter\"(\n"
				+ "	ownerauthorityid integer,\n"
				+ "	loginname character varying,\n"
				+ "	filterexpression character varying)\n"
				+ "    RETURNS boolean\n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "AS $BODY$\n"
				+ "DECLARE\n"
				+ "	userResponsibilitiesCount integer;\n"
				+ "	returnValue boolean;\n"
				+ "BEGIN\n"
				+ "	SELECT COUNT(*) FROM (SELECT CASE WHEN ownerAuthorityId = assignmentAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "			THEN responsibility.\"This_has_Name\" ELSE responsibility.\"This_has_Name\" || '<' || assignmentAuthority.\"This_has_Name\" || '>' END\n"
				+ "			AS responsibilityName\n"
				+ "			FROM \"metamodel\".\"UserIsAssignedToResponsibilityForAuthority\" assignment,\n"
				+ "				\"metamodel\".\"User\" users,\n"
				+ "				\"metamodel\".\"Authority\" assignmentAuthority,\n"
				+ "				\"metamodel\".\"Responsibility\" responsibility\n"
				+ "			WHERE assignment.\"UserHasUserId\" = users.\"UserHasUserId\"\n"
				+ "				AND assignment.\"ResponsibilityHasResponsibilityId\" = responsibility.\"ResponsibilityHasResponsibilityId\"\n"
				+ "				AND assignment.\"AuthorityHasAuthorityId\" = assignmentAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "				AND users.\"This_has_LoginName\" = loginName) responsibilities\n"
				+ "		WHERE responsibilityName = filterExpression\n"
				+ "		INTO userResponsibilitiesCount;\n"
				+ "	\n"
				+ "	IF userResponsibilitiesCount > 0 THEN\n"
				+ "		returnValue := 'true';\n"
				+ "	ELSE\n"
				+ "		returnValue := 'false';\n"
				+ "	END IF;\n"
				+ "	RETURN returnValue;\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--function for testing whether the a stage of stage id matches a stage filter expression given the id of an owner authority\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_Stage_matches_stageFilter\"(\n"
				+ "	stageid integer,\n"
				+ "	ownerauthority integer,\n"
				+ "	filterexpression character varying)\n"
				+ "    RETURNS boolean\n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "AS $BODY$\n"
				+ "DECLARE\n"
				+ "	stageQualifiedName character varying;\n"
				+ "	returnValue boolean;\n"
				+ "BEGIN\n"
				+ "	SELECT CASE WHEN ownerAuthority = stage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\"\n"
				+ "		THEN stage.\"This_has_Name\" ELSE stage.\"This_has_Name\" || '<' || authority.\"This_has_Name\" || '>' END\n"
				+ "		FROM \"metamodel\".\"Stage\" stage,\n"
				+ "			\"metamodel\".\"Authority\" authority\n"
				+ "		WHERE stage.\"StageHasStageId\" = stageId\n"
				+ "			AND authority.\"AuthorityHasAuthorityId\" = stage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\"\n"
				+ "		LIMIT 1 INTO stageQualifiedName;\n"
				+ "	IF stageQualifiedName = filterExpression THEN\n"
				+ "		returnValue := 'true';\n"
				+ "	ELSE\n"
				+ "		returnValue := 'false';\n"
				+ "	END IF;\n"
				+ "	RETURN returnValue;\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--retrieves decisions a user may make on an entity type instance\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
				+ "	instanceid integer,\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS TABLE(\"InstanceId\" integer, \"DecisionId\" integer, \"DecisionName\" character varying, \"CurrentStageName\" character varying, \"DestinationStageName\" character varying, \"IsContextual\" boolean, \"TransitionQuery\" text) \n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "    ROWS 1000\n"
				+ "\n"
				+ "AS $BODY$\n"
				+ "BEGIN\n"
				+ "	RETURN QUERY SELECT DISTINCT decisionCanBeMade.\"InstanceId\",\n"
				+ "			decisionCanBeMade.\"DecisionId\", \n"
				+ "			decisionCanBeMade.\"DecisionName\", \n"
				+ "			decisionCanBeMade.\"CurrentStageName\", \n"
				+ "			decisionCanBeMade.\"DestinationStageName\", \n"
				+ "			decisionCanBeMade.\"IsContextual\", \n"
				+ "			query.\"This_has_QueryBody\" AS \"TransitionQuery\" FROM\n"
				+ "		(SELECT instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" AS \"InstanceId\",\n"
				+ "					decision.\"DecisionHasDecisionId\" AS \"DecisionId\", \n"
				+ "					decision.\"This_has_Name\" AS \"DecisionName\",\n"
				+ "					currentStage.\"This_has_Name\" AS \"CurrentStageName\",\n"
				+ "					destinationStage.\"This_has_Name\" AS \"DestinationStageName\",\n"
				+ "					decision.\"Decision_is_contextual\" AS \"IsContextual\",\n"
				+ "					decision.\"This_fires_Transition_with_TransitionHasTransitionId\"\n"
				+ "				FROM \"metamodel\".\"EntityTypeInstance\" instance INNER JOIN \"metamodel\".\"Authority\" ownerAuthority\n"
				+ "					ON \n"
				+ "						--instance is own by owner authority\n"
				+ "						instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instanceid \n"
				+ "						AND instance.\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "				INNER JOIN \"metamodel\".\"Stage\" currentStage \n"
				+ "					ON\n"
				+ "						--instance is in a stage\n"
				+ "						instance.\"This_is_in_Stage_with_StageHasStageId\" = currentStage.\"StageHasStageId\"\n"
				+ "				INNER JOIN \"metamodel\".\"LifeCycle\" lifeCycle\n"
				+ "					ON\n"
				+ "						--that life cycle is for the entity type of the instance\n"
				+ "						lifeCycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = instance.\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\"\n"
				+ "				INNER JOIN \"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment\n"
				+ "					ON\n"
				+ "						--that life cycle is deployed across owner authority\n"
				+ "						lifeCycle.\"LifeCycleHasLifeCycleId\" = deployment.\"LifeCycleHasLifeCycleId\"\n"
				+ "						AND deployment.\"AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "				INNER JOIN \"metamodel\".\"StageFilter\" currentStageFilter\n"
				+ "					ON\n"
				+ "						--a stage filter expression of that life cycle matches current stage\n"
				+ "						currentStageFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "						AND \"metamodel\".\"fn_Stage_matches_stageFilter\"(currentStage.\"StageHasStageId\", currentStage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\", currentStageFilter.\"This_filters_by_FilterExpression\")\n"
				+ "				INNER JOIN \"metamodel\".\"StageFilter\" destinationStageFilter\n"
				+ "					ON\n"
				+ "						destinationStageFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "				INNER JOIN \"metamodel\".\"Stage\" destinationStage\n"
				+ "					ON\n"
				+ "						--a stage filter expression of that life cycle matches destination stage\n"
				+ "						\"metamodel\".\"fn_Stage_matches_stageFilter\"(destinationStage.\"StageHasStageId\", destinationStage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\", destinationStageFilter.\"This_filters_by_FilterExpression\")\n"
				+ "				INNER JOIN \"metamodel\".\"Decision\" decision\n"
				+ "					ON\n"
				+ "						--a decision of that life cycle is from current stage to destination stage\n"
				+ "						decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "						AND decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" = destinationStageFilter.\"StageFilterHasStageFilterId\"\n"
				+ "						AND decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\" = currentStageFilter.\"StageFilterHasStageFilterId\"\n"
				+ "				INNER JOIN \"metamodel\".\"ResponsibilityFilter\" responsibilityFilter\n"
				+ "					ON\n"
				+ "						responsibilityFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "						AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
				+ "				INNER JOIN \"metamodel\".\"User\" users\n"
				+ "					ON \n"
				+ "						--the user could make that decision\n"
				+ "						\"metamodel\".\"fn_User_matches_responsibilityFilter\"(ownerAuthority.\"AuthorityHasAuthorityId\", users.\"This_has_LoginName\", responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
				+ "						AND users.\"User_is_enabled\" = true \n"
				+ "						AND users.\"This_has_LoginName\" = loginname				\n"
				+ "		) decisionCanBeMade\n"
				+ "		LEFT JOIN \"metamodel\".\"Transition\" transition\n"
				+ "			ON decisionCanBeMade.\"This_fires_Transition_with_TransitionHasTransitionId\" = transition.\"TransitionHasTransitionId\"\n"
				+ "		LEFT JOIN \"metamodel\".\"Query\" query\n"
				+ "			ON transition.\"Query_with_QueryHasQueryName_implements_This\" = query.\"QueryHasQueryName\";\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				"--retrieves decisions on every type instance a user is allowed to make depending on the stage of each\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
				+ "	lifecycleid integer,\n"
				+ "	authority integer,\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS TABLE(\"InstanceId\" integer, \"DecisionId\" integer, \"DecisionName\" character varying, \"CurrentStageName\" character varying, \"DestinationStageName\" character varying, \"IsContextual\" boolean, \"TransitionQuery\" text) \n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "    ROWS 1000\n"
				+ "\n"
				+ "AS $BODY$\n"
				+ "BEGIN\n"
				+ "	RETURN QUERY SELECT DISTINCT decisionCanBeMade.\"InstanceId\",\n"
				+ "			decisionCanBeMade.\"DecisionId\", \n"
				+ "			decisionCanBeMade.\"DecisionName\", \n"
				+ "			decisionCanBeMade.\"CurrentStageName\", \n"
				+ "			decisionCanBeMade.\"DestinationStageName\", \n"
				+ "			decisionCanBeMade.\"IsContextual\", \n"
				+ "			query.\"This_has_QueryBody\" AS \"TransitionQuery\" FROM\n"
				+ "		(SELECT instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" AS \"InstanceId\",\n"
				+ "					decision.\"DecisionHasDecisionId\" AS \"DecisionId\", \n"
				+ "					decision.\"This_has_Name\" AS \"DecisionName\",\n"
				+ "					currentStage.\"This_has_Name\" AS \"CurrentStageName\",\n"
				+ "					destinationStage.\"This_has_Name\" AS \"DestinationStageName\",\n"
				+ "					decision.\"Decision_is_contextual\" AS \"IsContextual\",\n"
				+ "					decision.\"This_fires_Transition_with_TransitionHasTransitionId\"\n"
				+ "				FROM \"metamodel\".\"LifeCycle\" lifecycle\n"
				+ "		 			INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance \n"
				+ "		 				--instance with specific lifecycle. see where clause.\n"
				+ "		 				ON lifecycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = instance.\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\"\n"
				+ "		 			INNER JOIN \"metamodel\".\"Authority\" ownerAuthority\n"
				+ "						--instance is own by specific authority. see where clause.\n"
				+ "						ON instance.\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "		 			INNER JOIN \"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment\n"
				+ "						--that life cycle is deployed across owner authority\n"
				+ "						ON lifeCycle.\"LifeCycleHasLifeCycleId\" = deployment.\"LifeCycleHasLifeCycleId\"\n"
				+ "							AND deployment.\"AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "		 			INNER JOIN \"metamodel\".\"Stage\" currentStage \n"
				+ "						--instance is in a stage\n"
				+ "		 				ON instance.\"This_is_in_Stage_with_StageHasStageId\" = currentStage.\"StageHasStageId\"\n"
				+ "					INNER JOIN \"metamodel\".\"StageFilter\" currentStageFilter\n"
				+ "						--a stage filter expression of that life cycle matches current stage\n"
				+ "		 				ON currentStageFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "							AND \"metamodel\".\"fn_Stage_matches_stageFilter\"(currentStage.\"StageHasStageId\", currentStage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\", currentStageFilter.\"This_filters_by_FilterExpression\")\n"
				+ "					INNER JOIN \"metamodel\".\"StageFilter\" destinationStageFilter\n"
				+ "						ON destinationStageFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "					INNER JOIN \"metamodel\".\"Stage\" destinationStage\n"
				+ "						--a stage filter expression of that life cycle matches destination stage\n"
				+ "		 				ON \"metamodel\".\"fn_Stage_matches_stageFilter\"(destinationStage.\"StageHasStageId\", destinationStage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\", destinationStageFilter.\"This_filters_by_FilterExpression\")\n"
				+ "					INNER JOIN \"metamodel\".\"Decision\" decision\n"
				+ "						--a decision of that life cycle is from current stage to destination stage\n"
				+ "		 				ON decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "							AND decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" = destinationStageFilter.\"StageFilterHasStageFilterId\"\n"
				+ "							AND decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\" = currentStageFilter.\"StageFilterHasStageFilterId\"\n"
				+ "					INNER JOIN \"metamodel\".\"ResponsibilityFilter\" responsibilityFilter\n"
				+ "						ON responsibilityFilter.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "							AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
				+ "					INNER JOIN \"metamodel\".\"User\" users\n"
				+ "						--the user could make that decision\n"
				+ "		 				ON \"metamodel\".\"fn_User_matches_responsibilityFilter\"(ownerAuthority.\"AuthorityHasAuthorityId\", users.\"This_has_LoginName\", responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
				+ "							AND users.\"User_is_enabled\" = true \n"
				+ "							AND users.\"This_has_LoginName\" = loginname\n"
				+ "		 		WHERE lifecycle.\"LifeCycleHasLifeCycleId\" = lifecycleid AND ownerAuthority.\"AuthorityHasAuthorityId\" = authority\n"
				+ "		) decisionCanBeMade\n"
				+ "		LEFT JOIN \"metamodel\".\"Transition\" transition\n"
				+ "			ON decisionCanBeMade.\"This_fires_Transition_with_TransitionHasTransitionId\" = transition.\"TransitionHasTransitionId\"\n"
				+ "		LEFT JOIN \"metamodel\".\"Query\" query\n"
				+ "			ON transition.\"Query_with_QueryHasQueryName_implements_This\" = query.\"QueryHasQueryName\";\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--retrieves the basic information of an entity type instance, only if the user whose login name is\n"
				+ "--passed as a parameter has rights to make a decision on the instance.\n"
				+ "CREATE OR REPLACE FUNCTION metamodel.\"fn_EntityTypeInstance_get\"(\n"
				+ "	instanceid integer,\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS TABLE(\"CreatedAt\" timestamp with time zone, \"EntityTypeId\" character, \"EntityTypeName\" character varying, \"OwnerAuthorityId\" integer, \"OwnerAuthorityName\" character varying, \"CurrentStageId\" integer, \"CurrentStageName\" character varying, \"CurrentJurisdictionId\" integer, \"CurrentJurisdictionName\" character varying, \"CreatorUserHasUserId\" integer, \"CreatorUserLoginName\" character varying) \n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "    ROWS 1000\n"
				+ "\n"
				+ "AS $BODY$\n"
				+ "BEGIN\n"
				+ "	RETURN QUERY SELECT instance.\"This_is_created_at_Timestamp\" AS \"CreatedAt\",\n"
				+ "				instance.\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" AS \"EntityTypeId\",\n"
				+ "				  entityType.\"This_has_Name\" AS \"EntityTypeName\",\n"
				+ "				  ownerAuthority.\"AuthorityHasAuthorityId\" AS \"OwnerAuthorityId\",\n"
				+ "				  ownerAuthority.\"This_has_Name\" AS \"OwnerAuthorityName\",\n"
				+ "				  stage.\"StageHasStageId\" AS \"CurrentStageId\",\n"
				+ "				  stage.\"This_has_Name\" AS \"CurrentStageName\",\n"
				+ "				  currentJurisdictionAuthority.\"AuthorityHasAuthorityId\" AS \"CurrentJurisdictionId\",\n"
				+ "				  currentJurisdictionAuthority.\"This_has_Name\" AS \"CurrentJurisdictionName\",\n"
				+ "				  users.\"UserHasUserId\" AS \"CreatorUserHasUserId\",\n"
				+ "				  users.\"This_has_LoginName\" AS \"CreatorUserLoginName\"\n"
				+ "			FROM \"metamodel\".\"EntityTypeInstance\" instance,\n"
				+ "					\"metamodel\".\"Meaning\" entityType,\n"
				+ "					\"metamodel\".\"Authority\" ownerAuthority,\n"
				+ "					\"metamodel\".\"Stage\" stage,\n"
				+ "					\"metamodel\".\"Authority\" currentJurisdictionAuthority,\n"
				+ "					\"metamodel\".\"User\" users,\n"
				+ "					(SELECT \"InstanceId\" FROM \"metamodel\".\"fn_EntityTypeInstance_getDecisions\"(instanceid, loginname) LIMIT 1) decision\n"
				+ "				WHERE instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instanceid\n"
				+ "					AND instance.\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" = entityType.\"MeaningHasMeaningId\"\n"
				+ "					AND instance.\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "					AND instance.\"This_is_in_Stage_with_StageHasStageId\" = stage.\"StageHasStageId\"\n"
				+ "					AND instance.\"This_is_created_by_User_with_UserHasUserId\" = users.\"UserHasUserId\"\n"
				+ "					AND stage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\" = currentJurisdictionAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "					AND decision.\"InstanceId\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\";\n"
				+ "END;\n"
				+ "$BODY$;",
				
				
				
				"--function for testing whether the current location of an entity type instance matches a stage filter expression\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_EntityTypeInstance_matches_stageFilter\"(\n"
				+ "    instanceid integer,\n"
				+ "    filterexpression character varying)\n"
				+ "  RETURNS boolean AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	currentStageName character varying;\n"
				+ "	returnValue boolean;\n"
				+ "BEGIN\n"
				+ "	SELECT CASE WHEN ownerAuthority.\"This_has_Name\" = currentStageAuthority.\"This_has_Name\" \n"
				+ "		THEN currentStage.\"This_has_Name\" ELSE currentStage.\"This_has_Name\" || '<' || currentStageAuthority.\"This_has_Name\" || '>' END\n"
				+ "		FROM \"metamodel\".\"Stage\" currentStage,\n"
				+ "			\"metamodel\".\"Authority\" ownerAuthority,\n"
				+ "			\"metamodel\".\"Authority\" currentStageAuthority,\n"
				+ "			\"metamodel\".\"EntityTypeInstance\" instance\n"
				+ "		WHERE instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instanceId\n"
				+ "			AND instance.\"This_is_in_Stage_with_StageHasStageId\" = currentStage.\"StageHasStageId\"\n"
				+ "			AND instance.\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" = ownerAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "			AND currentStage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\" = currentStageAuthority.\"AuthorityHasAuthorityId\"\n"
				+ "		LIMIT 1 INTO currentStageName;\n"
				+ "	IF currentStageName = filterExpression THEN\n"
				+ "		returnValue := 'true';\n"
				+ "	ELSE\n"
				+ "		returnValue := 'false';\n"
				+ "	END IF;\n"
				+ "	RETURN returnValue;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--function for creating entity type instance\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_EntityTypeInstance_create\"(\n"
				+ "    ownerauthority integer,\n"
				+ "    entitytype character varying,\n"
				+ "    loginname character varying)\n"
				+ "  RETURNS integer AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	destinationFilterExpression character varying;\n"
				+ "	initialStageId integer;\n"
				+ "	userId integer;\n"
				+ "\n"
				+ "	--this function returns the id of the new instance, or 0 in case the user does not have rights for create it\n"
				+ "	returnValue integer;\n"
				+ "BEGIN\n"
				+ "	--get the destination stage filter expression\n"
				+ "	SELECT destinationFilter.\"This_filters_by_FilterExpression\", users.\"UserHasUserId\"\n"
				+ "		FROM \"metamodel\".\"StageFilter\" destinationFilter,\n"
				+ "			\"metamodel\".\"Decision\" decision,\n"
				+ "			\"metamodel\".\"StageFilter\" originFilter,\n"
				+ "			\"metamodel\".\"LifeCycle\" lifeCycle,\n"
				+ "			\"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment,\n"
				+ "			\"metamodel\".\"ResponsibilityFilter\" responsibilityFilter,\n"
				+ "			\"metamodel\".\"User\" users\n"
				+ "		WHERE destinationFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\"\n"
				+ "			AND originFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\"\n"
				+ "			AND decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "			AND deployment.\"LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "			AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
				+ "			AND users.\"This_has_LoginName\" = loginName\n"
				+ "			AND users.\"User_is_enabled\" = true\n"
				+ "			AND deployment.\"AuthorityHasAuthorityId\" = ownerAuthority\n"
				+ "			AND lifeCycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = entityType\n"
				+ "			AND originFilter.\"This_filters_by_FilterExpression\" = 'soberano.stage.starting'\n"
				+ "			AND \"metamodel\".\"fn_User_matches_responsibilityFilter\"(ownerAuthority, loginName, responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
				+ "		INTO destinationFilterExpression, userId;\n"
				+ "\n"
				+ "	--if the user has rights\n"
				+ "	IF destinationFilterExpression IS NOT NULL THEN\n"
				+ "\n"
				+ "		--get the destination stage id\n"
				+ "		SELECT stage.\"StageHasStageId\" \n"
				+ "			FROM \"metamodel\".\"Stage\" stage,\n"
				+ "				\"metamodel\".\"Authority\" authority\n"
				+ "			WHERE stage.\"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\" = authority.\"AuthorityHasAuthorityId\"\n"
				+ "				AND \"metamodel\".\"fn_Stage_matches_stageFilter\"(stage.\"StageHasStageId\", ownerAuthority, destinationFilterExpression)\n"
				+ "			INTO initialStageId;\n"
				+ "\n"
				+ "		--create the instance\n"
				+ "		INSERT INTO \"metamodel\".\"EntityTypeInstance\" (\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\",\n"
				+ "								\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\",\n"
				+ "								\"This_is_in_Stage_with_StageHasStageId\",\n"
				+ "								\"This_is_created_by_User_with_UserHasUserId\",\n"
				+ "								\"This_is_created_at_Timestamp\")\n"
				+ "			VALUES (entityType, ownerAuthority, initialStageId, userId, now()) RETURNING \"EntityTypeInstanceHasEntityTypeInstanceId\" INTO returnValue;\n"
				+ "	ELSE\n"
				+ "		returnValue := 0;\n"
				+ "	END IF;\n"
				+ "	RETURN returnValue;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"CREATE OR REPLACE FUNCTION metamodel.\"fn_EntityTypeInstance_create\"(\n"
				+ "	entitytypename character varying,\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS integer\n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "AS $BODY$\n"
				+ "	DECLARE\n"
				+ "		entityTypeInstanceId integer;\n"
				+ "	BEGIN\n"
				+ "		SELECT \"metamodel\".\"fn_EntityTypeInstance_create\"(1, \n"
				+ "														\"MeaningHasMeaningId\",\n"
				+ "														loginname)\n"
				+ "			FROM \"metamodel\".\"Meaning\"\n"
				+ "			WHERE \"This_has_Name\" = entityTypeName\n"
				+ "			INTO entityTypeInstanceId;\n"
				+ "		IF entityTypeInstanceId > 0 THEN \n"
				+ "			RETURN entityTypeInstanceId;\n"
				+ "		ELSE \n"
				+ "			RETURN -1;\n"
				+ "		END IF;\n"
				+ "	END;	\n"
				+ "$BODY$;",
				
				
				
				"--withdraws a vote made by a user on an entity type instance\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_Vote_withdraw\"(\n"
				+ "    loginname character varying,\n"
				+ "    voteid integer,\n"
				+ "    instanceid integer)\n"
				+ "  RETURNS void AS\n"
				+ "$BODY$\n"
				+ "BEGIN\n"
				+ "	DELETE FROM \"metamodel\".\"Vote\" \n"
				+ "		WHERE \"VoteHasVoteId\" = voteId \n"
				+ "			AND EXISTS(SELECT * FROM \"metamodel\".\"Vote\" vote, \n"
				+ "						\"metamodel\".\"User\" users\n"
				+ "					WHERE vote.\"VoteHasVoteId\" = voteId\n"
				+ "						AND vote.\"This_is_by_User_with_UserHasUserId\" = users.\"UserHasUserId\"\n"
				+ "						AND users.\"This_has_LoginName\" = loginName\n"
				+ "						AND users.\"User_is_enabled\" = true\n"
				+ "						AND vote.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" = instanceId\n"
				+ "						--no decision has been derived yet from that vote\n"
				+ "						--the vote was made after the last decision was made on the object\n"
				+ "						AND vote.\"This_is_on_Timestamp\" > (SELECT CASE WHEN \"This_is_on_Timestamp\" IS NULL THEN NOW() ELSE \"This_is_on_Timestamp\" END\n"
				+ "											FROM \"metamodel\".\"EntityTypeInstance\" instance \n"
				+ "												LEFT JOIN \"metamodel\".\"Vote\" vote ON instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = vote.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\"\n"
				+ "												LEFT JOIN \"metamodel\".\"MadeDecisionIsDerivedFromVote\" madeDecision ON madeDecision.\"VoteHasVoteId\" = vote.\"VoteHasVoteId\"\n"
				+ "											WHERE instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instanceid\n"
				+ "											ORDER BY \"This_is_on_Timestamp\" DESC LIMIT 1));\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--votes for making a decision on an instance\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_Vote_vote\"(\n"
				+ "    loginname character varying,\n"
				+ "    instanceid integer,\n"
				+ "    decisionid integer,\n"
				+ "    argument character varying)\n"
				+ "  RETURNS void AS\n"
				+ "$BODY$\n"
				+ "BEGIN\n"
				+ "	--De existir, se retira el último voto vigente (aún no se ha derivado ninguna decisión) que hizo el\n"
				+ "	--usuario sobre el objeto.\n"
				+ "	PERFORM \"metamodel\".\"fn_Vote_withdraw\"(loginName, \"VoteHasVoteId\", instanceId)\n"
				+ "		FROM \"metamodel\".\"Vote\" vote, \"metamodel\".\"User\" users\n"
				+ "		WHERE users.\"UserHasUserId\" = vote.\"This_is_by_User_with_UserHasUserId\"\n"
				+ "			AND users.\"This_has_LoginName\" = loginName\n"
				+ "			AND vote.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" = instanceId\n"
				+ "		ORDER BY \"This_is_on_Timestamp\" DESC LIMIT 1;\n"
				+ "\n"
				+ "	--insert the vote\n"
				+ "	 INSERT INTO \"metamodel\".\"Vote\"(\"This_is_on_Timestamp\",\n"
				+ "						\"This_has_an_Argument\", \n"
				+ "						\"This_favours_Decision_with_DecisionHasDecisionId\",\n"
				+ "						\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\", \n"
				+ "						\"This_is_by_User_with_UserHasUserId\")\n"
				+ "		SELECT Now(),\n"
				+ "			argument,\n"
				+ "			decisionId,\n"
				+ "			instanceId,\n"
				+ "			\"UserHasUserId\"\n"
				+ "			FROM \"metamodel\".\"User\" users\n"
				+ "			WHERE \"This_has_LoginName\" = loginName \n"
				+ "				AND users.\"User_is_enabled\" = true\n"
				+ "				AND decisionId IN (SELECT \"DecisionId\" FROM \"metamodel\".\"fn_EntityTypeInstance_getDecisions\"(instanceId, loginName));\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--makes a decision\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_Decision_make\"(\n"
				+ "    instanceid integer,\n"
				+ "    decisionid integer)\n"
				+ "  RETURNS void AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	madeDecisionId integer;\n"
				+ "BEGIN\n"
				+ "	--Se mueve el objeto.\n"
				+ "	UPDATE \"metamodel\".\"EntityTypeInstance\" instance SET \"This_is_in_Stage_with_StageHasStageId\" = destination.\"StageHasStageId\"\n"
				+ "		FROM \"metamodel\".\"Stage\" destination,\n"
				+ "			\"metamodel\".\"Decision\" decision,\n"
				+ "			\"metamodel\".\"StageFilter\" destinationFilter\n"
				+ "		WHERE instance.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instanceId\n"
				+ "			AND decision.\"DecisionHasDecisionId\" = decisionId\n"
				+ "			AND decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" = destinationFilter.\"StageFilterHasStageFilterId\"\n"
				+ "			AND \"metamodel\".\"fn_Stage_matches_stageFilter\"(destination.\"StageHasStageId\", \n"
				+ "										instance.\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\",\n"
				+ "										destinationFilter.\"This_filters_by_FilterExpression\");\n"
				+ "\n"
				+ "	--Se registra la toma de la decisión.\n"
				+ "/* Josué Portal-20221223: Bloque se comentarió por innecesario si no hay decisiones sincronizadas. Introduce lentitud. Optimizar en caso de necesitarse. \n"
				+ "	INSERT INTO \"metamodel\".\"MadeDecision\"(\"This_is_on_Timestamp\")\n"
				+ "		VALUES (NOW()) RETURNING \"MadeDecisionHasMadeDecisionId\" INTO madeDecisionId;\n"
				+ "		\n"
				+ "	--La toma de decisión se liga con los votos hechos después de la anterior decisión tomado.\n"
				+ "	--Estos son los votos no ligados aún a ninguna toma de decisión.\n"
				+ "	INSERT INTO \"metamodel\".\"MadeDecisionIsDerivedFromVote\" (\"MadeDecisionHasMadeDecisionId\",\n"
				+ "									\"VoteHasVoteId\")\n"
				+ "		SELECT madeDecisionId, \"VoteHasVoteId\" FROM \"metamodel\".\"Vote\" \n"
				+ "		WHERE \"VoteHasVoteId\" NOT IN (SELECT \"VoteHasVoteId\" FROM \"metamodel\".\"MadeDecisionIsDerivedFromVote\")\n"
				+ "			AND \"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" = instanceId;\n"
				+ "*/\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--trigger function for votes\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_tg_Vote_afterinsert\"()\n"
				+ "  RETURNS trigger AS\n"
				+ "$BODY$\n"
				+ "DECLARE\n"
				+ "	madeDecisionId integer;\n"
				+ "BEGIN\n"
				+ "	--the decision is synchronized with others\n"
				+ "	IF (EXISTS(SELECT * FROM \"metamodel\".\"Decision\" \n"
				+ "			WHERE \"DecisionHasDecisionId\" = NEW.\"This_favours_Decision_with_DecisionHasDecisionId\"\n"
				+ "				AND \"This_is_synchronized_with_SynchronizationLine_with_Synchronizat\" IS NOT NULL LIMIT 1)) THEN\n"
				+ "\n"
				+ "		--it has been voted for the other decisions\n"
				+ "		IF (NOT EXISTS(SELECT * FROM \"metamodel\".\"Decision\" decisionvotada,\n"
				+ "					\"metamodel\".\"Decision\" decisionessincronizadas\n"
				+ "					WHERE 	--quedan todas las decisiones sincronizadas con la votada, incluyéndola a ella\n"
				+ "						NEW.\"This_favours_Decision_with_DecisionHasDecisionId\" = decisionvotada.\"DecisionHasDecisionId\"\n"
				+ "						AND decisionvotada.\"This_is_synchronized_with_SynchronizationLine_with_Synchronizat\" = decisionessincronizadas.\"This_is_synchronized_with_SynchronizationLine_with_Synchronizat\"\n"
				+ "						--quedan solo las decisiones para las que no se haya votado todavía\n"
				+ "						AND decisionessincronizadas.\"DecisionHasDecisionId\"\n"
				+ "							NOT IN (--todos los votos no retirados, sobre la misma instancia,\n"
				+ "								--a favor de cualquiera de las decisiones sincronizadas,\n"
				+ "								--y de los que no se ha derivado ninguna toma de decisión\n"
				+ "								SELECT \"This_favours_Decision_with_DecisionHasDecisionId\" \n"
				+ "									FROM \"metamodel\".\"Vote\"\n"
				+ "									WHERE \"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" = NEW.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\"\n"
				+ "										AND \"Vote\".\"VoteHasVoteId\" \n"
				+ "											NOT IN (SELECT \"VoteHasVoteId\" FROM \"metamodel\".\"MadeDecisionIsDerivedFromVote\")\n"
				+ "										AND \"Vote\".\"This_favours_Decision_with_DecisionHasDecisionId\" = decisionessincronizadas.\"DecisionHasDecisionId\") LIMIT 1)) THEN\n"
				+ "\n"
				+ "			--make the decision\n"
				+ "			PERFORM \"metamodel\".\"fn_Decision_make\"(NEW.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\", NEW.\"This_favours_Decision_with_DecisionHasDecisionId\");\n"
				+ "		END IF;\n"
				+ "\n"
				+ "	--the decision isn't synchroinzed,\n"
				+ "	ELSE\n"
				+ "		--make the decision\n"
				+ "		PERFORM \"metamodel\".\"fn_Decision_make\"(NEW.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\", NEW.\"This_favours_Decision_with_DecisionHasDecisionId\");\n"
				+ "	END IF;\n"
				+ "	RETURN NULL;\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--trigger for votes\n"
				+ "CREATE TRIGGER \"tg_Vote_after_insert\"\n"
				+ "  AFTER INSERT\n"
				+ "  ON \"metamodel\".\"Vote\"\n"
				+ "  FOR EACH ROW\n"
				+ "  EXECUTE PROCEDURE \"metamodel\".\"fn_tg_Vote_afterinsert\"();",
				
				
				
				"--top authority insertion\n"
				+ "SELECT setval('\"metamodel\".\"Authority_AuthorityHasAuthorityId_seq\"', 1, false);\n"
				+ "SELECT \"metamodel\".\"fn_Authority_insert\"('soberano.authority.top', NULL);\n"
				+ "\n"
				+ "--top users insertion\n"
				+ "SELECT setval('\"metamodel\".\"User_UserHasUserId_seq\"', 1, false);\n"
				+ "SELECT \"metamodel\".\"fn_User_insert\"('soberano.user.top', true);\n"
				+ "\n"
				+ "--assign responsibilities to top and admin users\n"
				+ "SELECT setval('\"metamodel\".\"Responsibility_ResponsibilityHasResponsibilityId_seq\"', 1, false);\n"
				+ "INSERT INTO \"metamodel\".\"Responsibility\" (\"This_has_Name\") VALUES ('soberano.responsibility.top');\n"
				+ "SELECT \"metamodel\".\"fn_User_assignToResponsibilities\"(1, ARRAY[1], ARRAY[1]);\n"
				+ "\n"
				+ "--insert anonymousUser\n"
				+ "SELECT \"metamodel\".\"fn_User_insert\"('anonymousUser', true);\n"
				+ "\n"
				+ "--insert the anonymousUser's authority\n"
				+ "SELECT \"metamodel\".\"fn_Authority_insert\"('anonymousUser', 1);",
				
				
				
				"--returns true if a user is registered and enabled\n"
				+ "CREATE OR REPLACE FUNCTION \"metamodel\".\"fn_User_isEnabled\"(loginname character varying)\n"
				+ "  RETURNS boolean AS\n"
				+ "$BODY$\n"
				+ "BEGIN\n"
				+ "	RETURN EXISTS(SELECT * FROM \"metamodel\".\"User\" WHERE \"User_is_enabled\" = true AND \"This_has_LoginName\" = loginname);\n"
				+ "END;\n"
				+ "$BODY$\n"
				+ "  LANGUAGE plpgsql VOLATILE\n"
				+ "  COST 100;",
				
				
				
				"--reserved facts\n"
				+ "--------------\n"
				+ "--the life of every business object starts at soberano.stage.starting\n"
				+ "INSERT INTO \"metamodel\".\"Stage\" (\"StageHasStageId\", \"This_has_Name\", \"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\")\n"
				+ "	VALUES (1, 'soberano.stage.starting', 1);",
				
				
				
				"--optimizations\n"
				+ "-------------\n"
				+ "CREATE INDEX IF NOT EXISTS index1\n"
				+ "    ON metamodel.\"Authority\" USING btree\n"
				+ "    (\"AuthorityHasAuthorityId\" ASC NULLS LAST, \"This_is_identified_by_LeftIdentifier\" ASC NULLS LAST)\n"
				+ "    INCLUDE(\"AuthorityHasAuthorityId\")\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index1\n"
				+ "    ON metamodel.\"Authority\" USING btree\n"
				+ "    (\"AuthorityHasAuthorityId\" ASC NULLS LAST, \"This_is_identified_by_LeftIdentifier\" ASC NULLS LAST)\n"
				+ "    INCLUDE(\"AuthorityHasAuthorityId\")\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index2\n"
				+ "    ON metamodel.\"Authority\" USING btree\n"
				+ "    (\"This_is_subordinated_to_Authority_with_AuthorityHasAuthorityId\" ASC NULLS LAST, \"This_is_identified_by_LeftIdentifier\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index3\n"
				+ "    ON metamodel.\"Decision\" USING btree\n"
				+ "    (\"DecisionHasDecisionId\" ASC NULLS LAST, \"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index4\n"
				+ "    ON metamodel.\"Vote\" USING btree\n"
				+ "    (\"VoteHasVoteId\" ASC NULLS LAST, \"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index5\n"
				+ "    ON metamodel.\"StageFilter\" USING btree\n"
				+ "    (\"StageFilterHasStageFilterId\" ASC NULLS LAST, \"This_filters_by_FilterExpression\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index6\n"
				+ "    ON metamodel.\"EntityTypeInstance\" USING btree\n"
				+ "    (\"EntityTypeInstanceHasEntityTypeInstanceId\" ASC NULLS LAST, \"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" COLLATE pg_catalog.\"default\" ASC NULLS LAST, \"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" ASC NULLS LAST, \"This_is_in_Stage_with_StageHasStageId\" ASC NULLS LAST, \"This_is_created_by_User_with_UserHasUserId\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index7\n"
				+ "    ON metamodel.\"EntityTypeInstance\" USING btree\n"
				+ "    (\"EntityTypeInstanceHasEntityTypeInstanceId\" ASC NULLS LAST, \"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index8\n"
				+ "    ON metamodel.\"Decision\" USING btree\n"
				+ "    (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" ASC NULLS LAST, \"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" ASC NULLS LAST, \"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index9\n"
				+ "    ON metamodel.\"ResponsibilityFilter\" USING btree\n"
				+ "    (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" ASC NULLS LAST, \"This_filters_by_Decision_with_DecisionHasDecisionId\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index10\n"
				+ "    ON metamodel.\"Vote\" USING btree\n"
				+ "    (\"VoteHasVoteId\" ASC NULLS LAST, \"This_is_by_User_with_UserHasUserId\" ASC NULLS LAST, \"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" ASC NULLS LAST, \"This_is_on_Timestamp\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index11\n"
				+ "    ON metamodel.\"User\" USING btree\n"
				+ "    (\"UserHasUserId\" ASC NULLS LAST, \"This_has_LoginName\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index12\n"
				+ "    ON metamodel.\"Responsibility\" USING btree\n"
				+ "    (\"This_has_Name\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
				+ "    INCLUDE(\"This_has_Name\")\n"
				+ "    TABLESPACE pg_default;",
				
				
			
				"CREATE INDEX IF NOT EXISTS index13\n"
				+ "    ON metamodel.\"EntityTypeInstance\" USING btree\n"
				+ "    (\"EntityTypeInstanceHasEntityTypeInstanceId\" ASC NULLS LAST, \"This_is_in_Stage_with_StageHasStageId\" ASC NULLS LAST, \"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index14\n"
				+ "    ON metamodel.\"Stage\" USING btree\n"
				+ "    (\"StageHasStageId\" ASC NULLS LAST, \"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index15\n"
				+ "    ON metamodel.\"Decision\" USING btree\n"
				+ "    (\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\" ASC NULLS LAST, \"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\" ASC NULLS LAST, \"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" ASC NULLS LAST, \"DecisionHasDecisionId\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE INDEX IF NOT EXISTS index16\n"
				+ "    ON metamodel.\"LifeCycle\" USING btree\n"
				+ "    (\"LifeCycleHasLifeCycleId\" ASC NULLS LAST, \"This_is_for_EntityType_with_MeaningHasMeaningId\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				"CREATE INDEX IF NOT EXISTS index17\n"
				+ "    ON metamodel.\"Meaning\" USING btree\n"
				+ "    (\"This_has_Name\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
				+ "    TABLESPACE pg_default;",
				
				
				
				"CREATE OR REPLACE FUNCTION metamodel.\"fn_User_canCreateInstance\"(\n"
				+ "	ownerauthority integer,\n"
				+ "	entitytype character varying,\n"
				+ "	loginname character varying)\n"
				+ "    RETURNS integer\n"
				+ "    LANGUAGE 'plpgsql'\n"
				+ "    COST 100\n"
				+ "    VOLATILE PARALLEL UNSAFE\n"
				+ "AS $BODY$\n"
				+ "DECLARE\n"
				+ "	destinationFilterExpression character varying;\n"
				+ "	initialStageId integer;\n"
				+ "	userId integer;\n"
				+ "\n"
				+ "	--this function returns the id of the new instance, or 0 in case the user does not have rights for create it\n"
				+ "	returnValue integer;\n"
				+ "BEGIN\n"
				+ "	--get the destination stage filter expression\n"
				+ "	SELECT destinationFilter.\"This_filters_by_FilterExpression\", users.\"UserHasUserId\"\n"
				+ "		FROM \"metamodel\".\"StageFilter\" destinationFilter,\n"
				+ "			\"metamodel\".\"Decision\" decision,\n"
				+ "			\"metamodel\".\"StageFilter\" originFilter,\n"
				+ "			\"metamodel\".\"LifeCycle\" lifeCycle,\n"
				+ "			\"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment,\n"
				+ "			\"metamodel\".\"ResponsibilityFilter\" responsibilityFilter,\n"
				+ "			\"metamodel\".\"User\" users\n"
				+ "		WHERE destinationFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\"\n"
				+ "			AND originFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\"\n"
				+ "			AND decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "			AND deployment.\"LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
				+ "			AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
				+ "			AND users.\"This_has_LoginName\" = loginName\n"
				+ "			AND users.\"User_is_enabled\" = true\n"
				+ "			AND deployment.\"AuthorityHasAuthorityId\" = ownerAuthority\n"
				+ "			AND lifeCycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = entityType\n"
				+ "			AND originFilter.\"This_filters_by_FilterExpression\" = 'soberano.stage.starting'\n"
				+ "			AND \"metamodel\".\"fn_User_matches_responsibilityFilter\"(ownerAuthority, loginName, responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
				+ "		INTO destinationFilterExpression, userId;\n"
				+ "\n"
				+ "	--if the user has rights\n"
				+ "	IF destinationFilterExpression IS NOT NULL THEN\n"
				+ "		returnValue := 1;		\n"
				+ "	ELSE\n"
				+ "		returnValue := 0;\n"
				+ "	END IF;\n"
				+ "	RETURN returnValue;\n"
				+ "END;\n"
				+ "$BODY$;"
			}
		);
	}
}
