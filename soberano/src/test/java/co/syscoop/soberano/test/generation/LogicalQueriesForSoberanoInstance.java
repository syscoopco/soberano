package co.syscoop.soberano.test.generation;

import org.apache.commons.lang3.ArrayUtils;

import co.syscoop.soberano.rules.enforcer.generator.LogicalQueriesBatch;

public class LogicalQueriesForSoberanoInstance extends LogicalQueriesBatch {
	
	public LogicalQueriesForSoberanoInstance() {
		LogicalQueriesForSoberanoMetamodel logicalQueriesForSoberanoMetamodel = new LogicalQueriesForSoberanoMetamodel();
		super.setBatch(ArrayUtils.addAll(logicalQueriesForSoberanoMetamodel.getBatch(),
				new String[] {
						//////////////////////////////////////////////////////////////////////////////////
						// rules not generated. see the notes in the soberano instance conceptual model //
						//////////////////////////////////////////////////////////////////////////////////
						
						/******************/
						/*RULE_EXISTENCE_1*/
						/******************/
						"--assure only one activity instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Activity_beforeinsert_RULE_EXISTENCE_1\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Activity\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 1;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (1, \n"
						+ "					now(), \n"
						+ "					'_D205391E-37D6-4AA6-B226-88E7A84B0C70', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"ActivityHasActivityId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 1;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Activity_before_insert_RULE_EXISTENCE_1\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Activity\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Activity_beforeinsert_RULE_EXISTENCE_1\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_2*/
						/******************/
						"--assure only one configuration instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Configuration_beforeinsert_RULE_EXISTENCE_2\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Configuration\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 2;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (2, \n"
						+ "					now(), \n"
						+ "					'_CA784430-45B2-4403-9257-1D3906C164D1', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"ConfigurationHasConfigurationId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 2;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Configuration_before_insert_RULE_EXISTENCE_2\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Configuration\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Configuration_beforeinsert_RULE_EXISTENCE_2\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_3*/
						/******************/
						"--assure only one catalog instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Catalog_beforeinsert_RULE_EXISTENCE_3\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Catalog\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 3;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (3, \n"
						+ "					now(), \n"
						+ "					'_94C0BD6E-5DED-4F46-95DA-994C881B6271', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"CatalogHasCatalogId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 3;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Catalog_before_insert_RULE_EXISTENCE_3\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Catalog\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Catalog_beforeinsert_RULE_EXISTENCE_3\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_4*/
						/******************/
						"--assure only one cash register instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_CashRegister_beforeinsert_RULE_EXISTENCE_4\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"CashRegister\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 4;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (4, \n"
						+ "					now(), \n"
						+ "					'_7E0F5DAA-21DB-433E-BFBF-F4437F3E0FE9', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"CashRegisterHasCashRegisterId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 4;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_CashRegister_before_insert_RULE_EXISTENCE_4\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"CashRegister\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_CashRegister_beforeinsert_RULE_EXISTENCE_4\"();",
						
						
						
						/****************************************************************************/
						/*RULE_CONSTRAINT_1: At most one 'Warehouse' can be a procurement warehouse.*/
						/*RULE_CONSTRAINT_2: At most one 'Warehouse' can be a sales warehouse.		*/
						/****************************************************************************/
						"--it is called before creating and modifying warehouses, within the corresponding funstions\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isProcurementWarehouse boolean, isSalesWarehouse boolean)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE NOT LEAKPROOF\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF isProcurementWarehouse AND\n"
						+ "			isSalesWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_procurement_warehouse\" = false,\n"
						+ "					\"Warehouse_is_sales_warehouse\" = false;\n"
						+ "		ELSIF isProcurementWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_procurement_warehouse\" = false;\n"
						+ "		ELSIF isSalesWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_sales_warehouse\" = false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/********************************************************************************/
						/*RULE_CONSTRAINT_4: At most one 'Currency' can be a system currency.			*/
						/*RULE_CONSTRAINT_5: At most one 'Currency' can be a price reference currency.	*/
						/********************************************************************************/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF issystemcurrency AND\n"
						+ "			ispricereferencecurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_system_currency\" = false,\n"
						+ "					\"Currency_is_price_reference_currency\" = false;\n"
						+ "		ELSIF issystemcurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_system_currency\" = false;\n"
						+ "		ELSIF ispricereferencecurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_price_reference_currency\" = false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/********************************************************************************/
						/*RULE_CONSTRAINT_6: At least one 'Currency' must be a system currency.			*/
						/*RULE_CONSTRAINT_7: At least one 'Currency' must be a price reference currency.	*/
						/********************************************************************************/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(defaultCurrencyId integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		isSystemCurrency boolean;\n"
						+ "		isReferencePriceCurency boolean;\n"
						+ "	BEGIN		\n"
						+ "		\n"
						+ "		--if currently none currency is system currency, default currency is assumed as the system currency\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Currency\" WHERE \"Currency_is_system_currency\")\n"
						+ "			INTO isSystemCurrency;\n"
						+ "		UPDATE soberano.\"Currency\" SET \"Currency_is_system_currency\" = isSystemCurrency\n"
						+ "			WHERE isSystemCurrency AND \"CurrencyHasCurrencyId\" = defaultCurrencyId;\n"
						+ "						\n"
						+ "		--if currently none currency is reference price currency, default currency is assumed as the reference price currency\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\")\n"
						+ "			INTO isReferencePriceCurency;\n"
						+ "		UPDATE soberano.\"Currency\" SET \"Currency_is_price_reference_currency\" = isReferencePriceCurency\n"
						+ "			WHERE isReferencePriceCurency AND \"CurrencyHasCurrencyId\" = defaultCurrencyId;\n"
						+ "		\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/*RULE_CONSTRAINT_8: At least one 'Warehouse' must be a procurement warehouse.	*/
						/*RULE_CONSTRAINT_9: At least one 'Warehouse' must be a sales warehouse.		*/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(\n"
						+ "	defaultwarehouseid integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		isProcurementWarehouse boolean;\n"
						+ "		isSalesWarehouse boolean;\n"
						+ "	BEGIN		\n"
						+ "		\n"
						+ "		--if currently none warehouse is procurement warehouse, default warehouse is assumed as the procurement warehouse\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Warehouse\" WHERE \"Warehouse_is_procurement_warehouse\")\n"
						+ "			INTO isProcurementWarehouse;\n"
						+ "		UPDATE soberano.\"Warehouse\" SET \"Warehouse_is_procurement_warehouse\" = isProcurementWarehouse\n"
						+ "			WHERE isProcurementWarehouse AND \"WarehouseHasWarehouseId\" = defaultwarehouseid;\n"
						+ "						\n"
						+ "		--if currently none warehouse is sales warehouse, default warehouse is assumed as the sales warehouse\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Warehouse\" WHERE \"Warehouse_is_sales_warehouse\")\n"
						+ "			INTO isSalesWarehouse;\n"
						+ "		UPDATE soberano.\"Warehouse\" SET \"Warehouse_is_sales_warehouse\" = isSalesWarehouse\n"
						+ "			WHERE isSalesWarehouse AND \"WarehouseHasWarehouseId\" = defaultwarehouseid;\n"
						+ "		\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						///////////////////////////////
						// foreign keys to metamodel //
						///////////////////////////////
						"ALTER TABLE soberano.\"Activity\"\n"
						+ "  ADD CONSTRAINT \"Activity_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Counter\"\n"
						+ "  ADD CONSTRAINT \"Counter_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
								
								
								
						"ALTER TABLE soberano.\"Order\"\n"
						+ "  ADD CONSTRAINT \"Order_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Configuration\"\n"
						+ "  ADD CONSTRAINT \"Configuration_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
								
								
								
						"ALTER TABLE soberano.\"Catalog\"\n"
						+ "  ADD CONSTRAINT \"Catalog_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
								
						
								
						"ALTER TABLE soberano.\"CashRegister\"\n"
						+ "  ADD CONSTRAINT \"CashRegister_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Worker\"\n"
								+ "  ADD CONSTRAINT \"Worker_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
								+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
								+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						/////////////////////////////////////
						// business organization structure //
						/////////////////////////////////////
						
						"--add responsibilities\n"
						+ "--responsibility 1 is reserved for soberano.responsibility.top\n"
						+ "INSERT INTO \"metamodel\".\"Responsibility\" (\"ResponsibilityHasResponsibilityId\",\n"
						+ "						\"This_has_Name\")	\n"
						+ "	VALUES (2, 'Manager'),\n"
						+ "		(3, 'Accounter'),\n"
						+ "		(4, 'Salesclerk'),\n"
						+ "		(5, 'Shift manager'),\n"
						+ "		(6, 'Checker'),\n"
						+ "		(7, 'Auditor'),\n"
						+ "		(8, 'Workshop 1 worker'),\n"
						+ "		(9, 'Workshop 2 worker'),\n"
						+ "		(10, 'Storekeeper'),\n"
						+ "		(11, 'Catalog maintainer'),\n"
						+ "		(12, 'Community manager'),\n"
						+ "		(13, 'Procurement worker'),\n"
						+ "		(14, 'System admin'),\n"
						+ "		(15, 'Technologist');",
						
						
												
						"--assign top user to all responsibilities\n"
						+ "SELECT \"metamodel\".\"fn_User_assignToResponsibilities\"(1, ARRAY[2,3,4,5,6,7,8,9,10,11,12,13,14,15], ARRAY[1,1,1,1,1,1,1,1,1,1,1,1,1,1]);",
						
							
												
						/////////////////////////////////////
						// business dynamics configuration //
						/////////////////////////////////////
						
						"--life cycles\n"
						+ "INSERT INTO \"metamodel\".\"LifeCycle\" (\"LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_is_for_EntityType_with_MeaningHasMeaningId\")\n"
						+ "	VALUES (1, 'Activity', '_D205391E-37D6-4AA6-B226-88E7A84B0C70'),\n"
						+ "			(2, 'Counter', '_0126EFEB-6646-4C9C-B0C2-28EB3B25E3A7'),\n"
						+ "			(3, 'Order', '_BD3DEF99-C7B5-4A31-BD72-FCC02EDB6355'),\n"
						+ "			(4, 'Configuration', '_CA784430-45B2-4403-9257-1D3906C164D1'),\n"
						+ "			(5, 'Catalog', '_94C0BD6E-5DED-4F46-95DA-994C881B6271'),\n"
						+ " 		(6, 'Worker', '_2632E1D8-8D63-4DD4-9FA0-A19C0250A09B'),\n"
						+ "			(7, 'AcquirableMaterial', '_9FEE3FFC-A5FB-423E-8D33-40B22B40022E'),\n"
						+ "			(8, 'CostCenter', '_BF752D2F-A23F-4764-BFE3-8B3ED196AB88'),\n"
						+ "			(9, 'Currency', '_D50FB66E-606B-4CE0-8005-6E172E66746B'),\n"
						+ "			(10, 'MaterialExpense', '_80FDAA4B-92DB-4A88-89F8-BC11EEFBF0FE'),\n"
						+ "			(11, 'PayrollExpense', '_9FE7DA9E-6FB3-4490-A155-E35656C281D7'),\n"
						+ "			(12, 'Process', '_0AEEE069-E89E-407B-BF1D-B7881EF813B3'),\n"
						+ "			(13, 'Product', '_18118B72-85F7-47D8-A683-25B366896F80'),\n"
						+ "			(14, 'ProductCategory', '_819F484A-3996-4398-894B-634B23C2160D'),\n"
						+ "			(15, 'Provider', '_FD850F63-E17A-4803-B04B-59004C0F6C2D'),\n"
						+ "			(16, 'Unit', '_8B5F06D3-F307-49D7-99F1-57541D8A2B35'),\n"
						+ "			(17, 'Warehouse', '_F6E70C11-9ABC-469E-8468-930AAC301E70'),\n"
						+ "			(18, 'ServiceExpense', '_41F021C3-227F-4184-A7F8-6E69DA816D2D'),\n"
						+ "			(19, 'Service', '_E4414D7E-5ACB-45F9-9E78-33AC6CD619C4'),\n"
						+ "			(20, 'ShiftClosure', '_26546A60-384E-49D7-912B-D5D174CEEE14');",
						
						
						
						"--lifecycle deployment across top authority\n"
						+ "INSERT INTO \"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" (\"LifeCycleHasLifeCycleId\",\n"
						+ "								\"AuthorityHasAuthorityId\")\n"
						+ "	VALUES (1, 1),\n"
						+ "	 (2, 1),\n"
						+ "	 (3, 1),\n"
						+ "	 (4, 1),\n"
						+ "	 (5, 1),\n"
						+ "  (6, 1),\n"
						+ "	 (7, 1),\n"
						+ "	 (8, 1),\n"
						+ "	 (9, 1),\n"
						+ "	 (10, 1),\n"
						+ "	 (11, 1),\n"
						+ "	 (12, 1),\n"
						+ "	 (13, 1),\n"
						+ "	 (14, 1),\n"
						+ "	 (15, 1),\n"
						+ "	 (16, 1),\n"
						+ "	 (17, 1),\n"
						+ "	 (18, 1),\n"
						+ "	 (19, 1),\n"
						+ "	 (20, 1);",
								
						
						
						"--add lifecycle stages under top authority jurisdiction\n"
						+ "--stage 1 is reserved for soberano.stage.starting\n"
						+ "INSERT INTO \"metamodel\".\"Stage\" (\"StageHasStageId\", \"This_has_Name\", \"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\")\n"
						+ "							VALUES (2, 'Enabled', 1),\n"
						+ "								(3, 'Ongoing', 1),\n"
						+ "								(4, 'Recorded', 1),\n"
						+ "								(5, 'Canceled', 1),\n"
						+ "								(6, 'Closed', 1),\n"
						+ "								(7, 'Honored', 1),\n"
						+ "								(8, 'Disabled', 1),\n"
						+ "								(9, 'Dishonored', 1);",
						
						
						
						"/* activity lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (1001, 'Enabled', 1);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (1001, 'Check', 1, 1001, 1001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (1, 'Manager', 1001),\n"
						+ "				(1, 'Salesclerk', 1001),\n"
						+ "				(1, 'Shift manager', 1001),\n"
						+ "				(1, 'Checker', 1001),\n"
						+ "				(1, 'Auditor', 1001),\n"
						+ "				(1, 'System admin', 1001);",
						
						
						
						"/* counter lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (2001, 'soberano.stage.starting', 2),\n"
						+ "		(2002, 'Enabled', 2),\n"
						+ "		(2003, 'Disabled', 2);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (2001, 'Add', 2, 2001, 2002, 'false'),\n"
						+ "		(2002, 'Apply', 2, 2002, 2002, 'false'),\n"
						+ "		(2003, 'Disable', 2, 2002, 2003, 'false'),\n"
						+ "		(2004, 'Check', 2, 2002, 2002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (2, 'Manager', 2001),\n"
						+ "				(2, 'System admin', 2001),\n"
						+ "				(2, 'Manager', 2002),\n"
						+ "				(2, 'System admin', 2002),\n"
						+ "				(2, 'Manager', 2003),\n"
						+ "				(2, 'System admin', 2003),\n"
						+ "				(2, 'Auditor', 2004);",
						
						
						
						"/* order lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (3001, 'soberano.stage.starting', 3),\n"
						+ "		(3002, 'Ongoing', 3),\n"
						+ "		(3003, 'Closed', 3);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (3001, 'Open', 3, 3001, 3002, 'false'),\n"
						+ "		(3002, 'Make', 3, 3002, 3002, 'false'),\n"
						+ "		(3003, 'Collect', 3, 3002, 3002, 'false'),\n"
						+ "		(3004, 'Close', 3, 3002, 3003, 'false'),\n"
						+ "		(3005, 'Check', 3, 3002, 3002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (3, 'Manager', 3001),\n"
						+ "				(3, 'Salesclerk', 3001),\n"
						+ "				(3, 'Shift manager', 3001),\n"
						+ "				(3, 'Manager', 3002),\n"
						+ "				(3, 'Salesclerk', 3002),\n"
						+ "				(3, 'Shift manager', 3002),\n"
						+ "				(3, 'Manager', 3003),\n"
						+ "				(3, 'Shift manager', 3003),\n"
						+ "				(3, 'Checker', 3003),\n"
						+ "				(3, 'Manager', 3004),\n"
						+ "				(3, 'Shift manager', 3004),\n"
						+ "				(3, 'Checker', 3004),\n"
						+ "				(3, 'Auditor', 3005);",
						
						
						
						"/* configuration lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (4001, 'Enabled', 4);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (4001, 'Check', 4, 4001, 4001, 'false'),\n"
						+ "		(4002, 'Apply', 4, 4001, 4001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (4, 'Manager', 4001),\n"
						+ "				(4, 'System admin', 4001),\n"
						+ "				(4, 'Manager', 4002),\n"
						+ "				(4, 'System admin', 4002);",
						
						
						
						"/* catalog lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (5001, 'Enabled', 5);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (5001, 'Check', 5, 5001, 5001, 'false'),\n"
						+ "		(5002, 'Apply', 5, 5001, 5001, 'false'),\n"
						+ "		(5003, 'Export', 5, 5001, 5001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (5, 'Manager', 5001),\n"
						+ "				(5, 'Accounter', 5001),\n"
						+ "				(5, 'Salesclerk', 5001),\n"
						+ "				(5, 'Shift manager', 5001),\n"
						+ "				(5, 'Checker', 5001),\n"
						+ "				(5, 'Auditor', 5001),\n"
						+ "				(5, 'Storekeeper', 5001),\n"
						+ "				(5, 'Catalog maintainer', 5001),\n"
						+ "				(5, 'Community manager', 5001),\n"
						+ "				(5, 'Procurement worker', 5001),\n"
						+ "				(5, 'System admin', 5001),\n"
						+ "				(5, 'Manager', 5002),\n"
						+ "				(5, 'Shift manager', 5002),\n"
						+ "				(5, 'Catalog maintainer', 5002),\n"
						+ "				(5, 'Manager', 5003),\n"
						+ "				(5, 'Shift manager', 5003),\n"
						+ "				(5, 'Accounter', 5003),\n"
						+ "				(5, 'Catalog maintainer', 5003),\n"
						+ "				(5, 'Auditor', 5003);",
						
						
						
						"/* worker lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (6001, 'soberano.stage.starting', 6),\n"
						+ "		(6002, 'Enabled', 6),\n"
						+ "		(6003, 'Disabled', 6);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (6001, 'Add', 6, 6001, 2002, 'false'),\n"
						+ "		(6002, 'Apply', 6, 6002, 6002, 'false'),\n"
						+ "		(6003, 'Disable', 6, 6002, 6003, 'false'),\n"
						+ "		(6004, 'Check', 6, 6002, 6002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (6, 'System admin', 6001),\n"
						+ "				(6, 'System admin', 6002),\n"
						+ "				(6, 'System admin', 6003),\n"						
						+ "				(6, 'Shift manager', 6004),\n"	
						+ "				(6, 'Manager', 6004),\n"
						+ "				(6, 'Accounter', 6004),\n"
						+ "				(6, 'Auditor', 6004);",
						
						
						
						"/* product category lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (14001, 'soberano.stage.starting', 14),\n"
						+ "		(14002, 'Enabled', 14),\n"
						+ "		(14003, 'Disabled', 14);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (14001, 'Add', 14, 14001, 14002, 'false'),\n"
						+ "		(14002, 'Apply', 14, 14002, 14002, 'false'),\n"
						+ "		(14003, 'Disable', 14, 14002, 14003, 'false'),\n"
						+ "		(14004, 'Check', 14, 14002, 14002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (14, 'Catalog maintainer', 14001),\n"
						+ "				(14, 'Catalog maintainer', 14002),\n"
						+ "				(14, 'Catalog maintainer', 14003),\n"
						+ "				(14, 'Manager', 14004),\n"
						+ "				(14, 'Accounter', 14004),\n"						
						+ "				(14, 'Salesclerk', 14004),\n"
						+ "				(14, 'Shift manager', 14004),\n"
						+ "				(14, 'Checker', 14004),\n"
						+ "				(14, 'Workshop 1 worker', 14004),\n"
						+ "				(14, 'Workshop 2 worker', 14004),\n"
						+ "				(14, 'Storekeeper', 14004),\n"						
						+ "				(14, 'Community manager', 14004),\n"
						+ "				(14, 'Procurement worker', 14004),\n"
						+ "				(14, 'Auditor', 14004);",
						
						
						
						"/* provider lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (15001, 'soberano.stage.starting', 15),\n"
						+ "		(15002, 'Enabled', 15),\n"
						+ "		(15003, 'Disabled', 15);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (15001, 'Add', 15, 15001, 15002, 'false'),\n"
						+ "		(15002, 'Apply', 15, 15002, 15002, 'false'),\n"
						+ "		(15003, 'Disable', 15, 15002, 15003, 'false'),\n"
						+ "		(15004, 'Check', 15, 15002, 15002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (15, 'Procurement worker', 15001),\n"
						+ "				(15, 'Procurement worker', 15002),\n"
						+ "				(15, 'Procurement worker', 15003),\n"
						+ "				(15, 'Manager', 15004),\n"
						+ "				(15, 'Shift manager', 15004),\n"
						+ "				(15, 'Accounter', 15004),\n"
						+ "				(15, 'Storekeeper', 15004),\n"
						+ "				(15, 'Auditor', 15004);",
						
						
						
						"/* product lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (13001, 'soberano.stage.starting', 13),\n"
						+ "		(13002, 'Enabled', 13),\n"
						+ "		(13003, 'Disabled', 13);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (13001, 'Add', 13, 13001, 13002, 'false'),\n"
						+ "		(13002, 'Apply', 13, 13002, 13002, 'false'),\n"
						+ "		(13003, 'Disable', 13, 13002, 13003, 'false'),\n"
						+ "		(13004, 'Check', 13, 13002, 13002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (13, 'Catalog maintainer', 13001),\n"
						+ "				(13, 'Catalog maintainer', 13002),\n"
						+ "				(13, 'Catalog maintainer', 13003),\n"
						+ "				(13, 'Manager', 13004),\n"
						+ "				(13, 'Accounter', 13004),\n"						
						+ "				(13, 'Salesclerk', 13004),\n"
						+ "				(13, 'Shift manager', 13004),\n"
						+ "				(13, 'Checker', 13004),\n"
						+ "				(13, 'Workshop 1 worker', 13004),\n"
						+ "				(13, 'Workshop 2 worker', 13004),\n"
						+ "				(13, 'Storekeeper', 13004),\n"						
						+ "				(13, 'Community manager', 13004),\n"
						+ "				(13, 'Procurement worker', 13004),\n"
						+ "				(13, 'Technologist', 13004),\n"
						+ "				(13, 'Auditor', 13004);",
						
						
						
						"/* warehouse lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (17001, 'soberano.stage.starting', 17),\n"
						+ "		(17002, 'Enabled', 17),\n"
						+ "		(17003, 'Disabled', 17);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (17001, 'Add', 17, 17001, 17002, 'false'),\n"
						+ "		(17002, 'Apply', 17, 17002, 17002, 'false'),\n"
						+ "		(17003, 'Disable', 17, 17002, 17003, 'false'),\n"
						+ "		(17004, 'Check', 17, 17002, 17002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (17, 'Manager', 17001),\n"
						+ "				(17, 'Manager', 17002),\n"
						+ "				(17, 'Manager', 17003),\n"
						+ "				(17, 'Accounter', 17004),\n"
						+ "				(17, 'Shift manager', 17004),\n"						
						+ "				(17, 'Storekeeper', 17004),\n"
						+ "				(17, 'Technologist', 17004),\n"
						+ "				(17, 'Auditor', 17004);",
						
						
						
						"/* cost center lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (8001, 'soberano.stage.starting', 8),\n"
						+ "		(8002, 'Enabled', 8),\n"
						+ "		(8003, 'Disabled', 8);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (8001, 'Add', 8, 8001, 8002, 'false'),\n"
						+ "		(8002, 'Apply', 8, 8002, 8002, 'false'),\n"
						+ "		(8003, 'Disable', 8, 8002, 8003, 'false'),\n"
						+ "		(8004, 'Check', 8, 8002, 8002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (8, 'Manager', 8001),\n"
						+ "				(8, 'Manager', 8002),\n"
						+ "				(8, 'Manager', 8003),\n"
						+ "				(8, 'Accounter', 8004),\n"
						+ "				(8, 'Shift manager', 8004),\n"	
						+ "				(8, 'Technologist', 8004),\n"
						+ "				(8, 'Auditor', 8004);",
						
						
						
						"/* process lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (12001, 'soberano.stage.starting', 12),\n"
						+ "		(12002, 'Enabled', 12),\n"
						+ "		(12003, 'Disabled', 12);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (12001, 'Add', 12, 12001, 12002, 'false'),\n"
						+ "		(12002, 'Apply', 12, 12002, 12002, 'false'),\n"
						+ "		(12003, 'Disable', 12, 12002, 12003, 'false'),\n"
						+ "		(12004, 'Check', 12, 12002, 12002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (12, 'Technologist', 12001),\n"
						+ "				(12, 'Technologist', 12002),\n"
						+ "				(12, 'Technologist', 12003),\n"
						+ "				(12, 'Accounter', 12004),\n"
						+ "				(12, 'Shift manager', 12004),\n"	
						+ "				(12, 'Manager', 12004),\n"
						+ "				(12, 'Workshop 1 worker', 12004),\n"
						+ "				(12, 'Workshop 2 worker', 12004),\n"
						+ "				(12, 'Storekeeper', 12004),\n"
						+ "				(12, 'Auditor', 12004);",
						
						
						
						"/* acquirable material lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (7001, 'soberano.stage.starting', 7),\n"
						+ "		(7002, 'Enabled', 7),\n"
						+ "		(7003, 'Disabled', 7);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (7001, 'Add', 7, 7001, 7002, 'false'),\n"
						+ "		(7002, 'Apply', 7, 7002, 7002, 'false'),\n"
						+ "		(7003, 'Disable', 7, 7002, 7003, 'false'),\n"
						+ "		(7004, 'Check', 7, 7002, 7002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (7, 'Technologist', 7001),\n"
						+ "				(7, 'Technologist', 7002),\n"
						+ "				(7, 'Technologist', 7003),\n"
						+ "				(7, 'Accounter', 7004),\n"
						+ "				(7, 'Shift manager', 7004),\n"	
						+ "				(7, 'Manager', 7004),\n"
						+ "				(7, 'Workshop 1 worker', 7004),\n"
						+ "				(7, 'Workshop 2 worker', 7004),\n"
						+ "				(7, 'Storekeeper', 7004),\n"
						+ "				(7, 'Auditor', 7004);",
						
						
						
						"/* currency lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (9001, 'soberano.stage.starting', 9),\n"
						+ "		(9002, 'Enabled', 9),\n"
						+ "		(9003, 'Disabled', 9);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (9001, 'Add', 9, 9001, 9002, 'false'),\n"
						+ "		(9002, 'Apply', 9, 9002, 9002, 'false'),\n"
						+ "		(9003, 'Disable', 9, 9002, 9003, 'false'),\n"
						+ "		(9004, 'Check', 9, 9002, 9002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (9, 'Accounter', 9001),\n"
						+ "				(9, 'Accounter', 9002),\n"
						+ "				(9, 'Accounter', 9003),\n"
						+ "				(9, 'Manager', 9004),\n"
						+ "				(9, 'Shift manager', 9004),\n"	
						+ "				(9, 'Salesclerk', 9004),\n"
						+ "				(9, 'Checker', 9004),\n"
						+ "				(9, 'Auditor', 9004);",
						
						
						
						"/* service lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (19001, 'soberano.stage.starting', 19),\n"
						+ "		(19002, 'Enabled', 19),\n"
						+ "		(19003, 'Disabled', 19);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (19001, 'Add', 19, 19001, 19002, 'false'),\n"
						+ "		(19002, 'Apply', 19, 19002, 19002, 'false'),\n"
						+ "		(19003, 'Disable', 19, 19002, 19003, 'false'),\n"
						+ "		(19004, 'Check', 19, 19002, 19002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (19, 'Manager', 19001),\n"
						+ "				(19, 'Manager', 19002),\n"
						+ "				(19, 'Manager', 19003),\n"
						+ "				(19, 'Accounter', 19004),\n"
						+ "				(19, 'Shift manager', 19004),\n"
						+ "				(19, 'Auditor', 19004);",
						
						
						
						"/* material expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (10001, 'soberano.stage.starting', 10),\n"
						+ "		(10002, 'Recorded', 10),\n"
						+ "		(10003, 'Canceled', 10);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (10001, 'Add', 10, 10001, 10002, 'false'),\n"
						+ "		(10003, 'Cancel', 10, 10002, 10003, 'false'),\n"
						+ "		(10004, 'Check', 10, 10002, 10002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (10, 'Procurement worker', 10001),\n"
						+ "				(10, 'Shift manager', 10001),\n"	
						+ "				(10, 'Manager', 10001),\n"
						+ "				(10, 'Shift manager', 10003),\n"	
						+ "				(10, 'Manager', 10003),\n"
						+ "				(10, 'Accounter', 10004),\n"
						+ "				(10, 'Storekeeper', 10004),\n"
						+ "				(10, 'Auditor', 10004);",
						
						
						
						"/* service expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (18001, 'soberano.stage.starting', 18),\n"
						+ "		(18002, 'Recorded', 18),\n"
						+ "		(18003, 'Canceled', 18);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (18001, 'Add', 18, 18001, 18002, 'false'),\n"
						+ "		(18003, 'Cancel', 18, 18002, 18003, 'false'),\n"
						+ "		(18004, 'Check', 18, 18002, 18002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (18, 'Procurement worker', 18001),\n"
						+ "				(18, 'Shift manager', 18001),\n"	
						+ "				(18, 'Manager', 18001),\n"
						+ "				(18, 'Shift manager', 18003),\n"	
						+ "				(18, 'Manager', 18003),\n"
						+ "				(18, 'Accounter', 18004),\n"
						+ "				(18, 'Auditor', 18004);",
						
						
						
						"/* payroll expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (11001, 'soberano.stage.starting', 11),\n"
						+ "		(11002, 'Recorded', 11),\n"
						+ "		(11003, 'Canceled', 11);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (11001, 'Add', 11, 11001, 11002, 'false'),\n"
						+ "		(11003, 'Cancel', 11, 11002, 11003, 'false'),\n"
						+ "		(11004, 'Check', 11, 11002, 11002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (11, 'Shift manager', 11001),\n"	
						+ "				(11, 'Manager', 11001),\n"
						+ "				(11, 'Shift manager', 11003),\n"	
						+ "				(11, 'Manager', 11003),\n"
						+ "				(11, 'Accounter', 11004),\n"
						+ "				(11, 'Auditor', 11004);",
						
						
						
						"/* shift closure lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (20001, 'soberano.stage.starting', 20),\n"
						+ "		(20002, 'Recorded', 20),\n"
						+ "		(20003, 'Canceled', 20);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (20001, 'Add', 20, 20001, 20002, 'false'),\n"
						+ "		(20003, 'Cancel', 20, 20002, 20003, 'false'),\n"
						+ "		(20004, 'Check', 20, 20002, 20002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (20, 'Shift manager', 20001),\n"	
						+ "				(20, 'Manager', 20001),\n"
						+ "				(20, 'Manager', 20003),\n"
						+ "				(20, 'Accounter', 20004),\n"
						+ "				(20, 'Storekeeper', 20004),\n"
						+ "				(20, 'Auditor', 20004);",
						
						
						
						"/* cash register lifecycle. no lifecycle needed. internal-use-only object. nobody makes decisions on it. */\n",
						
						
						
						"/* unit lifecycle. for the time being, measurement units are unchangeable. */\n",
						
						
						
						////////////////////
						// business facts //
						////////////////////
						
						//singletons
						
						"--insert the only one activity object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_1 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Activity\"(\n"
						+ "	\"ActivityHasActivityId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 1);",
						
						
						
						"--insert the only one configuration object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_2 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Configuration\"(\n"
						+ "	\"ConfigurationHasConfigurationId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 2);",
						
						
						
						"--insert the only one catalog object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_3 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Catalog\"(\n"
						+ "	\"CatalogHasCatalogId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 3);",
						
						
						
						"--insert the only one cash register object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_4 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"CashRegister\"(\n"
						+ "	\"CashRegisterHasCashRegisterId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 4);",
						
						
						
						"INSERT INTO soberano.\"PaymentProcessor\"(\n"
						+ "	\"PaymentProcessorHasPaymentProcessorId\", \"This_has_Name\")\n"
						+ "	VALUES (1, 'Opennode'),\n"
						+ "			(2, 'Tropipay');",
						
						
						
						//measurement units
						"INSERT INTO soberano.\"Magnitude\"(\n"
						+ "	\"MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES (1), (2), (3);",
						
						
						
						"INSERT INTO soberano.\"MagnitudeHasNameInLanguage\"(\n"
						+ "	\"Language\", \"Name\", \"MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES ('es', 'cantidad discreta', '1'),\n"
						+ "			('es', 'peso', '2'),\n"
						+ "			('es', 'volumen', '3'),\n"
						+ "			('en', 'discrete quantity', '1'),\n"
						+ "			('en', 'weight', '2'),\n"
						+ "			('en', 'volume', '3');",
						
						
						
						"INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "																			\"This_is_created_at_Timestamp\", \n"
						+ "																			\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "																			\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "																			\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "																			\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "									VALUES (5, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(6, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(7, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(8, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(9, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(10, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(11, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(12, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1);",
						
						
						
						"INSERT INTO soberano.\"Unit\"(\n"
						+ "	\"UnitHasUnitId\", \"This_is_identified_by_EntityTypeInstance_id\", \"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES (1, 5, 1),\n"
						+ "			(2, 6, 2),\n"
						+ "			(3, 7, 2),\n"
						+ "			(4, 8, 2),\n"
						+ "			(5, 9, 2),\n"
						+ "			(6, 10, 2),\n"
						+ "			(7, 11, 3),\n"
						+ "			(8, 12, 3);",
						
						
						
						"INSERT INTO soberano.\"UnitHasAcronymInLanguage\"(\n"
						+ "	\"Language\", \"Acronym\", \"UnitHasUnitId\")\n"
						+ "	VALUES ('es', 'U', 1),\n"
						+ "			('es', 'kg', 2),\n"
						+ "			('es', 'g', 3),\n"
						+ "			('es', 'mg', 4),\n"
						+ "			('es', 'lb', 5),\n"
						+ "			('es', 'oz', 6),\n"
						+ "			('es', 'l', 7),\n"
						+ "			('es', 'ml', 8),\n"
						+ "			('en', 'pcs', 1),\n"
						+ "			('en', 'kg', 2),\n"
						+ "			('en', 'g', 3),\n"
						+ "			('en', 'mg', 4),\n"
						+ "			('en', 'lb', 5),\n"
						+ "			('en', 'oz', 6),\n"
						+ "			('en', 'l', 7),\n"
						+ "			('en', 'ml', 8);",
						
						
						
						"INSERT INTO soberano.\"UnitHasNameInLanguage\"(\n"
						+ "	\"Language\", \"Name\", \"UnitHasUnitId\")\n"
						+ "	VALUES ('es', 'unidad', 1),\n"
						+ "			('es', 'kilogramo', 2),\n"
						+ "			('es', 'gramo', 3),\n"
						+ "			('es', 'miligramo', 4),\n"
						+ "			('es', 'libra', 5),\n"
						+ "			('es', 'onza', 6),\n"
						+ "			('es', 'litro', 7),\n"
						+ "			('es', 'milititro', 8),\n"
						+ "			('en', 'piece', 1),\n"
						+ "			('en', 'kilogram', 2),\n"
						+ "			('en', 'gram', 3),\n"
						+ "			('en', 'milligram', 4),\n"
						+ "			('en', 'pound', 5),\n"
						+ "			('en', 'ounce', 6),\n"
						+ "			('en', 'liter', 7),\n"
						+ "			('en', 'milliliter', 8);",
						
						
						
						"INSERT INTO soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\"(\n"
						+ "	\"Factor\", \"Unit1_UnitHasUnitId\", \"Unit2_UnitHasUnitId\")\n"
						+ "	VALUES (1, 1, 1), /*pcs to pcs*/\n"
						+ "			(1, 2, 2), /*kg to kg*/\n"
						+ "			(1000, 2, 3), /*kg to g*/\n"
						+ "			(1000000, 2, 4), /*kg to mg*/\n"
						+ "			(2.2046226218, 2, 5), /*kg to lb*/\n"
						+ "			(35.2739619496, 2, 6), /*kg to oz*/\n"
						+ "			(1, 7, 7), /*l to l*/\n"
						+ "			(1000, 7, 8), /*l to ml*/"
						+ "			(1, 8, 8), /*ml to ml*/"
						+ "			(0.001, 8, 7), /*ml to l*/"
						+ "			(1, 3, 3), /*g to g*/\n"
						+ "			(0.001, 3, 2), /*g to kg*/\n"
						+ "			(1000, 3, 4), /*g to mg*/\n"
						+ "			(0.00220462, 3, 5), /*g to lb*/\n"
						+ "			(0.035274, 3, 6), /*g to oz*/\n"
						+ "			(1, 5, 5), /*lb to lb*/\n"
						+ "			(0.453592, 5, 2), /*lb to kg*/\n"
						+ "			(453592, 5, 4), /*lb to mg*/\n"
						+ "			(453.592, 5, 3), /*lb to g*/\n"
						+ "			(16, 5, 6), /*lb to oz*/\n"
						+ "			(1, 4, 4), /*mg to mg*/\n"
						+ "			(0.000001, 4, 2), /*mg to kg*/\n"
						+ "			(0.0000022046, 4, 5), /*mg to lb*/\n"
						+ "			(0.001, 4, 3), /*mg to g*/\n"
						+ "			(0.0000352739619496, 4, 6), /*mg to oz*/\n"
						+ "			(1, 6, 6), /*oz to oz*/\n"
						+ "			(0.0283495, 6, 2), /*oz to kg*/\n"
						+ "			(0.0625, 6, 5), /*oz to lb*/\n"
						+ "			(28.3495, 6, 3), /*oz to g*/\n"
						+ "			(28349.5, 6, 4); /*oz to mg*/\n",
						
						
						
						"INSERT INTO metamodel.\"EntityTypeInstance\"(\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "											\"This_is_created_at_Timestamp\", \n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "											\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "											\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "											\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "	VALUES (13,\n"
						+ "			now() - INTERVAL '1 day',\n"
						+ "			'_26546A60-384E-49D7-912B-D5D174CEEE14',\n"
						+ "		   1,\n"
						+ "		   4,\n"
						+ "		   1);",
						
						
						
						"INSERT INTO soberano.\"ShiftClosure\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "									\"This_is_of_Shift\", \n"
						+ "									\"Report_is_of_This\")\n"
						+ "	VALUES (13, \n"
						+ "			now() - INTERVAL '1 day', \n"
						+ "			'');",
						
						
						
						//////////////////////
						// business queries //
						//////////////////////
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_create\"(\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	responsibilities integer[],\n"
						+ "	authorities integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		workerId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		workerId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Worker', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--create user. new user's loginname is its email address.\n"
						+ "			SELECT \"metamodel\".\"fn_User_insert\"(emailAddress, true) INTO userId;\n"
						+ "			\n"
						+ "			--assign responsibilities\n"
						+ "			PERFORM \"metamodel\".\"fn_User_assignToResponsibilities\"(userId, responsibilities, authorities);\n"
						+ "			\n"
						+ "			--create postal address\n"
						+ "			INSERT INTO soberano.\"PostalAddress\"(\"This_includes_Town\", \n"
						+ "												 \"This_includes_PostalCode\", \n"
						+ "												 \"This_includes_AddressString\", \n"
						+ "												 \"This_includes_Latitute\", \n"
						+ "												 \"This_includes_Longitude\", \n"
						+ "												 \"This_includes_City\", \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\")\n"
						+ "				VALUES (town,\n"
						+ "					   postalCode,\n"
						+ "					   address,\n"
						+ "					   latitude,\n"
						+ "					   longitude,\n"
						+ "					   city,\n"
						+ "					   municipalityId) \n"
						+ "				RETURNING \"PostalAddressHasPostalAddressId\" INTO postalAddressId;\n"
						+ "				\n"
						+ "			--create contact data\n"
						+ "			INSERT INTO soberano.\"ContactData\"(\"This_includes_PhoneNumber\", \n"
						+ "											   \"This_includes_EmailAddress\", \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\")\n"
						+ "				VALUES (mobilePhoneNumber,\n"
						+ "					   emailAddress,\n"
						+ "					   postalAddressId) \n"
						+ "				RETURNING \"ContactDataHasContactDataId\" INTO contactDataId;\n"
						+ "				\n"
						+ "			--create worker\n"
						+ "			INSERT INTO soberano.\"Worker\"(\"This_has_LastName\", \n"
						+ "										  \"This_has_FirstName\", \n"
						+ "										  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										  \"This_has_ContactData_with_ContactDataHasContactDataId\",\n"
						+ "										  \"This_has_LoginName\")\n"
						+ "				VALUES (lastName,\n"
						+ "					   firstName,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   contactDataId,\n"
						+ "					   emailAddress) \n"
						+ "				RETURNING \"WorkerHasWorkerId\" INTO workerId;\n"
						+ "		END IF;\n"
						+ "		RETURN workerId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		--in domainObjectName is returned the qualified name of the worker\n"
						+ "		RETURN QUERY SELECT \"WorkerHasWorkerId\", qualifiedName\n"
						+ "						FROM (SELECT DISTINCT \"WorkerHasWorkerId\", \n"
						+ "							  				(\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\") qualifiedName\n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(6, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Worker\" worker\n"
						+ "								ON instance.\"InstanceId\" = worker.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							INNER JOIN metamodel.\"User\" u\n"
						+ "								ON u.\"This_has_LoginName\" = worker.\"This_has_LoginName\") sq\n"
						+ "						ORDER BY qualifiedName;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_modify\"(\n"
						+ "	workerid integer,\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	responsibilities integer[],\n"
						+ "	authorities integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		decisionId integer;\n"
						+ "		userName character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "						\"UserHasUserId\",\n"
						+ "						\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\",\n"
						+ "						\"ContactDataHasContactDataId\",\n"
						+ "				  		objecttable.\"This_has_LoginName\" userName\n"
						+ "					FROM soberano.\"Worker\" objecttable\n"
						+ "						INNER JOIN metamodel.\"User\" userdata\n"
						+ "							ON objecttable.\"This_has_LoginName\" = userdata.\"This_has_LoginName\"\n"
						+ "						INNER JOIN soberano.\"ContactData\" contactdata\n"
						+ "							ON objecttable.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contactdata.\"ContactDataHasContactDataId\"\n"
						+ "					WHERE \"WorkerHasWorkerId\" = workerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				userId,\n"
						+ "				postalAddressId,\n"
						+ "				contactDataId,\n"
						+ "				userName,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND userId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the worker\n"
						+ "			UPDATE soberano.\"Worker\" \n"
						+ "				SET \"This_has_LastName\" = lastname, \n"
						+ "					\"This_has_FirstName\" = firstname\n"
						+ "				WHERE \"WorkerHasWorkerId\" = workerid;\n"
						+ "		\n"
						+ "			--assign responsibilities\n"
						+ "			PERFORM \"metamodel\".\"fn_User_assignToResponsibilities\"(userId, responsibilities, authorities);\n"
						+ "			\n"
						+ "			--update postal address\n"
						+ "			UPDATE soberano.\"PostalAddress\" SET \"This_includes_Town\" = town, \n"
						+ "												 \"This_includes_PostalCode\" = postalcode, \n"
						+ "												 \"This_includes_AddressString\" = address, \n"
						+ "												 \"This_includes_Latitute\" = latitude, \n"
						+ "												 \"This_includes_Longitude\" = longitude, \n"
						+ "												 \"This_includes_City\" = city, \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipalityid \n"
						+ "				WHERE \"PostalAddressHasPostalAddressId\" = postalAddressId;\n"
						+ "				\n"
						+ "			--update contact data\n"
						+ "			UPDATE soberano.\"ContactData\" SET \"This_includes_PhoneNumber\" = mobilePhoneNumber, \n"
						+ "											   \"This_includes_EmailAddress\" = emailAddress, \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = postalAddressId\n"
						+ "				WHERE \"ContactDataHasContactDataId\" = contactDataId;\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(WORKER)# ' || CAST(userId AS text) || ' : ' || userName || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_disable\"(\n"
						+ "	workerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		decisionId integer;\n"
						+ "		userName character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "						\"UserHasUserId\",\n"
						+ "						objecttable.\"This_has_LoginName\" userName\n"
						+ "					FROM soberano.\"Worker\" objecttable\n"
						+ "						INNER JOIN metamodel.\"User\" userdata\n"
						+ "							ON objecttable.\"This_has_LoginName\" = userdata.\"This_has_LoginName\"\n"
						+ "					WHERE \"WorkerHasWorkerId\" = workerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				userId,\n"
						+ "				userName,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND userId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(WORKER)# ' || CAST(userId AS text) || ' : ' || userName || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Country_getAll\"()\n"
						+ "	RETURNS TABLE(\"domainObjectStringId\" character(2), \"domainObjectName\" character varying) AS\n"
						+ "	$BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"CountryHasCountryCode\", \"This_has_Name\" FROM soberano.\"Country\" ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;\n"
						+ "	$BODY$\n"
						+ "	LANGUAGE plpgsql VOLATILE COST 100 ROWS 300;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Province_getAll\"(countrycode character)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"ProvinceHasProvinceId\", \"This_has_Name\" \n"
						+ "			FROM soberano.\"Province\" \n"
						+ "			WHERE \"This_belongs_to_Country_with_CountryHasCountryCode\" = countryCode\n"
						+ "			ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Municipality_getAll\"(provinceId integer)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 200\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"MunicipalityHasMunicipalityId\", \"This_has_Name\" \n"
						+ "			FROM soberano.\"Municipality\" \n"
						+ "			WHERE \"This_belongs_to_Province_with_ProvinceHasProvinceId\" = provinceId\n"
						+ "			ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_get\"(workerid integer,\n"
						+ "													loginname character varying)\n"
						+ "    RETURNS TABLE(\"workerId\" integer, \n"
						+ "				  \"entityTypeInstanceId\" integer, \n"
						+ "				  \"loginName\" character varying, \n"
						+ "				  \"firstName\" character varying, \n"
						+ "				  \"lastName\" character varying, \n"
						+ "				  password character varying, \n"
						+ "				  \"mobilePhoneNumber\" character varying, \n"
						+ "				  \"countryCode\" character, \n"
						+ "				  address character varying, \n"
						+ "				  \"postalCode\" character varying, \n"
						+ "				  town character varying, \n"
						+ "				  \"municipalityId\" integer, \n"
						+ "				  city character varying, \n"
						+ "				  \"provinceId\" integer, \n"
						+ "				  latitude double precision, \n"
						+ "				  longitude double precision,\n"
						+ "				  \"authorityId\" integer,\n"
						+ "				  \"authorityName\" character varying,\n"
						+ "				  \"responsibilityId\" integer,\n"
						+ "				  \"responsibilityName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"WorkerHasWorkerId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										workeruser.\"This_has_LoginName\",\n"
						+ "										\"This_has_FirstName\",\n"
						+ "										\"This_has_LastName\",\n"
						+ "										CAST('' AS character varying),\n"
						+ "										\"This_includes_PhoneNumber\",\n"
						+ "										\"This_belongs_to_Country_with_CountryHasCountryCode\",\n"
						+ "										\"This_includes_AddressString\",\n"
						+ "										\"This_includes_PostalCode\",\n"
						+ "										\"This_includes_Town\",\n"
						+ "										\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\",\n"
						+ "										\"This_includes_City\",\n"
						+ "										\"This_belongs_to_Province_with_ProvinceHasProvinceId\",\n"
						+ "										\"This_includes_Latitute\",\n"
						+ "										\"This_includes_Longitude\",\n"
						+ "									 	1,\n"
						+ "										CAST('soberano.authority.top' AS character varying),\n"
						+ "										responsibility.\"ResponsibilityHasResponsibilityId\",\n"
						+ "										responsibility.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Worker\" worker\n"
						+ "									INNER JOIN soberano.\"ContactData\" contact\n"
						+ "										ON worker.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contact.\"ContactDataHasContactDataId\"\n"
						+ "									INNER JOIN soberano.\"PostalAddress\" address\n"
						+ "										ON contact.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = address.\"PostalAddressHasPostalAddressId\"\n"
						+ "									INNER JOIN soberano.\"Municipality\" municipality\n"
						+ "										ON address.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipality.\"MunicipalityHasMunicipalityId\"\n"
						+ "									INNER JOIN soberano.\"Province\" province\n"
						+ "										ON municipality.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = province.\"ProvinceHasProvinceId\"\n"
						+ "									INNER JOIN metamodel.\"User\" workeruser\n"
						+ "										ON worker.\"This_has_LoginName\" = workeruser.\"This_has_LoginName\"\n"
						+ "									INNER JOIN metamodel.\"UserIsAssignedToResponsibilityForAuthority\" userassignment\n"
						+ "										ON userassignment.\"UserHasUserId\" = workeruser.\"UserHasUserId\"\n"
						+ "									INNER JOIN metamodel.\"Responsibility\" responsibility\n"
						+ "										ON userassignment.\"ResponsibilityHasResponsibilityId\" = responsibility.\"ResponsibilityHasResponsibilityId\" \n"
						+ "								WHERE \"WorkerHasWorkerId\" = workerid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_create\"(\n"
						+ "	counterCode character varying,\n"
						+ "	numberOfReceivers integer,\n"
						+ "	isSurcharged boolean,\n"
						+ "	isEnabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		counterId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		counterId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Counter', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Counter\"(\"This_has_Counter_code\", \n"
						+ "										   \"This_has_space_for_NumberOfReceivers\", \n"
						+ "										   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										   \"Counter_is_surcharged\", \n"
						+ "										   \"Counter_is_enabled\")\n"
						+ "				VALUES (counterCode,\n"
						+ "					   numberOfReceivers,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   isSurcharged,\n"
						+ "					   isEnabled)\n"
						+ "				RETURNING \"CounterHasCounterId\" INTO counterId;\n"
						+ "		END IF;\n"
						+ "		RETURN counterId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_disable\"(\n"
						+ "	counterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				\"This_has_Counter_code\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Counter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CounterHasCounterId\" = counterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(COUNTER)# ' || CAST(counterid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_get\"(\n"
						+ "	counterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"counterId\" integer, \n"
						+ "				  \"entityTypeInstanceId\" integer, \n"
						+ "				  \"counterCode\" character varying, \n"
						+ "				  \"numberOfReceivers\" integer,\n"
						+ "				  \"isSurcharged\" boolean,\n"
						+ "				  \"isEnabled\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CounterHasCounterId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Counter_code\",\n"
						+ "										\"This_has_space_for_NumberOfReceivers\",\n"
						+ "										\"Counter_is_surcharged\",\n"
						+ "										\"Counter_is_enabled\"\n"
						+ "								FROM soberano.\"Counter\" counter\n"
						+ "								WHERE \"CounterHasCounterId\" = counterid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CounterHasCounterId\", \"This_has_Counter_code\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(2, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Counter\" counter\n"
						+ "								ON instance.\"InstanceId\" = counter.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Counter_code\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_modify\"(\n"
						+ "	counterid integer,\n"
						+ "	countercode character varying,\n"
						+ "	numberofreceivers integer,\n"
						+ "	issurcharged boolean,\n"
						+ "	isenabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				\"This_has_Counter_code\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Counter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CounterHasCounterId\" = counterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the counter\n"
						+ "			UPDATE soberano.\"Counter\"\n"
						+ "				SET \"This_has_space_for_NumberOfReceivers\" = numberofreceivers, \n"
						+ "					\"This_has_Counter_code\" = countercode,\n"
						+ "					\"Counter_is_surcharged\" = issurcharged, \n"
						+ "					\"Counter_is_enabled\" = isenabled\n"
						+ "				WHERE \"CounterHasCounterId\"= counterid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(COUNTER)# ' || CAST(counterid AS text) || ' : ' || countercode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_create\"(\n"
						+ "	categoryname character varying,\n"
						+ "	categoryposition integer,\n"
						+ "	isenabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		categoryId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		categoryId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('ProductCategory', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"ProductCategory\"(\"This_has_Name\",\n"
						+ "												   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "												   \"This_is_shown_in_Position\", \n"
						+ "												   \"ProductCategory_is_enabled\")\n"
						+ "				VALUES (categoryname,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   categoryposition,\n"
						+ "					   isenabled)\n"
						+ "				RETURNING \"ProductCategoryHasProductCategoryId\" INTO categoryId;\n"
						+ "		END IF;\n"
						+ "		RETURN categoryId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_disable\"(\n"
						+ "	categoryid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProductCategory\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(PRODUCT_CATEGORY)# ' || CAST(categoryid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_get\"(\n"
						+ "	categoryid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"categoryId\" integer, \"entityTypeInstanceId\" integer, \"categoryName\" character varying, \"categoryPosition\" integer, \"isEnabled\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProductCategoryHasProductCategoryId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_is_shown_in_Position\",\n"
						+ "										\"ProductCategory_is_enabled\"\n"
						+ "								FROM soberano.\"ProductCategory\"\n"
						+ "								WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProductCategoryHasProductCategoryId\", \"This_has_Name\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(14, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"ProductCategory\" category\n"
						+ "								ON instance.\"InstanceId\" = category.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_modify\"(\n"
						+ "	categoryid integer,\n"
						+ "	categoryname character varying,\n"
						+ "	categoryposition integer,\n"
						+ "	isenabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProductCategory\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"ProductCategory\"\n"
						+ "				SET \"This_has_Name\" = categoryname, \n"
						+ "				\"This_is_shown_in_Position\" = categoryposition,\n"
						+ "				\"ProductCategory_is_enabled\" = isenabled\n"
						+ "				WHERE \"ProductCategoryHasProductCategoryId\" = categoryid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(PRODUCT_CATEGORY)# ' || CAST(categoryid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_modify\"(\n"
						+ "	providerid integer,\n"
						+ "	providername character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Provider\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Provider\"\n"
						+ "				SET \"This_has_Name\" = providername\n"
						+ "				WHERE \"ProviderHasProviderId\" = providerid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(PROVIDER)# ' || CAST(providerid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 300\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProviderHasProviderId\", \"This_has_Name\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(15, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Provider\" provider\n"
						+ "								ON instance.\"InstanceId\" = provider.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_get\"(\n"
						+ "	providerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"providerId\" integer, \"entityTypeInstanceId\" integer, \"providerName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProviderHasProviderId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\"\n"
						+ "								FROM soberano.\"Provider\"\n"
						+ "								WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_disable\"(\n"
						+ "	providerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Provider\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(PROVIDER)# ' || CAST(providerid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_create\"(\n"
						+ "	providername character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		providerId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		providerId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Provider', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Provider\"(\"This_has_Name\",\n"
						+ "												   \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				VALUES (providername,\n"
						+ "					   entityTypeInstanceId)\n"
						+ "				RETURNING \"ProviderHasProviderId\" INTO providerId;\n"
						+ "		END IF;\n"
						+ "		RETURN providerId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Unit_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(acronym.\"Language\" || ' : ' || \"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "						ORDER BY acronym.\"UnitHasUnitId\", qn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Unit_getAll\"(\n"
						+ "	materialid integer,\n"
						+ "	lang character(2),\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(\"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"InventoryItem\" invitem\n"
						+ "							INNER JOIN soberano.\"Unit\" unit1\n"
						+ "								ON invitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\" = unit1.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"Unit\" unit2\n"
						+ "								ON unit1.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\" = unit2.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "								ON unit2.\"UnitHasUnitId\" = acronym.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "									AND acronym.\"Language\" = lang\n"
						+ "							INNER JOIN soberano.\"AcquirableMaterial\" acqmat\n"
						+ "								ON acqmat.\"InventoryItemHasInventoryItemCode\" = invitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND acqmat.\"AcquirableMaterialHasAcquirableMaterialId\" = materialid\n"
						+ "						ORDER BY qn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_create\"(\n"
						+ "	warehousename character varying,\n"
						+ "	warehousecode character varying,\n"
						+ "	isprocurementwarehouse boolean,\n"
						+ "	issaleswarehouse boolean,\n"
						+ "	entryprocesses integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		warehouseId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		warehouseId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Warehouse', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isprocurementwarehouse, issaleswarehouse);\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Warehouse\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_is_identified_by_Code\", \n"
						+ "											 \"Warehouse_is_procurement_warehouse\", \n"
						+ "											 \"Warehouse_is_sales_warehouse\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   warehousename,\n"
						+ "					   warehousecode,\n"
						+ "					   isprocurementwarehouse,\n"
						+ "					   issaleswarehouse)\n"
						+ "				RETURNING \"WarehouseHasWarehouseId\" INTO warehouseId;\n"
						+ "				\n"
						+ "			--update warehouse's entry processes\n"
						+ "			IF array_lower(entryprocesses, 1) IS NOT NULL AND array_upper(entryprocesses, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(entryprocesses, 1) .. array_upper(entryprocesses, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProcessIsAnEntryProcessOfWarehouse\"(\"ProcessHasProcessId\",\n"
						+ "																			  \"WarehouseHasWarehouseId\")\n"
						+ "						VALUES (entryprocesses[i], \n"
						+ "								warehouseId);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--at least one warehouse must be sales warehouse\n"
						+ "			--at least one warehouse must be procurement warehouse\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(warehouseId);\n"
						+ "		END IF;\n"
						+ "		RETURN warehouseId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"WarehouseHasWarehouseId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_is_identified_by_Code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(17, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Warehouse\" warehouse\n"
						+ "											ON instance.\"InstanceId\" = warehouse.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_disable\"(\n"
						+ "	warehouseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Warehouse\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(WAREHOUSE)# ' || CAST(warehouseid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_get\"(\n"
						+ "	warehouseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"warehouseId\" integer, \"entityTypeInstanceId\" integer, \"warehouseName\" character varying, \"warehouseCode\" character varying, \"isProcurementWarehouse\" boolean, \"isSalesWarehouse\" boolean, \"processId\" integer, \"processName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT warehouse.\"WarehouseHasWarehouseId\",\n"
						+ "										warehouse.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										warehouse.\"This_has_Name\",\n"
						+ "										\"This_is_identified_by_Code\",\n"
						+ "										\"Warehouse_is_procurement_warehouse\",\n"
						+ "										\"Warehouse_is_sales_warehouse\",\n"
						+ "										entryprocess.\"ProcessHasProcessId\",\n"
						+ "										entryprocess.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Warehouse\" warehouse\n"
						+ "									LEFT JOIN soberano.\"ProcessIsAnEntryProcessOfWarehouse\" epw\n"
						+ "										ON epw.\"WarehouseHasWarehouseId\" = warehouse.\"WarehouseHasWarehouseId\"\n"
						+ "									LEFT JOIN soberano.\"Process\" entryprocess\n"
						+ "										ON entryprocess.\"ProcessHasProcessId\" = epw.\"ProcessHasProcessId\"\n"
						+ "								WHERE warehouse.\"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(warehouse.\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_modify\"(\n"
						+ "	warehouseid integer,\n"
						+ "	warehousename character varying,\n"
						+ "	warehousecode character varying,\n"
						+ "	isprocurementwarehouse boolean,\n"
						+ "	issaleswarehouse boolean,\n"
						+ "	entryprocesses integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Warehouse\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isprocurementwarehouse, issaleswarehouse);\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Warehouse\"\n"
						+ "				SET \"This_has_Name\" = warehousename, \n"
						+ "				\"This_is_identified_by_Code\" = warehousecode,\n"
						+ "				\"Warehouse_is_procurement_warehouse\" = isprocurementwarehouse,\n"
						+ "				\"Warehouse_is_sales_warehouse\" = issaleswarehouse\n"
						+ "				WHERE \"WarehouseHasWarehouseId\" = warehouseid;\n"
						+ "				\n"
						+ "			--delete current warehouse's entry processes\n"
						+ "			DELETE FROM \"soberano\".\"ProcessIsAnEntryProcessOfWarehouse\" \n"
						+ "				WHERE \"WarehouseHasWarehouseId\" = warehouseid;\n"
						+ "	\n"
						+ "			--update warehouse's entry processes\n"
						+ "			IF array_lower(entryprocesses, 1) IS NOT NULL AND array_upper(entryprocesses, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(entryprocesses, 1) .. array_upper(entryprocesses, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProcessIsAnEntryProcessOfWarehouse\"(\"ProcessHasProcessId\",\n"
						+ "																			  \"WarehouseHasWarehouseId\")\n"
						+ "						VALUES (entryprocesses[i], \n"
						+ "								warehouseId);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;	\n"
						+ "			\n"
						+ "			--at least one warehouse must be sales warehouse\n"
						+ "			--at least one warehouse must be procurement warehouse\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(warehouseId);\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(WAREHOUSE)# ' || CAST(warehouseid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_create\"(\n"
						+ "	costcentername character varying,\n"
						+ "	inputwarehouse integer,\n"
						+ "	outputwarehouse integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		costcenterId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		costcenterId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('CostCenter', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"CostCenter\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\", \n"
						+ "											 \"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   costcentername,\n"
						+ "					   inputwarehouse,\n"
						+ "					   outputwarehouse)\n"
						+ "				RETURNING \"CostCenterHasCostCenterId\" INTO costcenterId;\n"
						+ "		END IF;\n"
						+ "		RETURN costcenterId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_disable\"(\n"
						+ "	costcenterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"CostCenter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CostCenterHasCostCenterId\" = costcenterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(CostCenter)# ' || CAST(costcenterid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_get\"(\n"
						+ "	costcenterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"costCenterId\" integer, \"entityTypeInstanceId\" integer, \"costCenterName\" character varying, \"inputWarehouse\" integer, \"outputWarehouse\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CostCenterHasCostCenterId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\",\n"
						+ "										\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\"\n"
						+ "								FROM soberano.\"CostCenter\"\n"
						+ "								WHERE \"CostCenterHasCostCenterId\" = costcenterid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"CostCenterHasCostCenterId\", \n"
						+ "									\"This_has_Name\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(8, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"CostCenter\" CostCenter\n"
						+ "											ON instance.\"InstanceId\" = CostCenter.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_modify\"(\n"
						+ "	costCenterid integer,\n"
						+ "	costCentername character varying,\n"
						+ "	inputWarehouse integer,\n"
						+ "	outputWarehouse integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"CostCenter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CostCenterHasCostCenterId\" = costCenterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"CostCenter\"\n"
						+ "				SET \"This_has_Name\" = costCentername, \n"
						+ "					\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\" = inputWarehouse,\n"
						+ "					\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" = outputWarehouse\n"
						+ "				WHERE \"CostCenterHasCostCenterId\" = costCenterid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(CostCenter)# ' || CAST(costcenterid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_create\"(\n"
						+ "	processname character varying,\n"
						+ "	fixedcost numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		processId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		processId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Process', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Process\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_has_FixedCost\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   processname,\n"
						+ "					   fixedcost)\n"
						+ "				RETURNING \"ProcessHasProcessId\" INTO processId;\n"
						+ "		END IF;\n"
						+ "		RETURN processId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_disable\"(\n"
						+ "	processid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Process\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProcessHasProcessId\" = processid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--RULE: A process with an enabled product as one of its outputs cannot be\n"
						+ "			--disabled.\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ProcessOutput\" poutput\n"
						+ "						  			INNER JOIN soberano.\"Product\" product\n"
						+ "						 				ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						 				ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						 		WHERE poutput.\"ProcessHasProcessId\" = processid\n"
						+ "						  			--8 is the id of disabled stage\n"
						+ "						 			AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) \n"
						+ "				\n"
						+ "				--RULE: A process with an enabled product as one of its inputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessInput\" pinput\n"
						+ "						  			INNER JOIN soberano.\"Product\" product\n"
						+ "						 				ON pinput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						 				ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						 		WHERE pinput.\"ProcessHasProcessId\" = processid\n"
						+ "						  			--8 is the id of disabled stage\n"
						+ "						 			AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8)\n"
						+ "									\n"
						+ "				--RULE: A process with an enabled acquirable material as one of its outputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessOutput\" poutput\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" product\n"
						+ "											ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "									WHERE poutput.\"ProcessHasProcessId\" = processid\n"
						+ "										--8 is the id of disabled stage\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) \n"
						+ "\n"
						+ "				--RULE: A process with an enabled acquirable material as one of its inputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessInput\" pinput\n"
						+ "									INNER JOIN soberano.\"AcquirableMaterial\" product\n"
						+ "										ON pinput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "										ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "								WHERE pinput.\"ProcessHasProcessId\" = processid\n"
						+ "									--8 is the id of disabled stage\n"
						+ "									AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) THEN\n"
						+ "									\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'#TO_TRANSLATE(Process)# ' || CAST(processid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "									\n"
						+ "			END IF;\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_get\"(\n"
						+ "	processid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"processId\" integer, \"entityTypeInstanceId\" integer, \"processName\" character varying, \"fixedCost\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProcessHasProcessId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_FixedCost\"\n"
						+ "								FROM soberano.\"Process\"\n"
						+ "								WHERE \"ProcessHasProcessId\" = processid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ProcessHasProcessId\", \n"
						+ "									\"This_has_Name\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(12, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Process\" process\n"
						+ "											ON instance.\"InstanceId\" = process.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_modify\"(\n"
						+ "	processid integer,\n"
						+ "	processname character varying,\n"
						+ "	fixedcost numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Process\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProcessHasProcessId\" = processid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Process\"\n"
						+ "				SET \"This_has_Name\" = processname, \n"
						+ "					\"This_has_FixedCost\" = fixedcost\n"
						+ "				WHERE \"ProcessHasProcessId\" = processid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(Process)# ' || CAST(processid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('AcquirableMaterial', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"InventoryItem\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "												 \"This_has_Name\", \n"
						+ "												 \"This_has_MinimumInventoryLevel\", \n"
						+ "												 \"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "				VALUES (itemCode,\n"
						+ "					   itemName,\n"
						+ "					   inventoryLevel,\n"
						+ "					   itemUnit);\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"AcquirableMaterial\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"InventoryItemHasInventoryItemCode\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   itemCode)\n"
						+ "				RETURNING \"AcquirableMaterialHasAcquirableMaterialId\" INTO itemId;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				ii.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"AcquirableMaterial\" objectdata\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "					ON ii.\"InventoryItemHasInventoryItemCode\" = objectdata.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(AcquirableMaterial)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_get\"(\n"
						+ "	acquirablematerialid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \"itemName\" character varying, \"inventoryLevel\" numeric, \"itemUnit\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"AcquirableMaterialHasAcquirableMaterialId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										ii.\"InventoryItemHasInventoryItemCode\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_MinimumInventoryLevel\",\n"
						+ "										\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "								FROM soberano.\"AcquirableMaterial\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"AcquirableMaterialHasAcquirableMaterialId\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(7, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryItem_updateStockQuantities\"(\n"
						+ "	item character varying,\n"
						+ "	oldunit integer,\n"
						+ "	newunit integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		conversionFactor numeric;\n"
						+ "	BEGIN\n"
						+ "			\n"
						+ "		SELECT \"Factor\" \n"
						+ "			FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "			WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "				AND uconversion.\"Unit2_UnitHasUnitId\" = newunit\n"
						+ "			INTO conversionFactor;\n"
						+ "			\n"
						+ "		--the update is applied only if oldunit and newunit measure the same magnitude\n"
						+ "		IF conversionFactor IS NOT NULL THEN\n"
						+ "			UPDATE soberano.\"Stock\" \n"
						+ "				SET \"Quantity\" = \"Quantity\" * conversionFactor\n"
						+ "				WHERE \"InventoryItemHasInventoryItemCode\" = item;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_modify\"(\n"
						+ "	acquirablematerialid integer,\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "		oldItemCode character varying;\n"
						+ "		oldUnit integer;\n"
						+ "		newUnit integer;\n"
						+ "		conversionFactor numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\",\n"
						+ "								\n"
						+ "				objectdata.iiCode,\n"
						+ "				objectData.iiUnit\n"
						+ "			FROM (SELECT \"AcquirableMaterialHasAcquirableMaterialId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\",\n"
						+ "				  		ii.\"InventoryItemHasInventoryItemCode\" iiCode,\n"
						+ "				  		ii.\"This_is_measured_in_Unit_with_UnitHasUnitId\" iiUnit FROM soberano.\"AcquirableMaterial\" am\n"
						+ "					INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "						ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId,\n"
						+ "				\n"
						+ "				oldItemCode,\n"
						+ "				oldUnit;\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT \"Factor\" \n"
						+ "				FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "				WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "					AND uconversion.\"Unit2_UnitHasUnitId\" = itemUnit\n"
						+ "				INTO conversionFactor;\n"
						+ "			\n"
						+ "			--if new unit does not measure the same magnitude as current unit, do not apply unit change\n"
						+ "			IF conversionFactor IS NULL THEN\n"
						+ "				newUnit := oldunit;\n"
						+ "			ELSE\n"
						+ "				newUnit := itemUnit;\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"InventoryItem\"\n"
						+ "				SET \"InventoryItemHasInventoryItemCode\" = itemCode,\n"
						+ "					\"This_has_Name\" = itemName,\n"
						+ "					\"This_has_MinimumInventoryLevel\" = inventoryLevel,\n"
						+ "					\"This_is_measured_in_Unit_with_UnitHasUnitId\" = newUnit\n"
						+ "				WHERE \"InventoryItemHasInventoryItemCode\" = oldItemCode;			\n"
						+ "			UPDATE soberano.\"AcquirableMaterial\"\n"
						+ "				SET \"InventoryItemHasInventoryItemCode\" = itemCode\n"
						+ "				WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid;\n"
						+ "				\n"
						+ "			--RULE_CONSTRAINT_10: Quantity is expressed in the unit the corresponding inventory item is measured.\n"
						+ "			PERFORM soberano.\"fn_InventoryItem_updateStockQuantities\"(itemCode, oldUnit, newUnit);\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(AcquirableMaterial)# ' || CAST(acquirablematerialid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_updatePrices\"()\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		systemCurrencyIsReferenceCurrency boolean;\n"
						+ "	BEGIN\n"
						+ "		SELECT COUNT(*) = 1 FROM soberano.\"Currency\"\n"
						+ "			WHERE \"Currency_is_system_currency\" OR \"Currency_is_price_reference_currency\"\n"
						+ "			INTO systemCurrencyIsReferenceCurrency;\n"
						+ "		\n"
						+ "		IF systemCurrencyIsReferenceCurrency THEN\n"
						+ "			UPDATE soberano.\"Product\" \n"
						+ "				SET \"This_has_Price_in_reference_currency\" = \"This_has_Price\";\n"
						+ "		ELSE\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"This_has_Price\" = \"This_has_Price_in_reference_currency\" * rc.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "				FROM (SELECT \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \n"
						+ "					  	FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\") rc;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_updateStockValues\"(oldSystemCurrency integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		UPDATE soberano.\"Stock\" SET \"This_has_Value\" = \"This_has_Value\" * osc.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "			FROM (SELECT \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \n"
						+ "				  	FROM soberano.\"Currency\" WHERE \"CurrencyHasCurrencyId\" = oldSystemCurrency) osc;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean,\n"
						+ "	iscash boolean,\n"
						+ "	exchangerate numeric,\n"
						+ "	currencyposition integer,\n"
						+ "	paymentprocessor integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		finalExchangeRate numeric;\n"
						+ "		oldSystemCurrency integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Currency', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			IF isSystemCurrency THEN finalExchangeRate = 1; ELSE finalExchangeRate = exchangeRate; END IF;\n"
						+ "			IF finalExchangeRate < 0 THEN finalExchangeRate = 0; END IF;\n"
						+ "			\n"
						+ "			SELECT \"CurrencyHasCurrencyId\" FROM soberano.\"Currency\" \n"
						+ "				WHERE \"Currency_is_system_currency\" INTO oldSystemCurrency;\n"
						+ "			\n"
						+ "			--at most one currency is system currency\n"
						+ "			--at most one currency is reference price currency\n"
						+ "			PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(isSystemCurrency, isPriceReferenceCurrency);\n"
						+ "			\n"
						+ "			INSERT INTO soberano.\"Currency\"(\"This_has_Currency_code\", \n"
						+ "											\"This_has_Name\",\n"
						+ "											\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\", \n"
						+ "											\"This_is_shown_in_Position\", \n"
						+ "											\"Currency_is_system_currency\", \n"
						+ "											\"Currency_is_price_reference_currency\", \n"
						+ "											\"Currency_is_cash\",\n"
						+ "										    \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				VALUES (itemcode,\n"
						+ "						itemname,\n"
						+ "						finalExchangeRate,\n"
						+ "						currencyPosition,\n"
						+ "						issystemcurrency,\n"
						+ "						ispricereferencecurrency,\n"
						+ "						isCash,\n"
						+ "					   	entityTypeInstanceId) RETURNING \"CurrencyHasCurrencyId\" INTO itemId;\n"
						+ "					   \n"
						+ "			INSERT INTO soberano.\"PaymentProcessorIsUsedForCurrency\"(\"CurrencyHasCurrencyId\",\n"
						+ "																	\"PaymentProcessorHasPaymentProcessorId\")\n"
						+ "				VALUES(itemId, paymentProcessor);\n"
						+ "					   \n"
						+ "			--at least one currency must be system currency\n"
						+ "			--at least one currency must be reference price currency\n"
						+ "			PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(itemId);\n"
						+ "			\n"
						+ "			PERFORM soberano.\"fn_Currency_updatePrices\"();\n"
						+ "			\n"
						+ "			PERFORM soberano.\"fn_Currency_updateStockValues\"(oldSystemCurrency);\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Currency\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CurrencyHasCurrencyId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(CURRENCY)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"CurrencyHasCurrencyId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_has_Currency_code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(9, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "								ON instance.\"InstanceId\" = currency.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean,\n"
						+ "	iscash boolean,\n"
						+ "	exchangerate numeric,\n"
						+ "	currencyposition integer,\n"
						+ "	paymentprocessor integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		finalExchangeRate numeric;\n"
						+ "		oldSystemCurrency integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Currency\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CurrencyHasCurrencyId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			IF isSystemCurrency THEN finalExchangeRate = 1; ELSE finalExchangeRate = exchangeRate; END IF;\n"
						+ "			IF finalExchangeRate < 0 THEN finalExchangeRate = 0; END IF;\n"
						+ "			\n"
						+ "			SELECT \"CurrencyHasCurrencyId\" FROM soberano.\"Currency\" \n"
						+ "				WHERE \"Currency_is_system_currency\" INTO oldSystemCurrency;\n"
						+ "			\n"
						+ "			--at most one currency is system currency\n"
						+ "			--at most one currency is reference price currency\n"
						+ "			PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(isSystemCurrency, isPriceReferenceCurrency);\n"
						+ "			\n"
						+ "			UPDATE soberano.\"Currency\"\n"
						+ "				SET  \"This_has_Currency_code\" = itemcode, \n"
						+ "					\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" = finalExchangeRate, \n"
						+ "					\"This_is_shown_in_Position\" = currencyposition, \n"
						+ "					\"This_has_Name\" = itemname, \n"
						+ "					\"Currency_is_system_currency\" = issystemcurrency, \n"
						+ "					\"Currency_is_price_reference_currency\" = ispricereferencecurrency, \n"
						+ "					\"Currency_is_cash\" = iscash\n"
						+ "				WHERE \"CurrencyHasCurrencyId\" = itemid;\n"
						+ "				\n"
						+ "			DELETE FROM soberano.\"PaymentProcessorIsUsedForCurrency\"\n"
						+ "				WHERE \"CurrencyHasCurrencyId\" = itemId;\n"
						+ "			\n"
						+ "			INSERT INTO soberano.\"PaymentProcessorIsUsedForCurrency\"(\"CurrencyHasCurrencyId\",\n"
						+ "																	\"PaymentProcessorHasPaymentProcessorId\")\n"
						+ "				VALUES(itemId, paymentprocessor);\n"
						+ "			\n"
						+ "			--at least one currency must be system currency\n"
						+ "			--at least one currency must be reference price currency\n"
						+ "			PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(itemId);\n"
						+ "			\n"
						+ "			PERFORM soberano.\"fn_Currency_updatePrices\"();\n"
						+ "			\n"
						+ "			PERFORM soberano.\"fn_Currency_updateStockValues\"(oldSystemCurrency);\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(CURRENCY)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_get\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemName\" character varying, \"itemCode\" character varying, \"isSystemCurrency\" boolean, \"isPriceReferenceCurrency\" boolean, \"isCash\" boolean, \"exchangeRate\" numeric, \"itemPosition\" integer, \"paymentProcessor\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT curr.\"CurrencyHasCurrencyId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_Currency_code\",\n"
						+ "										\"Currency_is_system_currency\",\n"
						+ "										\"Currency_is_price_reference_currency\",\n"
						+ "										\"Currency_is_cash\",\n"
						+ "										\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "										\"This_is_shown_in_Position\",\n"
						+ "										\"PaymentProcessorHasPaymentProcessorId\"\n"
						+ "								FROM soberano.\"Currency\" curr\n"
						+ "									INNER JOIN\n"
						+ "										soberano.\"PaymentProcessorIsUsedForCurrency\" pp\n"
						+ "											ON curr.\"CurrencyHasCurrencyId\" = pp.\"CurrencyHasCurrencyId\"\n"
						+ "								WHERE curr.\"CurrencyHasCurrencyId\" = itemid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_getSystemCurrencies\"()\n"
						+ "    RETURNS TABLE(\"systemCurrencyCode\" character varying, \n"
						+ "				  \"referenceCurrencyCode\" character varying, \n"
						+ "				  \"referenceCurrencyExchangeRate\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT sct.\"This_has_Currency_code\",\n"
						+ "							rct.\"This_has_Currency_code\",\n"
						+ "							rct.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "							FROM (SELECT \"This_has_Currency_code\", \n"
						+ "										\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "										1 stickcolumn\n"
						+ "									FROM soberano.\"Currency\" curr\n"
						+ "									WHERE \"Currency_is_price_reference_currency\") rct\n"
						+ "								INNER JOIN (SELECT \"This_has_Currency_code\",\n"
						+ "													1 stickcolumn\n"
						+ "												FROM soberano.\"Currency\" curr\n"
						+ "												WHERE \"Currency_is_system_currency\") sct\n"
						+ "									ON rct.stickcolumn = sct.stickcolumn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Service', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Service\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Code\",\n"
						+ "										  	 \"This_has_Name\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   itemCode,\n"
						+ "					   itemName)\n"
						+ "				RETURNING \"ServiceHasServiceId\" INTO itemId;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ServiceHasServiceId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_has_Code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(19, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Service\" serv\n"
						+ "											ON instance.\"InstanceId\" = serv.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Service\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ServiceHasServiceId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(Service)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_get\"(\n"
						+ "	serviceid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \"itemName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ServiceHasServiceId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										serv.\"This_has_Code\",\n"
						+ "										\"This_has_Name\"\n"
						+ "								FROM soberano.\"Service\" serv\n"
						+ "								WHERE \"ServiceHasServiceId\" = serviceid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_modify\"(\n"
						+ "	serviceid integer,\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ServiceHasServiceId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Service\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ServiceHasServiceId\" = serviceid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Service\"\n"
						+ "				SET \"This_has_Code\" = itemCode,\n"
						+ "					\"This_has_Name\" = itemName\n"
						+ "				WHERE \"ServiceHasServiceId\" = serviceid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(Service)# ' || CAST(serviceid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_create\"(\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	costcenter integer,\n"
						+ "	itemprice numeric,\n"
						+ "	referenceprice numeric,\n"
						+ "	isenabled boolean,\n"
						+ "	itemcategories integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		finalreferenceprice numeric;\n"
						+ "		processid integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Product', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"InventoryItem\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "												 \"This_has_Name\", \n"
						+ "												 \"This_has_MinimumInventoryLevel\", \n"
						+ "												 \"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "				VALUES (itemCode,\n"
						+ "					   itemName,\n"
						+ "					   inventoryLevel,\n"
						+ "					   itemUnit);\n"
						+ "					   \n"
						+ "			IF abs(itemprice - referenceprice) > 0.00000001 THEN\n"
						+ "				\n"
						+ "				SELECT itemprice / \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "					FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "					INTO finalreferenceprice;\n"
						+ "				\n"
						+ "			ELSE finalreferenceprice = referenceprice;\n"
						+ "				\n"
						+ "			END IF;\n"
						+ "					   \n"
						+ "			INSERT INTO soberano.\"Product\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "										   \"This_has_Price\", \n"
						+ "										   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										   \"This_has_Price_in_reference_currency\", \n"
						+ "										   \"Product_is_enabled\", \n"
						+ "										   \"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\")\n"
						+ "						VALUES (itemCode,\n"
						+ "							   itemprice,\n"
						+ "							   entityTypeInstanceId,\n"
						+ "							   finalreferenceprice,\n"
						+ "							   isenabled,\n"
						+ "							   costcenter)\n"
						+ "						RETURNING \"ProductHasProductId\" INTO itemId;\n"
						+ "				\n"
						+ "			--update product's categories\n"
						+ "			IF array_lower(itemcategories, 1) IS NOT NULL AND array_upper(itemcategories, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(itemcategories, 1) .. array_upper(itemcategories, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProductIsOfProductCategory\"(\n"
						+ "						\"ProductHasProductId\", \"ProductCategoryHasProductCategoryId\")\n"
						+ "						VALUES (itemId, itemcategories[i]);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--create the product process\n"
						+ "			SELECT * FROM soberano.\"fn_Process_create\"(itemname,\n"
						+ "														0, \n"
						+ "														'soberano.user.top') INTO processid;\n"
						+ "			INSERT INTO soberano.\"ProcessOutput\"(\"Quantity\",\n"
						+ "												 \"This_value_is_weighted_by_WeightCoefficient\", \n"
						+ "												 \"ProcessHasProcessId\", \n"
						+ "												 \"InventoryItemHasInventoryItemCode\")\n"
						+ "				VALUES (1,\n"
						+ "						100, \n"
						+ "						processid, \n"
						+ "						itemCode);			\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				ii.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Product\" objectdata\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "					ON ii.\"InventoryItemHasInventoryItemCode\" = objectdata.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(Product)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ProductHasProductId\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(13, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Product\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_get\"(\n"
						+ "	productid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \n"
						+ "				  \"itemName\" character varying, \"inventoryLevel\" numeric, \"itemUnit\" integer, \n"
						+ "				  \"itemPrice\" numeric, \"itemReferencePrice\" numeric, \"costCenter\" integer, \n"
						+ "				  \"isEnabled\" boolean, \"itemProcess\" integer, \"categoryId\" integer, \"categoryName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT am.\"ProductHasProductId\",\n"
						+ "										am.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										ii.\"InventoryItemHasInventoryItemCode\",\n"
						+ "										ii.\"This_has_Name\",\n"
						+ "										\"This_has_MinimumInventoryLevel\",\n"
						+ "										\"This_is_measured_in_Unit_with_UnitHasUnitId\",\n"
						+ "										\"This_has_Price\",\n"
						+ "										\"This_has_Price_in_reference_currency\",\n"
						+ "										\"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\",\n"
						+ "										\"Product_is_enabled\",\n"
						+ "										\"ProcessHasProcessId\",\n"
						+ "										cat.\"ProductCategoryHasProductCategoryId\",\n"
						+ "										cat.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Product\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									LEFT JOIN soberano.\"ProductIsOfProductCategory\" piocat\n"
						+ "										ON am.\"ProductHasProductId\" = piocat.\"ProductHasProductId\"\n"
						+ "									LEFT JOIN soberano.\"ProductCategory\" cat\n"
						+ "										ON piocat.\"ProductCategoryHasProductCategoryId\" = cat.\"ProductCategoryHasProductCategoryId\"\n"
						+ "									LEFT JOIN (SELECT product.\"InventoryItemHasInventoryItemCode\", \n"
						+ "											   		\"ProcessHasProcessId\"\n"
						+ "													FROM soberano.\"ProcessOutput\" poutput\n"
						+ "														INNER JOIN soberano.\"Product\" product\n"
						+ "															ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE \"ProductHasProductId\" = productid\n"
						+ "											   ORDER BY \"ProcessHasProcessId\") process\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = process.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											AND process.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE am.\"ProductHasProductId\" = productid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(am.\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
												
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	costcenter integer,\n"
						+ "	itemprice numeric,\n"
						+ "	referenceprice numeric,\n"
						+ "	isenabled boolean,\n"
						+ "	itemcategories integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "		oldItemCode character varying;\n"
						+ "		finalreferenceprice numeric;		\n"
						+ "		oldUnit integer;\n"
						+ "		newUnit integer;\n"
						+ "		conversionFactor numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\",\n"
						+ "				\n"
						+ "				objectdata.iiCode,\n"
						+ "				objectData.iiUnit\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\",\n"
						+ "				  		ii.\"InventoryItemHasInventoryItemCode\" iiCode,\n"
						+ "				  		ii.\"This_is_measured_in_Unit_with_UnitHasUnitId\" iiUnit FROM soberano.\"Product\" am\n"
						+ "					INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "						ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId,\n"
						+ "				\n"
						+ "				oldItemCode,\n"
						+ "				oldUnit;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			IF abs(itemprice - referenceprice) > 0.00000001 THEN\n"
						+ "				\n"
						+ "				SELECT itemprice / \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "					FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "					INTO finalreferenceprice;\n"
						+ "				\n"
						+ "			ELSE finalreferenceprice = referenceprice;\n"
						+ "				\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			SELECT \"Factor\" \n"
						+ "				FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "				WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "					AND uconversion.\"Unit2_UnitHasUnitId\" = itemUnit\n"
						+ "				INTO conversionFactor;\n"
						+ "			\n"
						+ "			--if new unit does not measure the same magnitude as current unit, do not apply unit change\n"
						+ "			IF conversionFactor IS NULL THEN\n"
						+ "				newUnit := oldunit;\n"
						+ "			ELSE\n"
						+ "				newUnit := itemUnit;\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"InventoryItem\"\n"
						+ "				SET \"InventoryItemHasInventoryItemCode\" = itemCode,\n"
						+ "					\"This_has_Name\" = itemName,\n"
						+ "					\"This_has_MinimumInventoryLevel\" = inventoryLevel,\n"
						+ "					\"This_is_measured_in_Unit_with_UnitHasUnitId\" = itemUnit\n"
						+ "				WHERE \"InventoryItemHasInventoryItemCode\" = oldItemCode;			\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"InventoryItemHasInventoryItemCode\" = itemCode, \n"
						+ "					\"This_has_Price\" = itemprice, \n"
						+ "					\"This_has_Price_in_reference_currency\" = finalreferenceprice, \n"
						+ "					\"Product_is_enabled\" = isenabled, \n"
						+ "					\"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\" = costcenter\n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "			\n"
						+ "			--delete current product's categories\n"
						+ "			DELETE FROM \"soberano\".\"ProductIsOfProductCategory\" \n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "			\n"
						+ "			--update product's categories\n"
						+ "			IF array_lower(itemcategories, 1) IS NOT NULL AND array_upper(itemcategories, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(itemcategories, 1) .. array_upper(itemcategories, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProductIsOfProductCategory\"(\n"
						+ "						\"ProductHasProductId\", \"ProductCategoryHasProductCategoryId\")\n"
						+ "						VALUES (itemId, itemcategories[i]);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--RULE_CONSTRAINT_10: Quantity is expressed in the unit the corresponding inventory item is measured.\n"
						+ "			PERFORM soberano.\"fn_InventoryItem_updateStockQuantities\"(itemCode, oldUnit, itemUnit);\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'#TO_TRANSLATE(Product)# ' || CAST(itemid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(MODIFIED_BY)# ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					invitem.\"This_has_Name\",\n"
						+ "							  					CAST(matacq.\"This_is_for_Quantity\" AS text) || ' ' || unit.\"Acronym\",\n"
						+ "							  					provider.\"This_has_Name\",\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(10, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"MaterialExpense\" matexpense\n"
						+ "											ON instance.\"InstanceId\" = matexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON matexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquisitionExpense\" acqexpense\n"
						+ "							  				ON matexpense.\"ExpenseHasExpenseId\" = acqexpense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Provider\" provider\n"
						+ "							  				ON acqexpense.\"This_pays_Provider_with_ProviderHasProviderId\" = provider.\"ProviderHasProviderId\"\n"
						+ "							 			INNER JOIN soberano.\"MaterialAcquisition\" matacq\n"
						+ "							  				ON expense.\"ExpenseHasExpenseId\" = matacq.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquirableMaterial\" acqmat\n"
						+ "							  				ON acqmat.\"AcquirableMaterialHasAcquirableMaterialId\" = matacq.\"AcquirableMaterialHasAcquirableMaterialId\"\n"
						+ "							  			INNER JOIN soberano.\"InventoryItem\" invitem\n"
						+ "							  				ON invitem.\"InventoryItemHasInventoryItemCode\" = acqmat.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							  			INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "							  				ON matacq.\"This_is_in_Unit_with_UnitHasUnitId\" = unit.\"UnitHasUnitId\"\n"
						+ "							 					AND unit.\"Language\" = lang\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_MaterialExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Stock_change\"(\n"
						+ "	inventoryItem character varying,\n"
						+ "	warehouse integer,\n"
						+ "	quantity numeric,\n"
						+ "	unitvalue numeric)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "BEGIN\n"
						+ "	--if the item doesn't exist in the warehouse,\n"
						+ "	IF NOT EXISTS(SELECT * FROM soberano.\"Stock\" \n"
						+ "			WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItem \n"
						+ "				AND \"WarehouseHasWarehouseId\" = warehouse) THEN\n"
						+ "				\n"
						+ "		--record a that item stock entry in that warehouse with quantity and value equal to 0\n"
						+ "		INSERT INTO soberano.\"Stock\"(\"Quantity\", \n"
						+ "									 \"This_has_Value\", \n"
						+ "									 \"WarehouseHasWarehouseId\", \n"
						+ "									 \"InventoryItemHasInventoryItemCode\")\n"
						+ "									VALUES (0,\n"
						+ "										   0,\n"
						+ "										   warehouse,\n"
						+ "										   inventoryItem);\n"
						+ "	END IF;\n"
						+ "\n"
						+ "	--here, the item exists in that warehouse\n"
						+ "	\n"
						
						+ "	--TODO: evaluate entry processes \n"
						
						+ "	\n"
						
						+ "	--update stock\n"
						+ "	UPDATE soberano.\"Stock\" \n"
						+ "		SET \"Quantity\" = \"Quantity\" + quantity, \n"
						+ "			\"This_has_Value\" = CASE WHEN quantity < 0 THEN \"This_has_Value\"\n"
						+ "									WHEN \"Quantity\" + quantity <= 0 THEN 0\n"
						+ "									WHEN \"Quantity\" >= 0 THEN (\"Quantity\" * \"This_has_Value\" + quantity * unitvalue) / (\"Quantity\" + quantity)\n"
						+ "									\n"
						+ "									--case quantity >= 0 AND \"Quantity\" + quantity > 0 AND \"Quantity\" < 0\n"
						+ "									ELSE unitvalue END\n"
						+ "		WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "				AND \"InventoryItemHasInventoryItemCode\" = inventoryItem;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_create\"(\n"
						+ "	material integer,\n"
						+ "	unit integer,\n"
						+ "	quantity numeric,\n"
						+ "	provider integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		normalizedQuantity numeric;\n"
						+ "		inventoryItem character varying;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('MaterialExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 AND quantity >= 0 THEN\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expensedate, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"AcquisitionExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "																  \"This_pays_Provider_with_ProviderHasProviderId\")\n"
						+ "							VALUES (itemId, provider);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"MaterialExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															   \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"MaterialAcquisition\"(\"This_is_for_Quantity\", \n"
						+ "																   \"ExpenseHasExpenseId\", \n"
						+ "																   \"AcquirableMaterialHasAcquirableMaterialId\", \n"
						+ "																   \"This_is_in_Unit_with_UnitHasUnitId\")\n"
						+ "							VALUES (ROUND(quantity, 8),\n"
						+ "								   itemId,\n"
						+ "								   material,\n"
						+ "								   unit);\n"
						+ "								   \n"
						+ "						----------------\n"
						+ "						--update stock--\n"
						+ "						----------------\n"
						+ "						\n"
						+ "						SELECT iitem.\"InventoryItemHasInventoryItemCode\",\n"
						+ "								quantity * \"Factor\"\n"
						+ "							FROM soberano.\"AcquirableMaterial\" am\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "									ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "										AND uconversion.\"Unit1_UnitHasUnitId\" = unit\n"
						+ "							WHERE am.\"AcquirableMaterialHasAcquirableMaterialId\" = material\n"
						+ "							INTO inventoryItem,\n"
						+ "								normalizedQuantity;\n"
						+ "						\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(inventoryItem, \n"
						+ "														\"WarehouseHasWarehouseId\",\n"
						+ "														normalizedQuantity,\n"
						+ "														amount / normalizedQuantity) \n"
						+ "											FROM soberano.\"Warehouse\" \n"
						+ "											WHERE \"Warehouse_is_procurement_warehouse\";\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseDate date;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT expense.\"This_is_at_DateTime\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"MaterialExpense\" materialexpense\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = materialexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										materialexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE materialexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO expenseDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= expenseDate) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'#TO_TRANSLATE(Expense)# ' || CAST(expenseid AS text) || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					CAST('' AS character varying),\n"
						+ "							  					service.\"This_has_Name\" || ' : ' || service.\"This_has_Code\",\n"
						+ "							  					provider.\"This_has_Name\",\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(18, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ServiceExpense\" servexpense\n"
						+ "											ON instance.\"InstanceId\" = servexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON servexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquisitionExpense\" acqexpense\n"
						+ "							  				ON servexpense.\"ExpenseHasExpenseId\" = acqexpense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Provider\" provider\n"
						+ "							  				ON acqexpense.\"This_pays_Provider_with_ProviderHasProviderId\" = provider.\"ProviderHasProviderId\"\n"
						+ "							 			INNER JOIN soberano.\"Service\" service\n"
						+ "							  				ON servexpense.\"This_is_on_Service_with_ServiceHasServiceId\" = service.\"ServiceHasServiceId\"\n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_ServiceExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_create\"(\n"
						+ "	service integer,\n"
						+ "	provider integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('ServiceExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 THEN\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expensedate, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"AcquisitionExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "																  \"This_pays_Provider_with_ProviderHasProviderId\")\n"
						+ "							VALUES (itemId, provider);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ServiceExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															   \"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "															 \"This_is_on_Service_with_ServiceHasServiceId\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId,\n"
						+ "								   service);\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseDate date;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT expense.\"This_is_at_DateTime\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ServiceExpense\" serviceexpense\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = serviceexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										serviceexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE serviceexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO expenseDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= expenseDate) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'#TO_TRANSLATE(Expense)# ' || CAST(expenseid AS text) || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					CAST('' AS character varying),\n"
						+ "							  					CAST('' AS text),\n"
						+ "							  					CAST(worker.\"This_has_FirstName\" || ' ' || worker.\"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\" AS character varying),\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(11, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"PayrollExpense\" payrollexpense\n"
						+ "											ON instance.\"InstanceId\" = payrollexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON payrollexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON payrollexpense.\"This_pays_Worker_with_WorkerHasWorkerId\" = worker.\"WorkerHasWorkerId\"\n"
						+ "							 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_PayrollExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_create\"(\n"
						+ "	worker integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('PayrollExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 THEN\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expensedate, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "								   \n"
						+ "						INSERT INTO soberano.\"PayrollExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "															  \"This_pays_Worker_with_WorkerHasWorkerId\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId,\n"
						+ "								   worker);\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseDate date;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult = -1;\n"
						+ "		\n"
						+ "		SELECT expense.\"This_is_at_DateTime\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"PayrollExpense\" payrollexpense\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = payrollexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										payrollexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE payrollexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO expenseDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= expenseDate) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'#TO_TRANSLATE(Expense)# ' || CAST(expenseid AS text) || ' #TO_TRANSLATE(DISABLED_BY)# ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_ShiftClosure_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"shiftClosureId\" integer, \"shift\" timestamp with time zone, \"recordingDate\" timestamp with time zone) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT shiftclosure.\"ShiftClosureHasShiftClosureId\",\n"
						+ "							  					CAST(shiftclosure.\"This_is_of_Shift\" AS timestamp with time zone),\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(20, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ShiftClosure\" shiftclosure\n"
						+ "											ON instance.\"InstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getReport\"(\n"
						+ "	lang character,\n"
						+ "	closureid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	report text;\n"
						+ "	previousClosureTime timestamp with time zone;\n"
						+ "	shift date;\n"
						+ "	closureTime timestamp with time zone;\n"
						+ "	sales numeric;\n"
						+ "	receivables numeric;\n"
						+ "	incomes numeric;\n"
						+ "	materialExpenses numeric;\n"
						+ "	serviceExpenses numeric;\n"
						+ "	payrollExpenses numeric;\n"
						+ "	expenses numeric;\n"
						+ "	profits numeric;\n"
						+ "	costToIncomeRatio numeric;\n"
						+ "	cash numeric;\n"
						+ "	lastOrderTime timestamp with time zone;\n"
						+ "	expRecord RECORD;\n"
						+ "	\n"
						+ "BEGIN\n"
						+ "	shift := now();\n"
						+ "	closureTime := now();\n"
						+ "	report := '';\n"
						+ "	sales := 0;\n"
						+ "	receivables := 0;\n"
						+ "	incomes := 0;\n"
						+ "	materialExpenses := 0;\n"
						+ "	serviceExpenses := 0;\n"
						+ "	payrollExpenses := 0;\n"
						+ "	expenses := 0;\n"
						+ "	profits := 0;\n"
						+ "	costToIncomeRatio := 0;\n"
						+ "	cash := 0;\n"
						+ "	lastOrderTime := '2023-01-01';\n"
						+ "		\n"
						+ "	--the user is requesting the report of an existing closure\n"
						+ "	IF (closureId != 0) THEN\n"
						+ "			SELECT \"This_is_of_Shift\", \n"
						+ "					\"This_is_created_at_Timestamp\" \n"
						+ "				FROM soberano.\"ShiftClosure\" shiftclosure\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "							AND shiftclosure.\"ShiftClosureHasShiftClosureId\" = closureId\n"
						+ "				INTO shift, closureTime;\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	--the user has rights to record a closure,\n"
						+ "	IF EXISTS(SELECT * FROM \"metamodel\".\"StageFilter\" destinationFilter,\n"
						+ "							\"metamodel\".\"Decision\" decision,\n"
						+ "							\"metamodel\".\"StageFilter\" originFilter,\n"
						+ "							\"metamodel\".\"LifeCycle\" lifeCycle,\n"
						+ "							\"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment,\n"
						+ "							\"metamodel\".\"ResponsibilityFilter\" responsibilityFilter,\n"
						+ "							\"metamodel\".\"User\" users\n"
						+ "						WHERE destinationFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\"\n"
						+ "							AND originFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\"\n"
						+ "							AND decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
						+ "							AND deployment.\"LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
						+ "							AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
						+ "							AND users.\"This_has_LoginName\" = loginName\n"
						+ "							AND users.\"User_is_enabled\" = true\n"
						+ "							AND deployment.\"AuthorityHasAuthorityId\" = 1\n"
						+ "							AND originFilter.\"This_filters_by_FilterExpression\" = 'soberano.stage.starting'\n"
						+ "							AND \"metamodel\".\"fn_User_matches_responsibilityFilter\"(1, loginName, responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
						+ "\n"
						+ "				  		--shif closure specifically\n"
						+ "						AND lifeCycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = '_26546A60-384E-49D7-912B-D5D174CEEE14')\n"
						+ "		\n"
						+ "		--or make decisions on an existing closure\n"
						+ "		OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(20, 1, loginname)) THEN\n"
						+ "	\n"
						+ "			--get previous shift closure time\n"
						+ "			SELECT \"This_is_created_at_Timestamp\"\n"
						+ "				FROM soberano.\"ShiftClosure\" shiftclosure\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND \"This_is_created_at_Timestamp\" < closureTime\n"
						+ "				ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 1\n"
						+ "				INTO previousClosureTime;\n"
						+ "\n"
						+ "			--in case of no closures yet, or all of them were canceled,\n"
						+ "			IF previousClosureTime IS NULL THEN\n"
						+ "				previousClosureTime := CAST('1/1/2000' AS timestamp with time zone);\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--time of last order\n"
						+ "			lastOrderTime := now();\n"
						+ "\n"
						+ "			--sales\n"
						+ "			sales := CASE WHEN sales IS NULL THEN 0 ELSE sales END;\n"
						+ "\n"
						+ "			--receivables\n"
						+ "			receivables := CASE WHEN receivables IS NULL THEN 0 ELSE receivables END;\n"
						+ "\n"
						+ "			--incomes\n"
						+ "			incomes := sales - receivables;\n"
						+ "\n"
						+ "			--material expenses\n"
						+ "			SELECT SUM(\"Amount\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\") \n"
						+ "				FROM soberano.\"ExpenseAmount\" amount\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					INNER JOIN soberano.\"MaterialExpense\" mate\n"
						+ "						ON mate.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN soberano.\"Expense\" expense\n"
						+ "						ON expense.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = mate.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND CAST(\"This_is_at_DateTime\" AS date) = shift INTO materialExpenses;\n"
						+ "\n"
						+ "			materialExpenses := CASE WHEN materialExpenses IS NULL THEN 0 ELSE materialExpenses END;\n"
						+ "\n"
						+ "			--services expenses\n"
						+ "			SELECT SUM(\"Amount\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\") \n"
						+ "				FROM soberano.\"ExpenseAmount\" amount\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					INNER JOIN soberano.\"ServiceExpense\" mate\n"
						+ "						ON mate.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN soberano.\"Expense\" expense\n"
						+ "						ON expense.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = mate.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND CAST(\"This_is_at_DateTime\" AS date) = shift INTO serviceExpenses;\n"
						+ "			\n"
						+ "			serviceExpenses := CASE WHEN serviceExpenses IS NULL THEN 0 ELSE serviceExpenses END;\n"
						+ "\n"
						+ "			--payroll expenses\n"
						+ "			payrollExpenses := CASE WHEN payrollExpenses IS NULL THEN 0 ELSE payrollExpenses END;\n"
						+ "\n"
						+ "			--profits\n"
						+ "			profits := sales - materialExpenses - serviceExpenses - payrollExpenses;\n"
						+ "			\n"
						+ "			--cost-to-income ratio\n"
						+ "			IF sales > 0 THEN\n"
						+ "				costToIncomeRatio := (materialExpenses + serviceExpenses + payrollExpenses) / sales * 100;\n"
						+ "			ELSE\n"
						+ "				costToIncomeRatio := 0;\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "\n"
						+ "			--cash\n"
						+ "			SELECT SUM(\"Balance\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\") \n"
						+ "				FROM soberano.\"CashRegisterHasBalanceInCurrency\" balance\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = balance.\"CurrencyHasCurrencyId\"\n"
						+ "				INTO cash;\n"
						+ "\n"
						+ "			cash := CASE WHEN cash IS NULL THEN 0 ELSE cash END;\n"
						+ "\n"
						+ "			--order details\n"
						+ "\n"
						+ "			--ordered item details\n"
						+ "\n"
						+ "			--canceled ordered items\n"
						+ "\n"
						+ "			--sales by product category\n"
						+ "\n"
						+ "			--expense details\n"
						+ "\n"
						+ "			/*************************/\n"
						+ "			/* build the report body */\n"
						+ "			/*************************/\n"
						+ "			report := report || '#TO_TRANSLATE(SHIFT_CLOSURE)#' || chr(13) || chr(13);\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(SUMMARY)#' || ' ===' || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(SHIFT)#' || ': ' || to_char(shift, 'YYYY/MM/DD') || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(LAST_ORDER)#' || ': ' || \n"
						+ "				CASE WHEN lastOrderTime IS NULL THEN '' ELSE to_char(lastOrderTime, 'YYYY/MM/DD HH24:MI') END || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(CLOSURE_TIME)#' || ': ' || to_char(closureTime, 'YYYY/MM/DD HH24:MI') || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(SALES)#' || ': ' || sales || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(RECEIVABLES)#' || ': ' || receivables || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(INCOMES)#' || ': ' || incomes || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(MATERIAL_EXPENSES)#' || ': ' || materialExpenses || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(SERVICE_EXPENSES)#' || ': ' || serviceExpenses || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(PAYROLL_EXPENSES)#' || ': ' || payrollExpenses || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(PROFITS)#' || ': ' || profits || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(COST_TO_INCOME_RATIO)#' || ': ' || costToIncomeRatio || '%' || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(CASH)# ' || cash || chr(13);\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(SUMMARY_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(ORDER_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(ORDER_TIME)#' || '     ' || '#TO_TRANSLATE(ORDER_ID)#' || '     ' || '#TO_TRANSLATE(ORDER_AMOUNT)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(ORDER_DETAILS_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(ITEM_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(ITEM_NAME)#' || '     ' || '#TO_TRANSLATE(ITEM_COUNT)#' || '     ' || '#TO_TRANSLATE(ITEM_AMOUNT)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(ITEM_DETAILS_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(MATERIAL_EXPENSE_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(EXPENSE_PROVIDER)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_MATERIAL)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_DESCRIPTION)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_AMOUNT)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_CURRENCY)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_REFERENCE)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_MaterialExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"conceptName\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"conceptName\" || chr(13);\n"
						+ "				report := report || expRecord.\"description\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(SERVICE_EXPENSE_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(EXPENSE_PROVIDER)#'\n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_DESCRIPTION)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_AMOUNT)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_CURRENCY)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_REFERENCE)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_ServiceExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"description\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"description\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(PAYROLL_EXPENSE_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(EXPENSE_WORKER)#'\n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_AMOUNT)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_CURRENCY)#' \n"
						+ "					|| '     ' || '#TO_TRANSLATE(EXPENSE_REFERENCE)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_PayrollExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"reference\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(EXPENSE_DETAILS_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(MENU_SECTION_DETAILS)#' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || '#TO_TRANSLATE(MENU_SECTION)#' || '     ' || '#TO_TRANSLATE(ITEM_COUNT)#' || '     ' || '#TO_TRANSLATE(ITEM_AMOUNT)#' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);	\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(MENU_SECTION_DETAILS_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "	\n"
						+ "			report := report || '=== ' || '#TO_TRANSLATE(REPORT_END)#' || ' ===' || chr(13) || chr(13);\n"
						+ "	END IF;\n"
						+ "	RETURN report;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
										
						////////////////////
						// business facts //
						////////////////////
						
						//countries and provinces
						
						"INSERT INTO soberano.\"Country\"(\"CountryHasCountryCode\", \"This_has_Name\")\n"
						+ "	VALUES ('CU', 'Cuba');\n"
						+ "	\n"
						+ "INSERT INTO soberano.\"Province\"(\"ProvinceHasProvinceId\", \"This_has_Name\", \"This_belongs_to_Country_with_CountryHasCountryCode\")\n"
						+ "	VALUES (1, 'Pinar del Río', 'CU'),\n"
						+ "		(2, 'La Habana', 'CU'),\n"
						+ "		(3, 'Matanzas', 'CU'),\n"
						+ "		(4, 'Villa Clara', 'CU'),\n"
						+ "		(5, 'Isla de la Juventud', 'CU'),\n"
						+ "		(6, 'Artemisa', 'CU'),\n"
						+ "		(7, 'Mayabeque', 'CU'),\n"
						+ "		(8, 'Guantánamo', 'CU'),\n"
						+ "		(9, 'Santiago de Cuba', 'CU'),\n"
						+ "		(10, 'Granma', 'CU'),\n"
						+ "		(11, 'Holguín', 'CU'),\n"
						+ "		(12, 'Las Tunas', 'CU'),\n"
						+ "		(13, 'Camagüey', 'CU'),\n"
						+ "		(14, 'Ciego de Ávila', 'CU'),\n"
						+ "		(15, 'Sancti Spíritus', 'CU'),\n"
						+ "		(16, 'Cienfuegos', 'CU');",
						
						//municipalities
						
						"INSERT INTO soberano.\"Municipality\"(\"This_has_Name\", \"This_belongs_to_Province_with_ProvinceHasProvinceId\")\n"
						+ "			VALUES	('Mantua', 1),\n"
						+ "					('Minas de Matahambre', 1),\n"
						+ "					('Viñales', 1),\n"
						+ "					('La Palma', 1),\n"
						+ "					('Los Palacios', 1),\n"
						+ "					('San Luis', 1),\n"
						+ "					('Guane', 1),\n"
						+ "					('Sandino', 1),\n"
						+ "					('Consolación del Sur', 1),\n"
						+ "					('Pinar del Río', 1),\n"
						+ "					('San Juan y Martínez', 1),\n"
						+ "					('Playa', 2),\n"
						+ "					('Plaza de la Revolución', 2),\n"
						+ "					('Centro Habana', 2),\n"
						+ "					('La Habana Vieja', 2),\n"
						+ "					('Regla', 2),\n"
						+ "					('La Habana del Este', 2),\n"
						+ "					('Guanabacoa', 2),\n"
						+ "					('San Miguel del Padrón', 2),\n"
						+ "					('Diez de Octubre', 2),\n"
						+ "					('Cerro', 2),\n"
						+ "					('Marianao', 2),\n"
						+ "					('La Lisa', 2),\n"
						+ "					('Boyeros', 2),\n"
						+ "					('Arroyo Naranjo', 2),\n"
						+ "					('Cotorro', 2),\n"
						+ "					('Matanzas', 3),\n"
						+ "					('Cárdenas', 3),\n"
						+ "					('Antiguo - Varadero', 3),\n"
						+ "					('Colón', 3),\n"
						+ "					('Perico', 3),\n"
						+ "					('Jovellanos', 3),\n"
						+ "					('Pedro Betancourt', 3),\n"
						+ "					('Limonar', 3),\n"
						+ "					('Unión de Reyes', 3),\n"
						+ "					('Ciénaga de Zapata', 3),\n"
						+ "					('Jagüey Grande', 3),\n"
						+ "					('Calimete', 3),\n"
						+ "					('Los Arabos', 3),\n"
						+ "					('Martí', 3),\n"
						+ "					('Corralillo', 4),\n"
						+ "					('Quemado de Guines', 4),\n"
						+ "					('Sagua la Grande', 4),\n"
						+ "					('Encrucijada', 4),\n"
						+ "					('Camajuaní', 4),\n"
						+ "					('Caibarién', 4),\n"
						+ "					('Remedios', 4),\n"
						+ "					('Placetas', 4),\n"
						+ "					('Santa Clara', 4),\n"
						+ "					('Cifuentes', 4),\n"
						+ "					('Santo Domingo', 4),\n"
						+ "					('Ranchuelo', 4),\n"
						+ "					('Manicaragua', 4),\n"
						+ "					('Aguada de Pasajeros', 16),\n"
						+ "					('Rodas', 16),\n"
						+ "					('Palmira', 16),\n"
						+ "					('Lajas', 16),\n"
						+ "					('Cruces', 16),\n"
						+ "					('Cumanayagua', 16),\n"
						+ "					('Cienfuegos', 16),\n"
						+ "					('Abreus', 16),\n"
						+ "					('Yaguajay', 15),\n"
						+ "					('Jatibonico', 15),\n"
						+ "					('Taguasco', 15),\n"
						+ "					('Cabaiguán', 15),\n"
						+ "					('Fomento', 15),\n"
						+ "					('Trinidad', 15),\n"
						+ "					('La Sierpe', 15),\n"
						+ "					('Sancti Spíritus', 15),\n"
						+ "					('Chambas', 14),\n"
						+ "					('Morón', 14),\n"
						+ "					('Bolivia', 14),\n"
						+ "					('Primero de Enero', 14),\n"
						+ "					('Ciro Redondo', 14),\n"
						+ "					('Florencia', 14),\n"
						+ "					('Majagua', 14),\n"
						+ "					('Venezuela', 14),\n"
						+ "					('Baraguá', 14),\n"
						+ "					('Ciego de Ávila', 14),\n"
						+ "					('Carlos Manuel de Céspedes', 13),\n"
						+ "					('Esmeralda', 13),\n"
						+ "					('Sierra de Cubitas', 13),\n"
						+ "					('Minas', 13),\n"
						+ "					('Nuevitas', 13),\n"
						+ "					('Sibanicú', 13),\n"
						+ "					('Camagüey', 13),\n"
						+ "					('Florida', 13),\n"
						+ "					('Vertientes', 13),\n"
						+ "					('Jimaguayú', 13),\n"
						+ "					('Najasa', 13),\n"
						+ "					('Santa Cruz del Sur', 13),\n"
						+ "					('Guáimaro', 13),\n"
						+ "					('Manatí', 12),\n"
						+ "					('Puerto Padre', 12),\n"
						+ "					('Majibacoa', 12),\n"
						+ "					('Las Tunas', 12),\n"
						+ "					('Jobabo', 12),\n"
						+ "					('Colombia', 12),\n"
						+ "					('Amancio', 12),\n"
						+ "					('Jesús Menéndez', 12),\n"
						+ "					('Gibara', 11),\n"
						+ "					('Rafael Freyre', 11),\n"
						+ "					('Banes', 11),\n"
						+ "					('Antilla', 11),\n"
						+ "					('Báguanos', 11),\n"
						+ "					('Holguín', 11),\n"
						+ "					('Cacocúm', 11),\n"
						+ "					('Urbano Noris', 11),\n"
						+ "					('Cueto', 11),\n"
						+ "					('Sagua de Tánamo', 11),\n"
						+ "					('Moa', 11),\n"
						+ "					('Calixto García', 11),\n"
						+ "					('Mayarí', 11),\n"
						+ "					('Frank País', 11),\n"
						+ "					('Cauto Cristo', 10),\n"
						+ "					('Bayamo', 10),\n"
						+ "					('Yara', 10),\n"
						+ "					('Manzanillo', 10),\n"
						+ "					('Campechuela', 10),\n"
						+ "					('Media Luna', 10),\n"
						+ "					('Niquero', 10),\n"
						+ "					('Pilón', 10),\n"
						+ "					('Bartolomé Masó', 10),\n"
						+ "					('Buey Arriba', 10),\n"
						+ "					('Guisa', 10),\n"
						+ "					('Río Cauto', 10),\n"
						+ "					('Jiguaní', 10),\n"
						+ "					('Contramaestre', 9),\n"
						+ "					('Mella', 9),\n"
						+ "					('San Luis', 9),\n"
						+ "					('Segundo Frente', 9),\n"
						+ "					('Songo - La Maya', 9),\n"
						+ "					('Santiago de Cuba', 9),\n"
						+ "					('Palma Soriano', 9),\n"
						+ "					('Tercer Frente', 9),\n"
						+ "					('Guamá', 9),\n"
						+ "					('El Salvador', 8),\n"
						+ "					('Guantánamo', 8),\n"
						+ "					('Yateras', 8),\n"
						+ "					('Baracoa', 8),\n"
						+ "					('Imías', 8),\n"
						+ "					('San Antonio del Sur', 8),\n"
						+ "					('Manuel Támes', 8),\n"
						+ "					('Caimanera', 8),\n"
						+ "					('Niceto Pérez', 8),\n"
						+ "					('Maisí', 8),\n"
						+ "					('Isla de la Juventud', 5),\n"
						+ "					('Bahía Honda', 6),\n"
						+ "					('Mariel', 6),\n"
						+ "					('Guanajay', 6),\n"
						+ "					('Caimito', 6),\n"
						+ "					('Bauta', 6),\n"
						+ "					('San antonio de los Baños', 6),\n"
						+ "					('Guira de Melena', 6),\n"
						+ "					('Alquizar', 6),\n"
						+ "					('Artemisa', 6),\n"
						+ "					('Candelaria', 6),\n"
						+ "					('San Cristóbal', 6),\n"
						+ "					('Bejucal', 7),\n"
						+ "					('San José de las Lajas', 7),\n"
						+ "					('Jaruco', 7),\n"
						+ "					('Santa Cruz del Norte', 7),\n"
						+ "					('Madruga', 7),\n"
						+ "					('Nueva Paz', 7),\n"
						+ "					('San Nicolás', 7),\n"
						+ "					('Guines', 7),\n"
						+ "					('Melena del Sur', 7),\n"
						+ "					('Batabanó', 7),\n"
						+ "					('Quivicán', 7);",
						
						////////////////////
						// helper queries //
						////////////////////
						
						"--optimizations\n"
						+ "CREATE INDEX IF NOT EXISTS index1\n"
						+ "    ON soberano.\"Worker\" USING btree\n"
						+ "    (\"This_has_LoginName\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
						+ "    TABLESPACE pg_default;"
					}
				)
			);
	}
}
