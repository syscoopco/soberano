package co.syscoop.soberano.test.generation;

import org.apache.commons.lang3.ArrayUtils;

import co.syscoop.soberano.rules.enforcer.generator.LogicalQueriesBatch;

public class LogicalQueriesForSoberanoInstance extends LogicalQueriesBatch {
	
	public LogicalQueriesForSoberanoInstance() {
		LogicalQueriesForSoberanoMetamodel logicalQueriesForSoberanoMetamodel = new LogicalQueriesForSoberanoMetamodel();
		super.setBatch(ArrayUtils.addAll(logicalQueriesForSoberanoMetamodel.getBatch(),
				new String[] {
						//////////////////////////////////////////////////////////////////////////////////
						// rules not generated. see the notes in the soberano instance conceptual model //
						//////////////////////////////////////////////////////////////////////////////////
						
						/******************/
						/*RULE_EXISTENCE_1*/
						/******************/
						"--assure only one activity instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Activity_beforeinsert_RULE_EXISTENCE_1\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Activity\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 1;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (1, \n"
						+ "					now(), \n"
						+ "					'_D205391E-37D6-4AA6-B226-88E7A84B0C70', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"ActivityHasActivityId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 1;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Activity_before_insert_RULE_EXISTENCE_1\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Activity\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Activity_beforeinsert_RULE_EXISTENCE_1\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_2*/
						/******************/
						"--assure only one configuration instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Configuration_beforeinsert_RULE_EXISTENCE_2\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Configuration\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 2;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (2, \n"
						+ "					now(), \n"
						+ "					'_CA784430-45B2-4403-9257-1D3906C164D1', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"ConfigurationHasConfigurationId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 2;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Configuration_before_insert_RULE_EXISTENCE_2\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Configuration\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Configuration_beforeinsert_RULE_EXISTENCE_2\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_3*/
						/******************/
						"--assure only one catalog instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_Catalog_beforeinsert_RULE_EXISTENCE_3\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"Catalog\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 3;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (3, \n"
						+ "					now(), \n"
						+ "					'_94C0BD6E-5DED-4F46-95DA-994C881B6271', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"CatalogHasCatalogId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 3;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_Catalog_before_insert_RULE_EXISTENCE_3\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"Catalog\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_Catalog_beforeinsert_RULE_EXISTENCE_3\"();",
						
						
						
						/******************/
						/*RULE_EXISTENCE_4*/
						/******************/
						"--assure only one cash register instance exists. the default stage is 2 (Enabled)\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_tg_CashRegister_beforeinsert_RULE_EXISTENCE_4\"()\n"
						+ "						    RETURNS trigger\n"
						+ "						    LANGUAGE 'plpgsql'\n"
						+ "						    COST 100\n"
						+ "						    VOLATILE NOT LEAKPROOF\n"
						+ "	AS \n"
						+ "$BODY$\n"
						+ "	BEGIN\n"
						+ "		DELETE FROM soberano.\"CashRegister\";\n"
						+ "		DELETE FROM metamodel.\"EntityTypeInstance\" WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = 4;\n"
						+ "		INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "													\"This_is_created_at_Timestamp\", \n"
						+ "													\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "													\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "													\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "													\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "			VALUES (4, \n"
						+ "					now(), \n"
						+ "					'_7E0F5DAA-21DB-433E-BFBF-F4437F3E0FE9', \n"
						+ "					1, \n"
						+ "					2, \n"
						+ "					1);\n"
						+ "		NEW.\"CashRegisterHasCashRegisterId\" := 1;\n"
						+ "		NEW.\"This_is_identified_by_EntityTypeInstance_id\" := 4;\n"
						+ "		RETURN NEW;\n"
						+ "	END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "CREATE TRIGGER \"tg_CashRegister_before_insert_RULE_EXISTENCE_4\"\n"
						+ "	BEFORE INSERT\n"
						+ "	ON soberano.\"CashRegister\"\n"
						+ "	FOR EACH ROW\n"
						+ "	EXECUTE FUNCTION soberano.\"fn_tg_CashRegister_beforeinsert_RULE_EXISTENCE_4\"();",
						
						
						
						/****************************************************************************/
						/*RULE_CONSTRAINT_1: At most one 'Warehouse' can be a procurement warehouse.*/
						/*RULE_CONSTRAINT_2: At most one 'Warehouse' can be a sales warehouse.		*/
						/****************************************************************************/
						"--it is called before creating and modifying warehouses, within the corresponding funstions\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isProcurementWarehouse boolean, isSalesWarehouse boolean)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE NOT LEAKPROOF\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF isProcurementWarehouse AND\n"
						+ "			isSalesWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_procurement_warehouse\" = false,\n"
						+ "					\"Warehouse_is_sales_warehouse\" = false;\n"
						+ "		ELSIF isProcurementWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_procurement_warehouse\" = false;\n"
						+ "		ELSIF isSalesWarehouse THEN\n"
						+ "			UPDATE soberano.\"Warehouse\" \n"
						+ "				SET \"Warehouse_is_sales_warehouse\" = false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/********************************************************************************/
						/*RULE_CONSTRAINT_4: At most one 'Currency' can be a system currency.			*/
						/*RULE_CONSTRAINT_5: At most one 'Currency' can be a price reference currency.	*/
						/********************************************************************************/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF issystemcurrency AND\n"
						+ "			ispricereferencecurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_system_currency\" = false,\n"
						+ "					\"Currency_is_price_reference_currency\" = false;\n"
						+ "		ELSIF issystemcurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_system_currency\" = false;\n"
						+ "		ELSIF ispricereferencecurrency THEN\n"
						+ "			UPDATE soberano.\"Currency\" \n"
						+ "				SET \"Currency_is_price_reference_currency\" = false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/********************************************************************************/
						/*RULE_CONSTRAINT_6: At least one 'Currency' must be a system currency.			*/
						/*RULE_CONSTRAINT_7: At least one 'Currency' must be a price reference currency.	*/
						/********************************************************************************/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(defaultCurrencyId integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		isSystemCurrency boolean;\n"
						+ "		isReferencePriceCurency boolean;\n"
						+ "	BEGIN		\n"
						+ "		\n"
						+ "		--if currently none currency is system currency, default currency is assumed as the system currency\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Currency\" WHERE \"Currency_is_system_currency\")\n"
						+ "			INTO isSystemCurrency;\n"
						+ "		UPDATE soberano.\"Currency\" SET \"Currency_is_system_currency\" = isSystemCurrency\n"
						+ "			WHERE isSystemCurrency AND \"CurrencyHasCurrencyId\" = defaultCurrencyId;\n"
						+ "						\n"
						+ "		--if currently none currency is reference price currency, default currency is assumed as the reference price currency\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\")\n"
						+ "			INTO isReferencePriceCurency;\n"
						+ "		UPDATE soberano.\"Currency\" SET \"Currency_is_price_reference_currency\" = isReferencePriceCurency\n"
						+ "			WHERE isReferencePriceCurency AND \"CurrencyHasCurrencyId\" = defaultCurrencyId;\n"
						+ "		\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/*RULE_CONSTRAINT_8: At least one 'Warehouse' must be a procurement warehouse.	*/
						/*RULE_CONSTRAINT_9: At least one 'Warehouse' must be a sales warehouse.		*/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(\n"
						+ "	defaultwarehouseid integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		isProcurementWarehouse boolean;\n"
						+ "		isSalesWarehouse boolean;\n"
						+ "	BEGIN		\n"
						+ "		\n"
						+ "		--if currently none warehouse is procurement warehouse, default warehouse is assumed as the procurement warehouse\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Warehouse\" WHERE \"Warehouse_is_procurement_warehouse\")\n"
						+ "			INTO isProcurementWarehouse;\n"
						+ "		UPDATE soberano.\"Warehouse\" SET \"Warehouse_is_procurement_warehouse\" = isProcurementWarehouse\n"
						+ "			WHERE isProcurementWarehouse AND \"WarehouseHasWarehouseId\" = defaultwarehouseid;\n"
						+ "						\n"
						+ "		--if currently none warehouse is sales warehouse, default warehouse is assumed as the sales warehouse\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Warehouse\" WHERE \"Warehouse_is_sales_warehouse\")\n"
						+ "			INTO isSalesWarehouse;\n"
						+ "		UPDATE soberano.\"Warehouse\" SET \"Warehouse_is_sales_warehouse\" = isSalesWarehouse\n"
						+ "			WHERE isSalesWarehouse AND \"WarehouseHasWarehouseId\" = defaultwarehouseid;\n"
						+ "		\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/*RULE_CONSTRAINT_13: An inventory item can not be modified if it is an input or output of a running process.	*/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryItem_RULE_CONSTRAINT_13\"(itemcode character varying)\n"
						+ "    RETURNS boolean\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		ruleMet boolean;\n"
						+ "	BEGIN\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Process\" pr\n"
						+ "								INNER JOIN soberano.\"ProcessInput\" pi\n"
						+ "						  \n"
						+ "									--the item is an input of the process\n"
						+ "									ON pr.\"ProcessHasProcessId\" = pi.\"ProcessHasProcessId\"\n"
						+ "										AND pi.\"InventoryItemHasInventoryItemCode\" = itemcode\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" prr\n"
						+ "						  \n"
						+ "						  			--there are process instances running\n"
						+ "									ON prr.\"This_is_of_Process_with_ProcessHasProcessId\" = pr.\"ProcessHasProcessId\"\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "									ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = prr.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "\n"
						+ "										--process run is in stage Ongoing\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3)\n"
						+ "				AND\n"
						+ "				NOT EXISTS(SELECT * FROM soberano.\"Process\" pr\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "\n"
						+ "									--the item is an output of the process\n"
						+ "									ON pr.\"ProcessHasProcessId\" = po.\"ProcessHasProcessId\"\n"
						+ "										AND po.\"InventoryItemHasInventoryItemCode\" = itemcode\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" prr\n"
						+ "\n"
						+ "									--there are process instances running\n"
						+ "									ON prr.\"This_is_of_Process_with_ProcessHasProcessId\" = pr.\"ProcessHasProcessId\"\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "									ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = prr.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "\n"
						+ "										--process run is in stage Ongoing\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3)\n"
						+ "			INTO ruleMet;\n"
						+ "		RETURN ruleMet;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						/*RULE_CONSTRAINT_14: A process with running instances can not be modified..	*/
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_RULE_CONSTRAINT_14\"(processId integer)\n"
						+ "    RETURNS boolean\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		ruleMet boolean;\n"
						+ "	BEGIN\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Process\" pr\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" prr\n"
						+ "						  \n"
						+ "						  			--there are process instances running\n"
						+ "									ON prr.\"This_is_of_Process_with_ProcessHasProcessId\" = pr.\"ProcessHasProcessId\"\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "									ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = prr.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "\n"
						+ "										--process run is in stage Ongoing\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3)\n"
						+ "			INTO ruleMet;\n"
						+ "		RETURN ruleMet;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"/*****************************************************************************************/\n"
						+ "/*RULE_CONSTRAINT_16: At most one 'PrinterProfile' can be the default printer profile. */\n"
						+ "/*RULE_CONSTRAINT_17: At most one 'PrinterProfile' can be the management printer profile.     */\n"
						+ "/***************************************************************************************/\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_RULE_CONSTRAINTS_16_AND_17\"(\n"
						+ "	isdefaultprinter boolean,\n"
						+ "	ismanagementprinter boolean)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF isdefaultprinter AND\n"
						+ "			ismanagementprinter THEN\n"
						+ "			UPDATE soberano.\"PrinterProfile\"\n"
						+ "				SET \"PrinterProfile_is_default_printer_profile\" = false,\n"
						+ "					\"PrinterProfile_is_used_by_management\" = false;\n"
						+ "		ELSIF isdefaultprinter THEN\n"
						+ "			UPDATE soberano.\"PrinterProfile\" \n"
						+ "				SET \"PrinterProfile_is_default_printer_profile\" = false;\n"
						+ "		ELSIF ismanagementprinter THEN\n"
						+ "			UPDATE soberano.\"PrinterProfile\"\n"
						+ "				SET \"PrinterProfile_is_used_by_management\" = false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						///////////////////////////////
						// foreign keys to metamodel //
						///////////////////////////////
						"ALTER TABLE soberano.\"AcquirableMaterial\" \n"
						+ "			ADD CONSTRAINT \"AcquirableMaterial_This_is_identified_by_EntityTypeInstance_id_\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Activity\"\n"
						+ "  ADD CONSTRAINT \"Activity_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"CashRegister\"\n"
						+ "  ADD CONSTRAINT \"CashRegister_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Catalog\"\n"
						+ "  ADD CONSTRAINT \"Catalog_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Configuration\"\n"
						+ "  ADD CONSTRAINT \"Configuration_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"CostCenter\" \n"
						+ "			ADD CONSTRAINT \"CostCenter_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Counter\"\n"
						+ "  ADD CONSTRAINT \"Counter_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",						
						
						
						
						"ALTER TABLE soberano.\"Currency\" \n"
						+ "			ADD CONSTRAINT \"Currency_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Customer\" \n"
						+ "			ADD CONSTRAINT \"Customer_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
				
						
						
						"ALTER TABLE soberano.\"InventoryOperation\" \n"
						+ "			ADD CONSTRAINT \"InventoryOperation_This_is_identified_by_EntityTypeInstance_id_\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"MaterialExpense\" \n"
						+ "			ADD CONSTRAINT \"MaterialExpense_This_is_identified_by_EntityTypeInstance_id_fke\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Order\"\n"
						+ "  ADD CONSTRAINT \"Order_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"PayrollExpense\" \n"
						+ "			ADD CONSTRAINT \"PayrollExpense_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"PrinterProfile\"\n"
						+ "						ADD CONSTRAINT \"PrinterProfile_This_is_identified_by_EntityTypeInstance_id_\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "						REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "						ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Process\" \n"
						+ "			ADD CONSTRAINT \"Process_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"ProcessRun\" \n"
						+ "			ADD CONSTRAINT \"ProcessRun_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Product\" \n"
						+ "			ADD CONSTRAINT \"Product_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						"ALTER TABLE soberano.\"ProductCategory\" \n"
						+ "			ADD CONSTRAINT \"ProductCategory_This_is_identified_by_EntityTypeInstance_id_fke\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"ProductionLine\"\n"
						+ "						ADD CONSTRAINT \"ProductionLine_This_is_identified_by_EntityTypeInstance_id_\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "						REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "						ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Service\" \n"
						+ "			ADD CONSTRAINT \"Service_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"ServiceExpense\" \n"
						+ "			ADD CONSTRAINT \"ServiceExpense_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"ShiftClosure\" \n"
						+ "			ADD CONSTRAINT \"ShiftClosure_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Unit\" \n"
						+ "			ADD CONSTRAINT \"Unit_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						"ALTER TABLE soberano.\"Warehouse\" \n"
						+ "			ADD CONSTRAINT \"Warehouse_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "				ON UPDATE CASCADE ON DELETE CASCADE;",
									
									
									
						"ALTER TABLE soberano.\"Worker\"\n"
						+ "  ADD CONSTRAINT \"Worker_This_is_identified_by_EntityTypeInstance_id_fkey\" FOREIGN KEY (\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "      REFERENCES \"metamodel\".\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\") MATCH SIMPLE\n"
						+ "      ON UPDATE CASCADE ON DELETE CASCADE;",
						
						
						
						/////////////////////////////////////
						// business organization structure //
						/////////////////////////////////////
						
						"--add responsibilities\n"
						+ "--responsibility 1 is reserved for soberano.responsibility.top\n"
						+ "INSERT INTO \"metamodel\".\"Responsibility\" (\"ResponsibilityHasResponsibilityId\",\n"
						+ "						\"This_has_Name\")	\n"
						+ "	VALUES (2, 'Manager'),\n"
						+ "		(3, 'Accounter'),\n"
						+ "		(4, 'Salesclerk'),\n"
						+ "		(5, 'Shift manager'),\n"
						+ "		(6, 'Checker'),\n"
						+ "		(7, 'Auditor'),\n"
						+ "		(8, 'Workshop 1 worker'),\n"
						+ "		(9, 'Workshop 2 worker'),\n"
						+ "		(10, 'Storekeeper'),\n"
						+ "		(11, 'Catalog maintainer'),\n"
						+ "		(12, 'Community manager'),\n"
						+ "		(13, 'Procurement worker'),\n"
						+ "		(14, 'System admin'),\n"
						+ "		(15, 'Technologist'),\n"
						+ "		(16, 'Manager assistant'),\n"
						+ "		(17, 'Staff'),\n"
						+ "		(18, 'Reopener');",
						
						
												
						"--assign top user to all responsibilities\n"
						+ "SELECT \"metamodel\".\"fn_User_assignToResponsibilities\"(1, ARRAY[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], ARRAY[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);",
						
							
												
						/////////////////////////////////////
						// business dynamics configuration //
						/////////////////////////////////////
						
						"--life cycles\n"
						+ "INSERT INTO \"metamodel\".\"LifeCycle\" (\"LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_is_for_EntityType_with_MeaningHasMeaningId\")\n"
						+ "	VALUES (1, 'Activity', '_D205391E-37D6-4AA6-B226-88E7A84B0C70'),\n"
						+ "			(2, 'Counter', '_0126EFEB-6646-4C9C-B0C2-28EB3B25E3A7'),\n"
						+ "			(3, 'Order', '_BD3DEF99-C7B5-4A31-BD72-FCC02EDB6355'),\n"
						+ "			(4, 'Configuration', '_CA784430-45B2-4403-9257-1D3906C164D1'),\n"
						+ "			(5, 'Catalog', '_94C0BD6E-5DED-4F46-95DA-994C881B6271'),\n"
						+ " 		(6, 'Worker', '_2632E1D8-8D63-4DD4-9FA0-A19C0250A09B'),\n"
						+ "			(7, 'AcquirableMaterial', '_9FEE3FFC-A5FB-423E-8D33-40B22B40022E'),\n"
						+ "			(8, 'CostCenter', '_BF752D2F-A23F-4764-BFE3-8B3ED196AB88'),\n"
						+ "			(9, 'Currency', '_D50FB66E-606B-4CE0-8005-6E172E66746B'),\n"
						+ "			(10, 'MaterialExpense', '_80FDAA4B-92DB-4A88-89F8-BC11EEFBF0FE'),\n"
						+ "			(11, 'PayrollExpense', '_9FE7DA9E-6FB3-4490-A155-E35656C281D7'),\n"
						+ "			(12, 'Process', '_0AEEE069-E89E-407B-BF1D-B7881EF813B3'),\n"
						+ "			(13, 'Product', '_18118B72-85F7-47D8-A683-25B366896F80'),\n"
						+ "			(14, 'ProductCategory', '_819F484A-3996-4398-894B-634B23C2160D'),\n"
						+ "			(15, 'Provider', '_FD850F63-E17A-4803-B04B-59004C0F6C2D'),\n"
						+ "			(16, 'Unit', '_8B5F06D3-F307-49D7-99F1-57541D8A2B35'),\n"
						+ "			(17, 'Warehouse', '_F6E70C11-9ABC-469E-8468-930AAC301E70'),\n"
						+ "			(18, 'ServiceExpense', '_41F021C3-227F-4184-A7F8-6E69DA816D2D'),\n"
						+ "			(19, 'Service', '_E4414D7E-5ACB-45F9-9E78-33AC6CD619C4'),\n"
						+ "			(20, 'ShiftClosure', '_26546A60-384E-49D7-912B-D5D174CEEE14'),\n"
						+ "			(21, 'InventoryOperation', '_E439FAF1-C89D-4C86-A1F7-0A970074FA02'),\n"
						+ "			(22, 'Customer', '_C3E2DB34-945A-407B-84B3-64CC14A6E48B'),\n"
						+ "			(23, 'Deposit', '_87225364-61F0-4563-B1BC-E601F83D0B6E'),\n"
						+ "			(24, 'Withdrawal', '_5C00E9C9-05FC-4B07-A1F4-A679E4A52D6D'),\n"
						+ "			(25, 'Receivable', '_78C955BD-2EAA-4504-852D-E545AB7FFB5E'),\n"
						+ "			(26, 'Balancing', '_394DD7F2-327F-4823-B9EC-5A231CB7053E'),\n"
						+ "			(27, 'ProcessRun', '_0FA8A5A6-6037-4B1F-AB01-CB0947E3C3AA'),\n"
						+ "			(28, 'PrinterProfile', '_4F6BC878-0E8B-46DB-9B2C-59A103C00C03'),\n"
						+ "			(29, 'ProductionLine', '_D6394DC1-F701-4B68-96A3-8167D217F6E8'),\n"
						+ "			(30, 'DeliveryProvider', '_D360A7D4-2D77-4335-B77F-BB7552B53877');\n",
						
						
						
						"--lifecycle deployment across top authority\n"
						+ "INSERT INTO \"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" (\"LifeCycleHasLifeCycleId\",\n"
						+ "								\"AuthorityHasAuthorityId\")\n"
						+ "	VALUES (1, 1),\n"
						+ "	 (2, 1),\n"
						+ "	 (3, 1),\n"
						+ "	 (4, 1),\n"
						+ "	 (5, 1),\n"
						+ "  (6, 1),\n"
						+ "	 (7, 1),\n"
						+ "	 (8, 1),\n"
						+ "	 (9, 1),\n"
						+ "	 (10, 1),\n"
						+ "	 (11, 1),\n"
						+ "	 (12, 1),\n"
						+ "	 (13, 1),\n"
						+ "	 (14, 1),\n"
						+ "	 (15, 1),\n"
						+ "	 (16, 1),\n"
						+ "	 (17, 1),\n"
						+ "	 (18, 1),\n"
						+ "	 (19, 1),\n"
						+ "	 (20, 1),\n"
						+ "	 (21, 1),\n"
						+ "	 (22, 1),\n"
						+ "	 (23, 1),\n"
						+ "	 (24, 1),\n"
						+ "	 (25, 1),\n"
						+ "	 (26, 1),\n"
						+ "	 (27, 1),\n"
						+ "  (28, 1),\n"
						+ "  (29, 1),\n"
						+ "  (30, 1);\n",
						
						
						
						"--add lifecycle stages under top authority jurisdiction\n"
						+ "--stage 1 is reserved for soberano.stage.starting\n"
						+ "INSERT INTO \"metamodel\".\"Stage\" (\"StageHasStageId\", \"This_has_Name\", \"This_is_under_jurisdiction_of_Authority_with_AuthorityHasAuthor\")\n"
						+ "							VALUES (2, 'Enabled', 1),\n"
						+ "								(3, 'Ongoing', 1),\n"
						+ "								(4, 'Recorded', 1),\n"
						+ "								(5, 'Canceled', 1),\n"
						+ "								(6, 'Closed', 1),\n"
						+ "								(7, 'Honored', 1),\n"
						+ "								(8, 'Disabled', 1),\n"
						+ "								(9, 'Dishonored', 1);",
						
						
						
						"/* activity lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (1001, 'Enabled', 1);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (1001, 'Check', 1, 1001, 1001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (1, 'Manager', 1001),\n"
						+ "				(1, 'Salesclerk', 1001),\n"
						+ "				(1, 'Shift manager', 1001),\n"
						+ "				(1, 'Checker', 1001),\n"
						+ "				(1, 'Auditor', 1001),\n"
						+ "				(1, 'System admin', 1001);",
						
						
						
						"/* counter lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (2001, 'soberano.stage.starting', 2),\n"
						+ "		(2002, 'Enabled', 2),\n"
						+ "		(2003, 'Disabled', 2);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (2001, 'Add', 2, 2001, 2002, 'false'),\n"
						+ "		(2002, 'Apply', 2, 2002, 2002, 'false'),\n"
						+ "		(2003, 'Disable', 2, 2002, 2003, 'false'),\n"
						+ "		(2004, 'Check', 2, 2002, 2002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (2, 'Manager', 2001),\n"
						+ "				(2, 'System admin', 2001),\n"
						+ "				(2, 'Manager', 2002),\n"
						+ "				(2, 'System admin', 2002),\n"
						+ "				(2, 'Manager', 2003),\n"
						+ "				(2, 'System admin', 2003),\n"
						+ "				(2, 'Salesclerk', 2004),\n"
						+ "				(2, 'Manager assistant', 2004),\n"
						+ "				(2, 'Auditor', 2004);",
						
						
						
						"/* order lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (3001, 'soberano.stage.starting', 3),\n"
						+ "		(3002, 'Ongoing', 3),\n"
						+ "		(3003, 'Closed', 3),\n"
						+ "		(3004, 'Canceled', 3);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (3001, 'Open', 3, 3001, 3002, 'false'),\n"
						+ "		(3002, 'Make', 3, 3002, 3002, 'false'),\n"
						+ "		(3003, 'Cancel', 3, 3002, 3002, 'false'),\n"
						+ "		(3004, 'Change', 3, 3002, 3002, 'false'),\n"
						+ "		(3005, 'Collect', 3, 3002, 3003, 'false'),\n"
						+ "		(3006, 'Check', 3, 3002, 3002, 'false'),\n"
						+ "		(3007, 'Check', 3, 3003, 3003, 'false'),\n"
						+ "		(3008, 'Check', 3, 3004, 3004, 'false'),\n"
						+ "		(3009, 'Cancel order', 3, 3003, 3004, 'false'),\n"
						+ "		(3010, 'Reopen', 3, 3003, 3002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (3, 'Salesclerk', 3001),\n"
						+ "				(3, 'Salesclerk', 3002),\n"
						+ "				(3, 'Salesclerk', 3003),\n"
						+ "				(3, 'Salesclerk', 3006),\n"
						+ "				(3, 'Salesclerk', 3007),\n"
						+ "				(3, 'Salesclerk', 3008),\n"
						+ "				(3, 'Checker', 3005),\n"
						+ "				(3, 'Checker', 3006),\n"
						+ "				(3, 'Checker', 3007),\n"
						+ "				(3, 'Checker', 3008),\n"
						+ "				(3, 'Manager assistant', 3004),\n"
						+ "				(3, 'Manager assistant', 3005),\n"
						+ "				(3, 'Manager assistant', 3006),\n"
						+ "				(3, 'Manager assistant', 3007),\n"
						+ "				(3, 'Manager assistant', 3008),\n"
						+ "				(3, 'Manager', 3006),\n"
						+ "				(3, 'Manager', 3007),\n"
						+ "				(3, 'Manager', 3008),\n"
						+ "				(3, 'Manager', 3009),\n"
						+ "				(3, 'Shift manager', 3006),\n"
						+ "				(3, 'Shift manager', 3007),\n"
						+ "				(3, 'Shift manager', 3008),\n"
						+ "				(3, 'Reopener', 3010),\n"		
						+ "				(3, 'Auditor', 3006),\n"	
						+ "				(3, 'Auditor', 3007),\n"
						+ "				(3, 'Auditor', 3008),\n"	
						+ "				(3, 'Accounter', 3006),\n"	
						+ "				(3, 'Accounter', 3007),\n"	
						+ "				(3, 'Accounter', 3008);",
						
						
						
						"/* configuration lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (4001, 'Enabled', 4);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (4001, 'Check', 4, 4001, 4001, 'false'),\n"
						+ "		(4002, 'Apply', 4, 4001, 4001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (4, 'Manager', 4001),\n"
						+ "				(4, 'System admin', 4001),\n"
						+ "				(4, 'Manager', 4002),\n"
						+ "				(4, 'System admin', 4002);",
						
						
						
						"/* catalog lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (5001, 'Enabled', 5);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (5001, 'Check', 5, 5001, 5001, 'false'),\n"
						+ "		(5002, 'Apply', 5, 5001, 5001, 'false'),\n"
						+ "		(5003, 'Export', 5, 5001, 5001, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (5, 'Manager', 5001),\n"
						+ "				(5, 'Accounter', 5001),\n"
						+ "				(5, 'Salesclerk', 5001),\n"
						+ "				(5, 'Shift manager', 5001),\n"
						+ "				(5, 'Checker', 5001),\n"
						+ "				(5, 'Auditor', 5001),\n"
						+ "				(5, 'Storekeeper', 5001),\n"
						+ "				(5, 'Catalog maintainer', 5001),\n"
						+ "				(5, 'Community manager', 5001),\n"
						+ "				(5, 'Procurement worker', 5001),\n"
						+ "				(5, 'System admin', 5001),\n"
						+ "				(5, 'Manager', 5002),\n"
						+ "				(5, 'Shift manager', 5002),\n"
						+ "				(5, 'Catalog maintainer', 5002),\n"
						+ "				(5, 'Manager', 5003),\n"
						+ "				(5, 'Shift manager', 5003),\n"
						+ "				(5, 'Accounter', 5003),\n"
						+ "				(5, 'Catalog maintainer', 5003),\n"
						+ "				(5, 'Auditor', 5003);",
						
						
						
						"/* worker lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (6001, 'soberano.stage.starting', 6),\n"
						+ "		(6002, 'Enabled', 6),\n"
						+ "		(6003, 'Disabled', 6);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (6001, 'Add', 6, 6001, 2002, 'false'),\n"
						+ "		(6002, 'Apply', 6, 6002, 6002, 'false'),\n"
						+ "		(6003, 'Disable', 6, 6002, 6003, 'false'),\n"
						+ "		(6004, 'Check', 6, 6002, 6002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (6, 'System admin', 6001),\n"
						+ "				(6, 'System admin', 6002),\n"
						+ "				(6, 'System admin', 6003),\n"						
						+ "				(6, 'Shift manager', 6004),\n"	
						+ "				(6, 'Manager', 6004),\n"
						+ "				(6, 'Accounter', 6004),\n"
						+ "				(6, 'Auditor', 6004);",
						
						
						
						"/* product category lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (14001, 'soberano.stage.starting', 14),\n"
						+ "		(14002, 'Enabled', 14),\n"
						+ "		(14003, 'Disabled', 14);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (14001, 'Add', 14, 14001, 14002, 'false'),\n"
						+ "		(14002, 'Apply', 14, 14002, 14002, 'false'),\n"
						+ "		(14003, 'Disable', 14, 14002, 14003, 'false'),\n"
						+ "		(14004, 'Check', 14, 14002, 14002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (14, 'Catalog maintainer', 14001),\n"
						+ "				(14, 'Catalog maintainer', 14002),\n"
						+ "				(14, 'Catalog maintainer', 14003),\n"
						+ "				(14, 'Manager', 14004),\n"
						+ "				(14, 'Accounter', 14004),\n"						
						+ "				(14, 'Salesclerk', 14004),\n"
						+ "				(14, 'Shift manager', 14004),\n"
						+ "				(14, 'Checker', 14004),\n"
						+ "				(14, 'Workshop 1 worker', 14004),\n"
						+ "				(14, 'Workshop 2 worker', 14004),\n"
						+ "				(14, 'Storekeeper', 14004),\n"						
						+ "				(14, 'Community manager', 14004),\n"
						+ "				(14, 'Procurement worker', 14004),\n"
						+ "				(14, 'Manager assistant', 14004),\n"
						+ "				(14, 'Auditor', 14004);",
						
						
						
						"/* provider lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (15001, 'soberano.stage.starting', 15),\n"
						+ "		(15002, 'Enabled', 15),\n"
						+ "		(15003, 'Disabled', 15);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (15001, 'Add', 15, 15001, 15002, 'false'),\n"
						+ "		(15002, 'Apply', 15, 15002, 15002, 'false'),\n"
						+ "		(15003, 'Disable', 15, 15002, 15003, 'false'),\n"
						+ "		(15004, 'Check', 15, 15002, 15002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (15, 'Procurement worker', 15001),\n"
						+ "				(15, 'Procurement worker', 15002),\n"
						+ "				(15, 'Procurement worker', 15003),\n"
						+ "				(15, 'Manager', 15004),\n"
						+ "				(15, 'Shift manager', 15004),\n"
						+ "				(15, 'Accounter', 15004),\n"
						+ "				(15, 'Storekeeper', 15004),\n"
						+ "				(15, 'Auditor', 15004);",
						
						
						
						"/* product lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (13001, 'soberano.stage.starting', 13),\n"
						+ "		(13002, 'Enabled', 13),\n"
						+ "		(13003, 'Disabled', 13);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (13001, 'Add', 13, 13001, 13002, 'false'),\n"
						+ "		(13002, 'Apply', 13, 13002, 13002, 'false'),\n"
						+ "		(13003, 'Disable', 13, 13002, 13003, 'false'),\n"
						+ "		(13004, 'Check', 13, 13002, 13002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (13, 'Catalog maintainer', 13001),\n"
						+ "				(13, 'Catalog maintainer', 13002),\n"
						+ "				(13, 'Catalog maintainer', 13003),\n"
						+ "				(13, 'Manager', 13004),\n"
						+ "				(13, 'Accounter', 13004),\n"						
						+ "				(13, 'Salesclerk', 13004),\n"
						+ "				(13, 'Shift manager', 13004),\n"
						+ "				(13, 'Checker', 13004),\n"
						+ "				(13, 'Workshop 1 worker', 13004),\n"
						+ "				(13, 'Workshop 2 worker', 13004),\n"
						+ "				(13, 'Storekeeper', 13004),\n"						
						+ "				(13, 'Community manager', 13004),\n"
						+ "				(13, 'Procurement worker', 13004),\n"
						+ "				(13, 'Technologist', 13004),\n"
						+ "				(13, 'Manager assistant', 13004),\n"
						+ "				(13, 'Auditor', 13004);",
						
						
						
						"/* warehouse lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (17001, 'soberano.stage.starting', 17),\n"
						+ "		(17002, 'Enabled', 17),\n"
						+ "		(17003, 'Disabled', 17);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (17001, 'Add', 17, 17001, 17002, 'false'),\n"
						+ "		(17002, 'Apply', 17, 17002, 17002, 'false'),\n"
						+ "		(17003, 'Disable', 17, 17002, 17003, 'false'),\n"
						+ "		(17004, 'Check', 17, 17002, 17002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (17, 'Manager', 17001),\n"
						+ "				(17, 'Manager', 17002),\n"
						+ "				(17, 'Manager', 17003),\n"
						+ "				(17, 'Accounter', 17004),\n"
						+ "				(17, 'Shift manager', 17004),\n"						
						+ "				(17, 'Storekeeper', 17004),\n"
						+ "				(17, 'Technologist', 17004),\n"
						+ "				(17, 'Auditor', 17004);",
						
						
						
						"/* cost center lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (8001, 'soberano.stage.starting', 8),\n"
						+ "		(8002, 'Enabled', 8),\n"
						+ "		(8003, 'Disabled', 8);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (8001, 'Add', 8, 8001, 8002, 'false'),\n"
						+ "		(8002, 'Apply', 8, 8002, 8002, 'false'),\n"
						+ "		(8003, 'Disable', 8, 8002, 8003, 'false'),\n"
						+ "		(8004, 'Check', 8, 8002, 8002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (8, 'Manager', 8001),\n"
						+ "				(8, 'Manager', 8002),\n"
						+ "				(8, 'Manager', 8003),\n"
						+ "				(8, 'Accounter', 8004),\n"
						+ "				(8, 'Shift manager', 8004),\n"	
						+ "				(8, 'Technologist', 8004),\n"
						+ "				(8, 'Auditor', 8004),\n"
						+ "				(8, 'Manager assistant', 8004),\n"
						+ "				(8, 'Workshop 2 worker', 8004),\n"
						+ "				(8, 'Workshop 1 worker', 8004);\n;",
						
						
						
						"/* process lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (12001, 'soberano.stage.starting', 12),\n"
						+ "		(12002, 'Enabled', 12),\n"
						+ "		(12003, 'Disabled', 12);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (12001, 'Add', 12, 12001, 12002, 'false'),\n"
						+ "		(12002, 'Apply', 12, 12002, 12002, 'false'),\n"
						+ "		(12003, 'Disable', 12, 12002, 12003, 'false'),\n"
						+ "		(12004, 'Check', 12, 12002, 12002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (12, 'Technologist', 12001),\n"
						+ "				(12, 'Technologist', 12002),\n"
						+ "				(12, 'Technologist', 12003),\n"
						+ "				(12, 'Accounter', 12004),\n"
						+ "				(12, 'Shift manager', 12004),\n"	
						+ "				(12, 'Manager', 12004),\n"
						+ "				(12, 'Workshop 1 worker', 12004),\n"
						+ "				(12, 'Workshop 2 worker', 12004),\n"
						+ "				(12, 'Storekeeper', 12004),\n"
						+ "				(12, 'Auditor', 12004);",
						
						
						
						"/* acquirable material lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (7001, 'soberano.stage.starting', 7),\n"
						+ "		(7002, 'Enabled', 7),\n"
						+ "		(7003, 'Disabled', 7);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (7001, 'Add', 7, 7001, 7002, 'false'),\n"
						+ "		(7002, 'Apply', 7, 7002, 7002, 'false'),\n"
						+ "		(7003, 'Disable', 7, 7002, 7003, 'false'),\n"
						+ "		(7004, 'Check', 7, 7002, 7002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (7, 'Technologist', 7001),\n"
						+ "				(7, 'Technologist', 7002),\n"
						+ "				(7, 'Technologist', 7003),\n"
						+ "				(7, 'Accounter', 7004),\n"
						+ "				(7, 'Shift manager', 7004),\n"	
						+ "				(7, 'Manager', 7004),\n"
						+ "				(7, 'Workshop 1 worker', 7004),\n"
						+ "				(7, 'Workshop 2 worker', 7004),\n"
						+ "				(7, 'Storekeeper', 7004),\n"
						+ "				(7, 'Auditor', 7004);",
						
						
						
						"/* currency lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (9001, 'soberano.stage.starting', 9),\n"
						+ "		(9002, 'Enabled', 9),\n"
						+ "		(9003, 'Disabled', 9);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (9001, 'Add', 9, 9001, 9002, 'false'),\n"
						+ "		(9002, 'Apply', 9, 9002, 9002, 'false'),\n"
						+ "		(9003, 'Disable', 9, 9002, 9003, 'false'),\n"
						+ "		(9004, 'Check', 9, 9002, 9002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (9, 'Accounter', 9001),\n"
						+ "				(9, 'Accounter', 9002),\n"
						+ "				(9, 'Accounter', 9003),\n"
						+ "				(9, 'Manager', 9004),\n"
						+ "				(9, 'Shift manager', 9004),\n"	
						+ "				(9, 'Salesclerk', 9004),\n"
						+ "				(9, 'Checker', 9004),\n"
						+ "				(9, 'Auditor', 9004);",
						
						
						
						"/* service lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (19001, 'soberano.stage.starting', 19),\n"
						+ "		(19002, 'Enabled', 19),\n"
						+ "		(19003, 'Disabled', 19);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (19001, 'Add', 19, 19001, 19002, 'false'),\n"
						+ "		(19002, 'Apply', 19, 19002, 19002, 'false'),\n"
						+ "		(19003, 'Disable', 19, 19002, 19003, 'false'),\n"
						+ "		(19004, 'Check', 19, 19002, 19002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (19, 'Manager', 19001),\n"
						+ "				(19, 'Manager', 19002),\n"
						+ "				(19, 'Manager', 19003),\n"
						+ "				(19, 'Accounter', 19004),\n"
						+ "				(19, 'Shift manager', 19004),\n"
						+ "				(19, 'Auditor', 19004);",
						
						
						
						"/* material expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (10001, 'soberano.stage.starting', 10),\n"
						+ "		(10002, 'Recorded', 10),\n"
						+ "		(10003, 'Canceled', 10);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (10001, 'Add', 10, 10001, 10002, 'false'),\n"
						+ "		(10003, 'Cancel', 10, 10002, 10003, 'false'),\n"
						+ "		(10004, 'Check', 10, 10002, 10002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (10, 'Procurement worker', 10001),\n"
						+ "				(10, 'Shift manager', 10001),\n"	
						+ "				(10, 'Manager', 10001),\n"
						+ "				(10, 'Shift manager', 10003),\n"	
						+ "				(10, 'Manager', 10003),\n"
						+ "				(10, 'Accounter', 10004),\n"
						+ "				(10, 'Storekeeper', 10004),\n"
						+ "				(10, 'Auditor', 10004);",
						
						
						
						"/* service expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (18001, 'soberano.stage.starting', 18),\n"
						+ "		(18002, 'Recorded', 18),\n"
						+ "		(18003, 'Canceled', 18);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (18001, 'Add', 18, 18001, 18002, 'false'),\n"
						+ "		(18003, 'Cancel', 18, 18002, 18003, 'false'),\n"
						+ "		(18004, 'Check', 18, 18002, 18002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (18, 'Procurement worker', 18001),\n"
						+ "				(18, 'Shift manager', 18001),\n"	
						+ "				(18, 'Manager', 18001),\n"
						+ "				(18, 'Shift manager', 18003),\n"	
						+ "				(18, 'Manager', 18003),\n"
						+ "				(18, 'Accounter', 18004),\n"
						+ "				(18, 'Auditor', 18004);",
						
						
						
						"/* payroll expense lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (11001, 'soberano.stage.starting', 11),\n"
						+ "		(11002, 'Recorded', 11),\n"
						+ "		(11003, 'Canceled', 11);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (11001, 'Add', 11, 11001, 11002, 'false'),\n"
						+ "		(11003, 'Cancel', 11, 11002, 11003, 'false'),\n"
						+ "		(11004, 'Check', 11, 11002, 11002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (11, 'Shift manager', 11001),\n"	
						+ "				(11, 'Manager', 11001),\n"
						+ "				(11, 'Shift manager', 11003),\n"	
						+ "				(11, 'Manager', 11003),\n"
						+ "				(11, 'Accounter', 11004),\n"
						+ "				(11, 'Auditor', 11004);",
						
						
						
						"/* inventory operation lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (21001, 'soberano.stage.starting', 21),\n"
						+ "		(21002, 'Recorded', 21);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (21001, 'Add', 21, 21001, 21002, 'false'),\n"
						+ "		(21004, 'Check', 21, 21002, 21002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (21, 'Storekeeper', 21001),\n"
						+ "				(21, 'Storekeeper', 21004),\n"	
						+ "				(21, 'Shift manager', 21004),\n"
						+ "				(21, 'Manager', 21004),\n"
						+ "				(21, 'Accounter', 21004),\n"
						+ "				(21, 'Auditor', 21004);",
						
						
						
						"/* customer lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (22001, 'soberano.stage.starting', 22),\n"
						+ "		(22002, 'Enabled', 22),\n"
						+ "		(22003, 'Disabled', 22);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (22001, 'Add', 22, 22001, 22002, 'false'),\n"
						+ "		(22002, 'Apply', 22, 22002, 22002, 'false'),\n"
						+ "		(22003, 'Disable', 22, 22002, 22003, 'false'),\n"
						+ "		(22004, 'Check', 22, 22002, 22002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (22, 'Community manager', 22001),\n"
						+ "				(22, 'Community manager', 22002),\n"
						+ "				(22, 'Community manager', 22003),\n"
						+ "				(22, 'Salesclerk', 22004),\n"
						+ "				(22, 'Shift manager', 22004),\n"	
						+ "				(22, 'Manager', 22004),\n"
						+ "				(22, 'Manager assistant', 22004),\n"
						+ "				(22, 'Checker', 22004),\n"
						+ "				(22, 'Auditor', 22004);",
						
						
						
						"/* deposit lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (23001, 'soberano.stage.starting', 23),\n"
						+ "		(23002, 'Recorded', 23);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (23001, 'Add', 23, 23001, 23002, 'false'),\n"
						+ "		(23004, 'Check', 23, 23002, 23002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (23, 'Checker', 23001),\n"
						+ "				(23, 'Manager assistant', 23001),\n"
						+ "				(23, 'Accounter', 23004),\n"
						+ "				(23, 'Shift manager', 23004),\n"	
						+ "				(23, 'Manager', 23004),\n"
						+ "				(23, 'Auditor', 23004);",
						
						
						
						"/* withdrawal lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (24001, 'soberano.stage.starting', 24),\n"
						+ "		(24002, 'Recorded', 24);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (24001, 'Add', 24, 24001, 24002, 'false'),\n"
						+ "		(24004, 'Check', 24, 24002, 24002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (24, 'Checker', 24001),\n"
						+ "				(24, 'Manager assistant', 24001),\n"
						+ "				(24, 'Accounter', 24004),\n"
						+ "				(24, 'Shift manager', 24004),\n"	
						+ "				(24, 'Manager', 24004),\n"
						+ "				(24, 'Auditor', 24004);",
						
						
						
						"/* receivable lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (25001, 'soberano.stage.starting', 25),\n"
						+ "		(25002, 'Recorded', 25),\n"
						+ "		(25003, 'Honored', 25),\n"
						+ "		(25004, 'Dishonored', 25);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (25001, 'Record', 25, 25001, 25002, 'false'),\n"
						+ "		(25002, 'Collect', 25, 25002, 25002, 'false'),\n"
						+ "		(25003, 'Honor', 25, 25002, 25003, 'false'),\n"
						+ "		(25004, 'Dishonor', 25, 25002, 25004, 'false'),\n"
						+ "		(25005, 'Check', 25, 25002, 25002, 'false'),\n"
						+ "		(25006, 'Check', 25, 25003, 25003, 'false'),\n"
						+ "		(25007, 'Check', 25, 25004, 25004, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (25, 'Manager assistant', 25001),\n"
						+ "				(25, 'Checker', 25002),\n"
						+ "				(25, 'Manager assistant', 25002),\n"
						+ "				(25, 'Manager assistant', 25003),\n"
						+ "				(25, 'Manager assistant', 25004),\n"
						+ "				(25, 'Manager assistant', 25005),\n"
						+ "				(25, 'Manager assistant', 25006),\n"
						+ "				(25, 'Manager assistant', 25007),\n"
						+ "				(25, 'Shift manager', 25005),\n"
						+ "				(25, 'Shift manager', 25006),\n"
						+ "				(25, 'Shift manager', 25007),\n"
						+ "				(25, 'Manager', 25005),\n"
						+ "				(25, 'Manager', 25006),\n"
						+ "				(25, 'Manager', 25007),\n"
						+ "				(25, 'Auditor', 25005),\n"
						+ "				(25, 'Auditor', 25006),\n"
						+ "				(25, 'Auditor', 25007),\n"
						+ "				(25, 'Accounter', 25005),\n"
						+ "				(25, 'Accounter', 25006),\n"
						+ "				(25, 'Accounter', 25007);",
						
						
						
						"/* balancing lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (26001, 'soberano.stage.starting', 26),\n"
						+ "		(26002, 'Recorded', 26);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (26001, 'Add', 26, 26001, 26002, 'false'),\n"
						+ "		(26004, 'Check', 26, 26002, 26002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (26, 'Shift manager', 26001),\n"
						+ "				(26, 'Manager', 26001),\n"
						+ "				(26, 'Accounter', 26001),\n"
						+ "				(26, 'Shift manager', 26004),\n"	
						+ "				(26, 'Manager', 26004),\n"
						+ "				(26, 'Accounter', 26004),\n"
						+ "				(26, 'Auditor', 26004);",
						
						
						
						"/* process run lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (27001, 'soberano.stage.starting', 27),\n"
						+ "		(27002, 'Ongoing', 27),\n"
						+ "		(27003, 'Canceled', 27),\n"
						+ "		(27004, 'Closed', 27);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (27001, 'Add WS1', 27, 27001, 27002, 'false'),\n"
						+ "		(27002, 'Add WS2', 27, 27001, 27002, 'false'),\n"
						+ "		(27003, 'Close WS1', 27, 27002, 27004, 'false'),\n"
						+ "		(27004, 'Close WS2', 27, 27002, 27004, 'false'),\n"
						+ "		(27005, 'Cancel', 27, 27002, 27003, 'false'),\n"
						+ "		(27006, 'Check', 27, 27002, 27002, 'false'),\n"
						+ "		(27007, 'Check', 27, 27003, 27003, 'false'),\n"
						+ "		(27008, 'Check', 27, 27004, 27004, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (27, 'Workshop 1 worker', 27001),\n"
						+ "				(27, 'Workshop 2 worker', 27002),\n"
						+ "				(27, 'Workshop 1 worker', 27003),\n"
						+ "				(27, 'Workshop 2 worker', 27004),\n"
						+ "				(27, 'Manager', 27005),\n"
						+ "				(27, 'Shift manager', 27005),\n"
						+ "				(27, 'Accounter', 27006),\n"
						+ "				(27, 'Auditor', 27006),\n"
						+ "				(27, 'Technologist', 27006),\n"
						+ "				(27, 'Accounter', 27007),\n"
						+ "				(27, 'Auditor', 27007),\n"
						+ "				(27, 'Technologist', 27007),\n"
						+ "				(27, 'Manager', 27007),\n"
						+ "				(27, 'Shift manager', 27007),\n"
						+ "				(27, 'Workshop 1 worker', 27007),\n"
						+ "				(27, 'Workshop 2 worker', 27007),\n"
						+ "				(27, 'Accounter', 27008),\n"
						+ "				(27, 'Auditor', 27008),\n"
						+ "				(27, 'Technologist', 27008),\n"
						+ "				(27, 'Manager', 27008),\n"
						+ "				(27, 'Shift manager', 27008),\n"
						+ "				(27, 'Workshop 1 worker', 27008),\n"
						+ "				(27, 'Workshop 2 worker', 27008);",
						
						
						
						"/* shift closure lifecycle */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (20001, 'soberano.stage.starting', 20),\n"
						+ "		(20002, 'Recorded', 20),\n"
						+ "		(20003, 'Canceled', 20);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (20001, 'Add', 20, 20001, 20002, 'false'),\n"
						+ "		(20002, 'Cancel', 20, 20002, 20003, 'false'),\n"
						+ "		(20003, 'Check', 20, 20002, 20002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (20, 'Shift manager', 20001),\n"
						+ "				(20, 'Manager assistant', 20001),\n"
						+ "				(20, 'Accounter', 20001),\n"
						+ "				(20, 'Auditor', 20001),\n"
						+ "				(20, 'Manager', 20001),\n"
						+ "				(20, 'Shift manager', 20002),\n"
						+ "				(20, 'Manager assistant', 20002),\n"
						+ "				(20, 'Accounter', 20002),\n"
						+ "				(20, 'Auditor', 20002),\n"
						+ "				(20, 'Manager', 20002);",
						
						
						
						"/* printer profile */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (28001, 'soberano.stage.starting', 28),\n"
						+ "		(28002, 'Enabled', 28),\n"
						+ "		(28003, 'Disabled', 28);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (28001, 'Add', 28, 28001, 28002, 'false'),\n"
						+ "		(28002, 'Apply', 28, 28002, 28002, 'false'),\n"
						+ "		(28003, 'Disable', 28, 28002, 28003, 'false'),\n"
						+ "		(28004, 'Check', 28, 28002, 28002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (28, 'System admin', 28001),\n"
						+ "				(28, 'System admin', 28002),\n"
						+ "				(28, 'System admin', 28003),\n"
						+ "				(28, 'Auditor', 28004);",
						
						
						
						"/* production line */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (29001, 'soberano.stage.starting', 29),\n"
						+ "		(29002, 'Enabled', 29),\n"
						+ "		(29003, 'Disabled', 29);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (29001, 'Add', 29, 29001, 29002, 'false'),\n"
						+ "		(29002, 'Apply', 29, 29002, 29002, 'false'),\n"
						+ "		(29003, 'Disable', 29, 29002, 29003, 'false'),\n"
						+ "		(29004, 'Check', 29, 29002, 29002, 'false'),\n"
						+ "		(29005, 'Manage allocation', 29, 29002, 29002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (29, 'Technologist', 29001),\n"
						+ "				(29, 'Technologist', 29002),\n"
						+ "				(29, 'Technologist', 29003),\n"
						+ "				(29, 'Accounter', 29004),\n"
						+ "				(29, 'Shift manager', 29004),\n"	
						+ "				(29, 'Manager', 29004),\n"
						+ "				(29, 'Workshop 1 worker', 29004),\n"
						+ "				(29, 'Workshop 2 worker', 29004),\n"
						+ "				(29, 'Workshop 1 worker', 29005),\n"
						+ "				(29, 'Workshop 2 worker', 29005),\n"
						+ "				(29, 'Manager assistant', 29004),\n"
						+ "				(29, 'Auditor', 29004);",
						
						
						
						"/* delivery provider */\n"
						+ "\n"
						+ "--stage filters\n"
						+ "INSERT INTO \"metamodel\".\"StageFilter\" (\"StageFilterHasStageFilterId\",\n"
						+ "					\"This_filters_by_FilterExpression\", \n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\")\n"
						+ "	VALUES (30001, 'soberano.stage.starting', 30),\n"
						+ "		(30002, 'Enabled', 30),\n"
						+ "		(30003, 'Disabled', 30);\n"
						+ "			\n"
						+ "--decisions\n"
						+ "INSERT INTO \"metamodel\".\"Decision\" (\"DecisionHasDecisionId\",\n"
						+ "					\"This_has_Name\",\n"
						+ "					\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "					\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\",\n"
						+ "					\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\",\n"
						+ "					\"Decision_is_contextual\")\n"
						+ "	VALUES (30001, 'Add', 30, 30001, 30002, 'false'),\n"
						+ "		(30002, 'Apply', 30, 30002, 30002, 'false'),\n"
						+ "		(30003, 'Disable', 30, 30002, 30003, 'false'),\n"
						+ "		(30004, 'Check', 30, 30002, 30002, 'false');\n"
						+ "			\n"
						+ "--responsability filters\n"
						+ "INSERT INTO \"metamodel\".\"ResponsibilityFilter\" (\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\",\n"
						+ "							\"This_filters_by_FilterExpression\",\n"
						+ "							\"This_filters_by_Decision_with_DecisionHasDecisionId\")\n"
						+ "			VALUES (30, 'Manager', 30001),\n"
						+ "				(30, 'Manager', 30002),\n"
						+ "				(30, 'Manager', 30003),\n"
						+ "				(30, 'Shift manager', 30001),\n"
						+ "				(30, 'Shift manager', 30002),\n"
						+ "				(30, 'Shift manager', 30003),\n"
						+ "				(30, 'Accounter', 30004),\n"
						+ "				(30, 'Salesclerk', 30004),\n"
						+ "				(30, 'Community manager', 30004),\n"
						+ "				(30, 'Auditor', 30004);",
						
						
												
						"/* cash register lifecycle. no lifecycle needed. internal-use-only object. nobody makes decisions on it. */\n",
						
						
						
						"/* unit lifecycle. for the time being, measurement units are unchangeable. */\n",
						
						
						
						////////////////////
						// business facts //
						////////////////////
						
						//singletons
						
						"--insert the only one activity object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_1 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Activity\"(\n"
						+ "	\"ActivityHasActivityId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 1);",
						
						
						
						"--insert the only one configuration object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_2 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Configuration\"( \n"
						+ "	\"ConfigurationHasConfigurationId\", \n" 
						+ " \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ " \"This_has_ShiftClosureHours\", \n"
						+ " \"This_has_ShiftClosureMinutes\", \n"
						+ " \"This_has_SurchargeRate\") \n"
						+ "	VALUES (1, 2, 8, 0, 10);",
						
						
						
						"--insert the only one catalog object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_3 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"Catalog\"(\n"
						+ "	\"CatalogHasCatalogId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 3);",
						
						
						
						"--insert the only one cash register object instance\n"
						+ "--a trigger implementing RULE_EXISTENCE_4 is responsible for inserting the corresponding entity type instance\n"
						+ "INSERT INTO soberano.\"CashRegister\"(\n"
						+ "	\"CashRegisterHasCashRegisterId\", \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "	VALUES (1, 4);",
						
						
						
						"INSERT INTO soberano.\"PaymentProcessor\"(\n"
						+ "	\"PaymentProcessorHasPaymentProcessorId\", \"This_has_Name\")\n"
						+ "	VALUES (1, 'Opennode'),\n"
						+ "	 		(2, 'Tropipay'),\n"
						+ "	 		(3, 'Manicato Money (MAN)'),\n"
						+ "			(4, 'Transfermóvil');",
						
						
						
						//measurement units
						"INSERT INTO soberano.\"Magnitude\"(\n"
						+ "	\"MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES (1), (2), (3);",
						
						
						
						"INSERT INTO soberano.\"MagnitudeHasNameInLanguage\"(\n"
						+ "	\"Language\", \"Name\", \"MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES ('es', 'cantidad discreta', '1'),\n"
						+ "			('es', 'peso', '2'),\n"
						+ "			('es', 'volumen', '3'),\n"
						+ "			('en', 'discrete quantity', '1'),\n"
						+ "			('en', 'weight', '2'),\n"
						+ "			('en', 'volume', '3');",
						
						
						
						"INSERT INTO metamodel.\"EntityTypeInstance\" (\"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "																			\"This_is_created_at_Timestamp\", \n"
						+ "																			\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "																			\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "																			\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "																			\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "									VALUES (5, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(6, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(7, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(8, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(9, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(10, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(11, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1),\n"
						+ "											(12, now(), '_8B5F06D3-F307-49D7-99F1-57541D8A2B35', 1, 2, 1);",
						
						
						
						"INSERT INTO soberano.\"Unit\"(\n"
						+ "	\"UnitHasUnitId\", \"This_is_identified_by_EntityTypeInstance_id\", \"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\")\n"
						+ "	VALUES (1, 5, 1),\n"
						+ "			(2, 6, 2),\n"
						+ "			(3, 7, 2),\n"
						+ "			(4, 8, 2),\n"
						+ "			(5, 9, 2),\n"
						+ "			(6, 10, 2),\n"
						+ "			(7, 11, 3),\n"
						+ "			(8, 12, 3);",
						
						
						
						"INSERT INTO soberano.\"UnitHasAcronymInLanguage\"(\n"
						+ "	\"Language\", \"Acronym\", \"UnitHasUnitId\")\n"
						+ "	VALUES ('es', 'U', 1),\n"
						+ "			('es', 'kg', 2),\n"
						+ "			('es', 'g', 3),\n"
						+ "			('es', 'mg', 4),\n"
						+ "			('es', 'lb', 5),\n"
						+ "			('es', 'oz', 6),\n"
						+ "			('es', 'l', 7),\n"
						+ "			('es', 'ml', 8),\n"
						+ "			('en', 'pcs', 1),\n"
						+ "			('en', 'kg', 2),\n"
						+ "			('en', 'g', 3),\n"
						+ "			('en', 'mg', 4),\n"
						+ "			('en', 'lb', 5),\n"
						+ "			('en', 'oz', 6),\n"
						+ "			('en', 'l', 7),\n"
						+ "			('en', 'ml', 8);",
						
						
						
						"INSERT INTO soberano.\"UnitHasNameInLanguage\"(\n"
						+ "	\"Language\", \"Name\", \"UnitHasUnitId\")\n"
						+ "	VALUES ('es', 'unidad', 1),\n"
						+ "			('es', 'kilogramo', 2),\n"
						+ "			('es', 'gramo', 3),\n"
						+ "			('es', 'miligramo', 4),\n"
						+ "			('es', 'libra', 5),\n"
						+ "			('es', 'onza', 6),\n"
						+ "			('es', 'litro', 7),\n"
						+ "			('es', 'milititro', 8),\n"
						+ "			('en', 'piece', 1),\n"
						+ "			('en', 'kilogram', 2),\n"
						+ "			('en', 'gram', 3),\n"
						+ "			('en', 'milligram', 4),\n"
						+ "			('en', 'pound', 5),\n"
						+ "			('en', 'ounce', 6),\n"
						+ "			('en', 'liter', 7),\n"
						+ "			('en', 'milliliter', 8);",
						
						
						
						"INSERT INTO soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\"(\n"
						+ "	\"Factor\", \"Unit1_UnitHasUnitId\", \"Unit2_UnitHasUnitId\")\n"
						+ "	VALUES (1, 1, 1), /*pcs to pcs*/\n"
						+ "			(1, 2, 2), /*kg to kg*/\n"
						+ "			(1000, 2, 3), /*kg to g*/\n"
						+ "			(1000000, 2, 4), /*kg to mg*/\n"
						+ "			(2.2046226218, 2, 5), /*kg to lb*/\n"
						+ "			(35.2739619496, 2, 6), /*kg to oz*/\n"
						+ "			(1, 7, 7), /*l to l*/\n"
						+ "			(1000, 7, 8), /*l to ml*/"
						+ "			(1, 8, 8), /*ml to ml*/"
						+ "			(0.001, 8, 7), /*ml to l*/"
						+ "			(1, 3, 3), /*g to g*/\n"
						+ "			(0.001, 3, 2), /*g to kg*/\n"
						+ "			(1000, 3, 4), /*g to mg*/\n"
						+ "			(0.00220462, 3, 5), /*g to lb*/\n"
						+ "			(0.035274, 3, 6), /*g to oz*/\n"
						+ "			(1, 5, 5), /*lb to lb*/\n"
						+ "			(0.453592, 5, 2), /*lb to kg*/\n"
						+ "			(453592, 5, 4), /*lb to mg*/\n"
						+ "			(453.592, 5, 3), /*lb to g*/\n"
						+ "			(16, 5, 6), /*lb to oz*/\n"
						+ "			(1, 4, 4), /*mg to mg*/\n"
						+ "			(0.000001, 4, 2), /*mg to kg*/\n"
						+ "			(0.0000022046, 4, 5), /*mg to lb*/\n"
						+ "			(0.001, 4, 3), /*mg to g*/\n"
						+ "			(0.0000352739619496, 4, 6), /*mg to oz*/\n"
						+ "			(1, 6, 6), /*oz to oz*/\n"
						+ "			(0.0283495, 6, 2), /*oz to kg*/\n"
						+ "			(0.0625, 6, 5), /*oz to lb*/\n"
						+ "			(28.3495, 6, 3), /*oz to g*/\n"
						+ "			(28349.5, 6, 4); /*oz to mg*/\n",
						
						
						
						"INSERT INTO metamodel.\"EntityTypeInstance\"(\"EntityTypeInstanceHasEntityTypeInstanceId\", \n"
						+ "											\"This_is_created_at_Timestamp\", \n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\", \n"
						+ "											\"This_is_owned_by_Authority_with_AuthorityHasAuthorityId\", \n"
						+ "											\"This_is_in_Stage_with_StageHasStageId\", \n"
						+ "											\"This_is_created_by_User_with_UserHasUserId\")\n"
						+ "	VALUES (13,\n"
						+ "			now() - INTERVAL '10 day',\n"
						+ "			'_26546A60-384E-49D7-912B-D5D174CEEE14',\n"
						+ "		   1,\n"
						+ "		   4,\n"
						+ "		   1);",
						
						
						
						"INSERT INTO soberano.\"ShiftClosure\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "									\"This_is_of_Shift\", \n"
						+ "									\"This_has_ClosureTime\", \n"
						+ "									\"Report_is_of_This\")\n"
						+ "	VALUES (13, \n"
						+ "			now() - INTERVAL '10 day', \n"
						+ "			now() - INTERVAL '10 day' + INTERVAL '6 hours', \n"
						+ "			'');",
						
						
						
						//////////////////////
						// business queries //
						//////////////////////
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_create\"(\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	responsibilities integer[],\n"
						+ "	authorities integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		workerId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		workerId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Worker', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--create user. new user's loginname is its email address.\n"
						+ "			SELECT \"metamodel\".\"fn_User_insert\"(emailAddress, true) INTO userId;\n"
						+ "			\n"
						+ "			--assign responsibilities\n"
						+ "			PERFORM \"metamodel\".\"fn_User_assignToResponsibilities\"(userId, responsibilities, authorities);\n"
						+ "			\n"
						+ "			--create postal address\n"
						+ "			INSERT INTO soberano.\"PostalAddress\"(\"This_includes_Town\", \n"
						+ "												 \"This_includes_PostalCode\", \n"
						+ "												 \"This_includes_AddressString\", \n"
						+ "												 \"This_includes_Latitute\", \n"
						+ "												 \"This_includes_Longitude\", \n"
						+ "												 \"This_includes_City\", \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\")\n"
						+ "				VALUES (town,\n"
						+ "					   postalCode,\n"
						+ "					   address,\n"
						+ "					   latitude,\n"
						+ "					   longitude,\n"
						+ "					   city,\n"
						+ "					   municipalityId) \n"
						+ "				RETURNING \"PostalAddressHasPostalAddressId\" INTO postalAddressId;\n"
						+ "				\n"
						+ "			--create contact data\n"
						+ "			INSERT INTO soberano.\"ContactData\"(\"This_includes_PhoneNumber\", \n"
						+ "											   \"This_includes_EmailAddress\", \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\")\n"
						+ "				VALUES (mobilePhoneNumber,\n"
						+ "					   emailAddress,\n"
						+ "					   postalAddressId) \n"
						+ "				RETURNING \"ContactDataHasContactDataId\" INTO contactDataId;\n"
						+ "				\n"
						+ "			--create worker\n"
						+ "			INSERT INTO soberano.\"Worker\"(\"This_has_LastName\", \n"
						+ "										  \"This_has_FirstName\", \n"
						+ "										  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										  \"This_has_ContactData_with_ContactDataHasContactDataId\",\n"
						+ "										  \"This_has_LoginName\")\n"
						+ "				VALUES (lastName,\n"
						+ "					   firstName,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   contactDataId,\n"
						+ "					   emailAddress) \n"
						+ "				RETURNING \"WorkerHasWorkerId\" INTO workerId;\n"
						+ "		END IF;\n"
						+ "		RETURN workerId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		--in domainObjectName is returned the qualified name of the worker\n"
						+ "		RETURN QUERY SELECT \"WorkerHasWorkerId\", qualifiedName\n"
						+ "						FROM (SELECT DISTINCT \"WorkerHasWorkerId\", \n"
						+ "							  				(\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\") qualifiedName\n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(6, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Worker\" worker\n"
						+ "								ON instance.\"InstanceId\" = worker.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							INNER JOIN metamodel.\"User\" u\n"
						+ "								ON u.\"This_has_LoginName\" = worker.\"This_has_LoginName\") sq\n"
						+ "						ORDER BY qualifiedName;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_modify\"(\n"
						+ "	workerid integer,\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	responsibilities integer[],\n"
						+ "	authorities integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		decisionId integer;\n"
						+ "		userName character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "						\"UserHasUserId\",\n"
						+ "						\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\",\n"
						+ "						\"ContactDataHasContactDataId\",\n"
						+ "				  		objecttable.\"This_has_LoginName\" userName\n"
						+ "					FROM soberano.\"Worker\" objecttable\n"
						+ "						INNER JOIN metamodel.\"User\" userdata\n"
						+ "							ON objecttable.\"This_has_LoginName\" = userdata.\"This_has_LoginName\"\n"
						+ "						INNER JOIN soberano.\"ContactData\" contactdata\n"
						+ "							ON objecttable.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contactdata.\"ContactDataHasContactDataId\"\n"
						+ "					WHERE \"WorkerHasWorkerId\" = workerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				userId,\n"
						+ "				postalAddressId,\n"
						+ "				contactDataId,\n"
						+ "				userName,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND userId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the worker\n"
						+ "			UPDATE soberano.\"Worker\" \n"
						+ "				SET \"This_has_LastName\" = lastname, \n"
						+ "					\"This_has_FirstName\" = firstname\n"
						+ "				WHERE \"WorkerHasWorkerId\" = workerid;\n"
						+ "		\n"
						+ "			--assign responsibilities\n"
						+ "			PERFORM \"metamodel\".\"fn_User_assignToResponsibilities\"(userId, responsibilities, authorities);\n"
						+ "			\n"
						+ "			--update postal address\n"
						+ "			UPDATE soberano.\"PostalAddress\" SET \"This_includes_Town\" = town, \n"
						+ "												 \"This_includes_PostalCode\" = postalcode, \n"
						+ "												 \"This_includes_AddressString\" = address, \n"
						+ "												 \"This_includes_Latitute\" = latitude, \n"
						+ "												 \"This_includes_Longitude\" = longitude, \n"
						+ "												 \"This_includes_City\" = city, \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipalityid \n"
						+ "				WHERE \"PostalAddressHasPostalAddressId\" = postalAddressId;\n"
						+ "				\n"
						+ "			--update contact data\n"
						+ "			UPDATE soberano.\"ContactData\" SET \"This_includes_PhoneNumber\" = mobilePhoneNumber, \n"
						+ "											   \"This_includes_EmailAddress\" = emailAddress, \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = postalAddressId\n"
						+ "				WHERE \"ContactDataHasContactDataId\" = contactDataId;\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_WORKER_tt ' || CAST(userId AS text) || ' : ' || userName || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_disable\"(\n"
						+ "	workerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		userId integer;\n"
						+ "		decisionId integer;\n"
						+ "		userName character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "						\"UserHasUserId\",\n"
						+ "						objecttable.\"This_has_LoginName\" userName\n"
						+ "					FROM soberano.\"Worker\" objecttable\n"
						+ "						INNER JOIN metamodel.\"User\" userdata\n"
						+ "							ON objecttable.\"This_has_LoginName\" = userdata.\"This_has_LoginName\"\n"
						+ "					WHERE \"WorkerHasWorkerId\" = workerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				userId,\n"
						+ "				userName,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND userId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_WORKER_tt ' || CAST(userId AS text) || ' : ' || userName || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Country_getAll\"()\n"
						+ "	RETURNS TABLE(\"domainObjectStringId\" character(2), \"domainObjectName\" character varying) AS\n"
						+ "	$BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"CountryHasCountryCode\", \"This_has_Name\" FROM soberano.\"Country\" ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;\n"
						+ "	$BODY$\n"
						+ "	LANGUAGE plpgsql VOLATILE COST 100 ROWS 300;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Province_getAll\"(countrycode character)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"ProvinceHasProvinceId\", \"This_has_Name\" \n"
						+ "			FROM soberano.\"Province\" \n"
						+ "			WHERE \"This_belongs_to_Country_with_CountryHasCountryCode\" = countryCode\n"
						+ "			ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Municipality_getAll\"(provinceId integer)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 200\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"MunicipalityHasMunicipalityId\", \"This_has_Name\" \n"
						+ "			FROM soberano.\"Municipality\" \n"
						+ "			WHERE \"This_belongs_to_Province_with_ProvinceHasProvinceId\" = provinceId\n"
						+ "			ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Worker_get\"(workerid integer,\n"
						+ "													loginname character varying)\n"
						+ "    RETURNS TABLE(\"workerId\" integer, \n"
						+ "				  \"entityTypeInstanceId\" integer, \n"
						+ "				  \"loginName\" character varying, \n"
						+ "				  \"firstName\" character varying, \n"
						+ "				  \"lastName\" character varying, \n"
						+ "				  password character varying, \n"
						+ "				  \"mobilePhoneNumber\" character varying, \n"
						+ "				  \"countryCode\" character, \n"
						+ "				  address character varying, \n"
						+ "				  \"postalCode\" character varying, \n"
						+ "				  town character varying, \n"
						+ "				  \"municipalityId\" integer, \n"
						+ "				  city character varying, \n"
						+ "				  \"provinceId\" integer, \n"
						+ "				  latitude double precision, \n"
						+ "				  longitude double precision,\n"
						+ "				  \"authorityId\" integer,\n"
						+ "				  \"authorityName\" character varying,\n"
						+ "				  \"responsibilityId\" integer,\n"
						+ "				  \"responsibilityName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"WorkerHasWorkerId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										workeruser.\"This_has_LoginName\",\n"
						+ "										\"This_has_FirstName\",\n"
						+ "										\"This_has_LastName\",\n"
						+ "										CAST('' AS character varying),\n"
						+ "										\"This_includes_PhoneNumber\",\n"
						+ "										\"This_belongs_to_Country_with_CountryHasCountryCode\",\n"
						+ "										\"This_includes_AddressString\",\n"
						+ "										\"This_includes_PostalCode\",\n"
						+ "										\"This_includes_Town\",\n"
						+ "										\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\",\n"
						+ "										\"This_includes_City\",\n"
						+ "										\"This_belongs_to_Province_with_ProvinceHasProvinceId\",\n"
						+ "										\"This_includes_Latitute\",\n"
						+ "										\"This_includes_Longitude\",\n"
						+ "									 	1,\n"
						+ "										CAST('soberano.authority.top' AS character varying),\n"
						+ "										responsibility.\"ResponsibilityHasResponsibilityId\",\n"
						+ "										responsibility.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Worker\" worker\n"
						+ "									INNER JOIN soberano.\"ContactData\" contact\n"
						+ "										ON worker.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contact.\"ContactDataHasContactDataId\"\n"
						+ "									INNER JOIN soberano.\"PostalAddress\" address\n"
						+ "										ON contact.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = address.\"PostalAddressHasPostalAddressId\"\n"
						+ "									INNER JOIN soberano.\"Municipality\" municipality\n"
						+ "										ON address.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipality.\"MunicipalityHasMunicipalityId\"\n"
						+ "									INNER JOIN soberano.\"Province\" province\n"
						+ "										ON municipality.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = province.\"ProvinceHasProvinceId\"\n"
						+ "									INNER JOIN metamodel.\"User\" workeruser\n"
						+ "										ON worker.\"This_has_LoginName\" = workeruser.\"This_has_LoginName\"\n"
						+ "									INNER JOIN metamodel.\"UserIsAssignedToResponsibilityForAuthority\" userassignment\n"
						+ "										ON userassignment.\"UserHasUserId\" = workeruser.\"UserHasUserId\"\n"
						+ "									INNER JOIN metamodel.\"Responsibility\" responsibility\n"
						+ "										ON userassignment.\"ResponsibilityHasResponsibilityId\" = responsibility.\"ResponsibilityHasResponsibilityId\" \n"
						+ "								WHERE \"WorkerHasWorkerId\" = workerid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_create\"(\n"
						+ "	countercode character varying,\n"
						+ "	numberofreceivers integer,\n"
						+ "	issurcharged boolean,\n"
						+ "	isenabled boolean,\n"
						+ "	onlyOneOrderIsPermitted boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		counterId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		counterId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Counter', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Counter\"(\"This_has_Counter_code\", \n"
						+ "										   \"This_has_space_for_NumberOfReceivers\", \n"
						+ "										   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										   \"Counter_is_surcharged\", \n"
						+ "										   \"Counter_is_enabled\",\n"
						+ "										   \"only_one_order_is_permitted_in_Counter\")\n"
						+ "				VALUES (counterCode,\n"
						+ "					   numberOfReceivers,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   isSurcharged,\n"
						+ "					   isEnabled,\n"
						+ "					   onlyOneOrderIsPermitted)\n"
						+ "				RETURNING \"CounterHasCounterId\" INTO counterId;\n"
						+ "		END IF;\n"
						+ "		RETURN counterId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_disable\"(\n"
						+ "	counterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				\"This_has_Counter_code\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Counter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CounterHasCounterId\" = counterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_COUNTER_tt ' || CAST(counterid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_get\"(\n"
						+ "	counterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"counterId\" integer, \"entityTypeInstanceId\" integer, \"counterCode\" character varying, \n"
						+ "				  \"numberOfReceivers\" integer, \"isSurcharged\" boolean, \"isEnabled\" boolean,\n"
						+ "				  \"onlyOneOrderIsPermitted\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CounterHasCounterId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Counter_code\",\n"
						+ "										\"This_has_space_for_NumberOfReceivers\",\n"
						+ "										\"Counter_is_surcharged\",\n"
						+ "										\"Counter_is_enabled\",\n"
						+ "										\"only_one_order_is_permitted_in_Counter\"\n"
						+ "								FROM soberano.\"Counter\" counter\n"
						+ "								WHERE \"CounterHasCounterId\" = counterid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CounterHasCounterId\", \"This_has_Counter_code\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(2, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Counter\" counter\n"
						+ "								ON instance.\"InstanceId\" = counter.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Counter_code\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_getAllForOrder\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"counterCode\" character varying, \n"
						+ "				  \"numberOfReceivers\" integer, \n"
						+ "				  \"isSurcharged\" boolean, \n"
						+ "				  \"isEnabled\" boolean, \n"
						+ "				  \"isFree\" boolean,\n"
						+ "				  \"onlyOneOrderIsPermitted\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT counter.\"This_has_Counter_code\",\n"
						+ "							counter.\"This_has_space_for_NumberOfReceivers\",\n"
						+ "							counter.\"Counter_is_surcharged\",\n"
						+ "							counter.\"Counter_is_enabled\",\n"
						+ "							NOT EXISTS(SELECT * FROM soberano.\"OrderOccupiesCounter\" ooc\n"
						+ "												INNER JOIN soberano.\"Order\" ord\n"
						+ "													ON ord.\"OrderHasOrderId\" = ooc.\"OrderHasOrderId\"\n"
						+ "														AND ooc.\"CounterHasCounterId\" = counter.\"CounterHasCounterId\"\n"
						+ "												INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "													ON ord.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "\n"
						+ "														--the order is in course\n"
						+ "														AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3),\n"
						+ "							counter.\"only_one_order_is_permitted_in_Counter\"\n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(2, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Counter\" counter\n"
						+ "								ON instance.\"InstanceId\" = counter.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						WHERE counter.\"Counter_is_enabled\"\n"
						+ "						ORDER BY \"This_has_Counter_code\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_getCountForOrder\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_Counter_getAllForOrder\"(loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Counter_modify\"(\n"
						+ "	counterid integer,\n"
						+ "	countercode character varying,\n"
						+ "	numberofreceivers integer,\n"
						+ "	issurcharged boolean,\n"
						+ "	isenabled boolean,\n"
						+ "	onlyOneOrderIsPermitted boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				\"This_has_Counter_code\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Counter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CounterHasCounterId\" = counterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the counter\n"
						+ "			UPDATE soberano.\"Counter\"\n"
						+ "				SET \"This_has_space_for_NumberOfReceivers\" = numberofreceivers, \n"
						+ "					\"This_has_Counter_code\" = countercode,\n"
						+ "					\"Counter_is_surcharged\" = issurcharged, \n"
						+ "					\"Counter_is_enabled\" = isenabled,\n"
						+ "					\"only_one_order_is_permitted_in_Counter\" = onlyOneOrderIsPermitted\n"
						+ "				WHERE \"CounterHasCounterId\"= counterid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_COUNTER_tt ' || CAST(counterid AS text) || ' : ' || countercode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_create\"(\n"
						+ "	categoryname character varying,\n"
						+ "	categoryposition integer,\n"
						+ "	isenabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		categoryId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		categoryId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('ProductCategory', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"ProductCategory\"(\"This_has_Name\",\n"
						+ "												   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "												   \"This_is_shown_in_Position\", \n"
						+ "												   \"ProductCategory_is_enabled\")\n"
						+ "				VALUES (categoryname,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   categoryposition,\n"
						+ "					   isenabled)\n"
						+ "				RETURNING \"ProductCategoryHasProductCategoryId\" INTO categoryId;\n"
						+ "		END IF;\n"
						+ "		RETURN categoryId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_disable\"(\n"
						+ "	categoryid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProductCategory\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRODUCT_CATEGORY_tt ' || CAST(categoryid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_get\"(\n"
						+ "	categoryid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"categoryId\" integer, \"entityTypeInstanceId\" integer, \"categoryName\" character varying, \"categoryPosition\" integer, \"isEnabled\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProductCategoryHasProductCategoryId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_is_shown_in_Position\",\n"
						+ "										\"ProductCategory_is_enabled\"\n"
						+ "								FROM soberano.\"ProductCategory\"\n"
						+ "								WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProductCategoryHasProductCategoryId\", \"This_has_Name\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(14, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"ProductCategory\" category\n"
						+ "								ON instance.\"InstanceId\" = category.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductCategory_modify\"(\n"
						+ "	categoryid integer,\n"
						+ "	categoryname character varying,\n"
						+ "	categoryposition integer,\n"
						+ "	isenabled boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProductCategory\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductCategoryHasProductCategoryId\" = categoryid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"ProductCategory\"\n"
						+ "				SET \"This_has_Name\" = categoryname, \n"
						+ "				\"This_is_shown_in_Position\" = categoryposition,\n"
						+ "				\"ProductCategory_is_enabled\" = isenabled\n"
						+ "				WHERE \"ProductCategoryHasProductCategoryId\" = categoryid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRODUCT_CATEGORY_tt ' || CAST(categoryid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_modify\"(\n"
						+ "	providerid integer,\n"
						+ "	providername character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Provider\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Provider\"\n"
						+ "				SET \"This_has_Name\" = providername\n"
						+ "				WHERE \"ProviderHasProviderId\" = providerid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PROVIDER_tt ' || CAST(providerid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 300\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProviderHasProviderId\", \"This_has_Name\" \n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(15, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Provider\" provider\n"
						+ "								ON instance.\"InstanceId\" = provider.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_get\"(\n"
						+ "	providerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"providerId\" integer, \"entityTypeInstanceId\" integer, \"providerName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProviderHasProviderId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\"\n"
						+ "								FROM soberano.\"Provider\"\n"
						+ "								WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_disable\"(\n"
						+ "	providerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Provider\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProviderHasProviderId\" = providerid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PROVIDER_tt ' || CAST(providerid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Provider_create\"(\n"
						+ "	providername character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		providerId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		providerId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Provider', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Provider\"(\"This_has_Name\",\n"
						+ "												   \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				VALUES (providername,\n"
						+ "					   entityTypeInstanceId)\n"
						+ "				RETURNING \"ProviderHasProviderId\" INTO providerId;\n"
						+ "		END IF;\n"
						+ "		RETURN providerId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Unit_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(acronym.\"Language\" || ' : ' || \"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "						ORDER BY acronym.\"UnitHasUnitId\", qn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Unit_getAll\"(\n"
						+ "	materialid integer,\n"
						+ "	lang character(2),\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(\"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"InventoryItem\" invitem\n"
						+ "							INNER JOIN soberano.\"Unit\" unit1\n"
						+ "								ON invitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\" = unit1.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"Unit\" unit2\n"
						+ "								ON unit1.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\" = unit2.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "								ON unit2.\"UnitHasUnitId\" = acronym.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "									AND acronym.\"Language\" = lang\n"
						+ "							INNER JOIN soberano.\"AcquirableMaterial\" acqmat\n"
						+ "								ON acqmat.\"InventoryItemHasInventoryItemCode\" = invitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND acqmat.\"AcquirableMaterialHasAcquirableMaterialId\" = materialid\n"
						+ "						ORDER BY qn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Unit_getAllForInventoryItem\"(\n"
						+ "	inventoryitemcode character varying,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(\"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"InventoryItem\" invitem\n"
						+ "							INNER JOIN soberano.\"Unit\" unit1\n"
						+ "								ON invitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\" = unit1.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"Unit\" unit2\n"
						+ "								ON unit1.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\" = unit2.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "								ON unit2.\"UnitHasUnitId\" = acronym.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "									AND acronym.\"Language\" = lang\n"
						+ "							INNER JOIN soberano.\"AcquirableMaterial\" acqmat\n"
						+ "								ON acqmat.\"InventoryItemHasInventoryItemCode\" = invitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND invitem.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "						UNION\n"
						+ "						SELECT DISTINCT acronym.\"UnitHasUnitId\",\n"
						+ "									CAST(\"Acronym\" || ' : ' || \"Name\" AS character varying) qn\n"
						+ "						FROM soberano.\"InventoryItem\" invitem\n"
						+ "							INNER JOIN soberano.\"Unit\" unit1\n"
						+ "								ON invitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\" = unit1.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"Unit\" unit2\n"
						+ "								ON unit1.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\" = unit2.\"This_is_for_Magnitude_with_MagnitudeHasMagnitudeId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" acronym\n"
						+ "								ON unit2.\"UnitHasUnitId\" = acronym.\"UnitHasUnitId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasNameInLanguage\" unitname\n"
						+ "								ON acronym.\"UnitHasUnitId\" = unitname.\"UnitHasUnitId\"\n"
						+ "									AND acronym.\"Language\" = unitname.\"Language\"\n"
						+ "									AND acronym.\"Language\" = lang\n"
						+ "							INNER JOIN soberano.\"Product\" acqmat\n"
						+ "								ON acqmat.\"InventoryItemHasInventoryItemCode\" = invitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND invitem.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode								\n"
						+ "						ORDER BY qn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_create\"(\n"
						+ "	warehousename character varying,\n"
						+ "	warehousecode character varying,\n"
						+ "	isprocurementwarehouse boolean,\n"
						+ "	issaleswarehouse boolean,\n"
						+ "	entryprocesses integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		warehouseId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		warehouseId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Warehouse', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isprocurementwarehouse, issaleswarehouse);\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Warehouse\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_is_identified_by_Code\", \n"
						+ "											 \"Warehouse_is_procurement_warehouse\", \n"
						+ "											 \"Warehouse_is_sales_warehouse\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   warehousename,\n"
						+ "					   warehousecode,\n"
						+ "					   isprocurementwarehouse,\n"
						+ "					   issaleswarehouse)\n"
						+ "				RETURNING \"WarehouseHasWarehouseId\" INTO warehouseId;\n"
						+ "				\n"
						+ "			--update warehouse's entry processes\n"
						+ "			IF array_lower(entryprocesses, 1) IS NOT NULL AND array_upper(entryprocesses, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(entryprocesses, 1) .. array_upper(entryprocesses, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProcessIsAnEntryProcessOfWarehouse\"(\"ProcessHasProcessId\",\n"
						+ "																			  \"WarehouseHasWarehouseId\")\n"
						+ "						VALUES (entryprocesses[i], \n"
						+ "								warehouseId);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--at least one warehouse must be sales warehouse\n"
						+ "			--at least one warehouse must be procurement warehouse\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(warehouseId);\n"
						+ "		END IF;\n"
						+ "		RETURN warehouseId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"WarehouseHasWarehouseId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_is_identified_by_Code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(17, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Warehouse\" warehouse\n"
						+ "											ON instance.\"InstanceId\" = warehouse.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_disable\"(\n"
						+ "	warehouseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Warehouse\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_WAREHOUSE_tt ' || CAST(warehouseid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_get\"(\n"
						+ "	warehouseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"warehouseId\" integer, \"entityTypeInstanceId\" integer, \"warehouseName\" character varying, \"warehouseCode\" character varying, \"isProcurementWarehouse\" boolean, \"isSalesWarehouse\" boolean, \"processId\" integer, \"processName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT warehouse.\"WarehouseHasWarehouseId\",\n"
						+ "										warehouse.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										warehouse.\"This_has_Name\",\n"
						+ "										\"This_is_identified_by_Code\",\n"
						+ "										\"Warehouse_is_procurement_warehouse\",\n"
						+ "										\"Warehouse_is_sales_warehouse\",\n"
						+ "										entryprocess.\"ProcessHasProcessId\",\n"
						+ "										entryprocess.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Warehouse\" warehouse\n"
						+ "									LEFT JOIN soberano.\"ProcessIsAnEntryProcessOfWarehouse\" epw\n"
						+ "										ON epw.\"WarehouseHasWarehouseId\" = warehouse.\"WarehouseHasWarehouseId\"\n"
						+ "									LEFT JOIN soberano.\"Process\" entryprocess\n"
						+ "										ON entryprocess.\"ProcessHasProcessId\" = epw.\"ProcessHasProcessId\"\n"
						+ "								WHERE warehouse.\"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(warehouse.\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Warehouse_modify\"(\n"
						+ "	warehouseid integer,\n"
						+ "	warehousename character varying,\n"
						+ "	warehousecode character varying,\n"
						+ "	isprocurementwarehouse boolean,\n"
						+ "	issaleswarehouse boolean,\n"
						+ "	entryprocesses integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Warehouse\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouseid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_1_AND_2\"(isprocurementwarehouse, issaleswarehouse);\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Warehouse\"\n"
						+ "				SET \"This_has_Name\" = warehousename, \n"
						+ "				\"This_is_identified_by_Code\" = warehousecode,\n"
						+ "				\"Warehouse_is_procurement_warehouse\" = isprocurementwarehouse,\n"
						+ "				\"Warehouse_is_sales_warehouse\" = issaleswarehouse\n"
						+ "				WHERE \"WarehouseHasWarehouseId\" = warehouseid;\n"
						+ "				\n"
						+ "			--delete current warehouse's entry processes\n"
						+ "			DELETE FROM \"soberano\".\"ProcessIsAnEntryProcessOfWarehouse\" \n"
						+ "				WHERE \"WarehouseHasWarehouseId\" = warehouseid;\n"
						+ "	\n"
						+ "			--update warehouse's entry processes\n"
						+ "			IF array_lower(entryprocesses, 1) IS NOT NULL AND array_upper(entryprocesses, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(entryprocesses, 1) .. array_upper(entryprocesses, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProcessIsAnEntryProcessOfWarehouse\"(\"ProcessHasProcessId\",\n"
						+ "																			  \"WarehouseHasWarehouseId\")\n"
						+ "						VALUES (entryprocesses[i], \n"
						+ "								warehouseId);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;	\n"
						+ "			\n"
						+ "			--at least one warehouse must be sales warehouse\n"
						+ "			--at least one warehouse must be procurement warehouse\n"
						+ "			PERFORM soberano.\"fn_Warehouse_RULE_CONSTRAINTS_8_AND_9\"(warehouseId);\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_WAREHOUSE_tt ' || CAST(warehouseid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_create\"(\n"
						+ "	costcentername character varying,\n"
						+ "	inputwarehouse integer,\n"
						+ "	outputwarehouse integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		costcenterId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		costcenterId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('CostCenter', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"CostCenter\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\", \n"
						+ "											 \"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   costcentername,\n"
						+ "					   inputwarehouse,\n"
						+ "					   outputwarehouse)\n"
						+ "				RETURNING \"CostCenterHasCostCenterId\" INTO costcenterId;\n"
						+ "		END IF;\n"
						+ "		RETURN costcenterId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_disable\"(\n"
						+ "	costcenterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"CostCenter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CostCenterHasCostCenterId\" = costcenterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_CostCenter_tt ' || CAST(costcenterid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_get\"(\n"
						+ "	costcenterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"costCenterId\" integer, \"entityTypeInstanceId\" integer, \"costCenterName\" character varying, \"inputWarehouse\" integer, \"outputWarehouse\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CostCenterHasCostCenterId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\",\n"
						+ "										\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\"\n"
						+ "								FROM soberano.\"CostCenter\"\n"
						+ "								WHERE \"CostCenterHasCostCenterId\" = costcenterid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"CostCenterHasCostCenterId\", \n"
						+ "									\"This_has_Name\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(8, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"CostCenter\" CostCenter\n"
						+ "											ON instance.\"InstanceId\" = CostCenter.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CostCenter_modify\"(\n"
						+ "	costcenterid integer,\n"
						+ "	costcentername character varying,\n"
						+ "	inputwarehouse integer,\n"
						+ "	outputwarehouse integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"CostCenter\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CostCenterHasCostCenterId\" = costCenterid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"CostCenter\"\n"
						+ "				SET \"This_has_Name\" = costCentername, \n"
						+ "				\n"
						+ "					/*\n"
						+ "					KEEP COST CENTER'S WAREHOUSE UNCHANGED TO AVOID PROBLEMS ON\n"
						+ "					RECORDING PAST MATERIAL EXPENSES AND CANCELING MATERIAL EXPENSES.\n"
						+ "					EJ. IN CASE SOMEONE CHANGES A WAREHOUSE BEFORE RECOMPUTING THE INVENTORY.\n"
						+ "					\n"
						+ "					NOTICE A PROCESS RUN TAKES WAREHOUSES FROM THE CORRESPONDING COST CENTER.\n"
						+ "					*/\n"
						+ "					\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\" = inputWarehouse,\n"
						+ "					\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" = outputWarehouse\n"
						+ "					\n"
						+ "				WHERE \"CostCenterHasCostCenterId\" = costCenterid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_CostCenter_tt ' || CAST(costcenterid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_insertInputsAndOutputs\"(\n"
						+ "	processid integer,\n"
						+ "	inputitems character varying[],\n"
						+ "	inputquantities numeric[],\n"
						+ "	inputunits integer[],\n"
						+ "	outputitems character varying[],\n"
						+ "	outputquantities numeric[],\n"
						+ "	outputunits integer[],\n"
						+ "	weights integer[])\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		normalizedQuantity numeric;\n"
						+ "		weightsSum integer;\n"
						+ "		returnValue integer;\n"
						+ "	BEGIN\n"
						+ "		returnValue := 0;\n"
						+ "		weightsSum := 0;\n"
						+ "		IF array_lower(inputItems, 1) IS NOT NULL AND array_upper(inputItems, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "			FOR i IN array_lower(inputItems, 1) .. array_upper(inputItems, 1) LOOP\n"
						+ "\n"
						+ "				SELECT * FROM (SELECT inputQuantities[i] * \"Factor\"\n"
						+ "							FROM soberano.\"AcquirableMaterial\" am\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "									ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "										AND uconversion.\"Unit1_UnitHasUnitId\" = inputUnits[i]\n"
						+ "							WHERE am.\"InventoryItemHasInventoryItemCode\" = inputItems[i]) sq\n"
						+ "							INTO normalizedQuantity;\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"ProcessInput\"(\"Quantity\", \"ProcessHasProcessId\", \"InventoryItemHasInventoryItemCode\")\n"
						+ "													VALUES (normalizedQuantity, processId, inputItems[i]);\n"
						+ "\n"
						+ "			END LOOP;\n"
						+ "\n"
						+ "		END IF;\n"
						+ "\n"
						+ "		IF array_lower(outputItems, 1) IS NOT NULL AND array_upper(outputItems, 1) IS NOT NULL THEN\n"
						+ "\n"
						+ "			FOR i IN array_lower(outputItems, 1) .. array_upper(outputItems, 1) LOOP\n"
						+ "\n"
						+ "				SELECT * FROM (SELECT outputQuantities[i] * \"Factor\"\n"
						+ "							FROM soberano.\"AcquirableMaterial\" am\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "									ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "										AND uconversion.\"Unit1_UnitHasUnitId\" = outputUnits[i]\n"
						+ "							WHERE am.\"InventoryItemHasInventoryItemCode\" = outputItems[i]\n"
						+ "							UNION\n"
						+ "							SELECT outputQuantities[i] * \"Factor\"\n"
						+ "								FROM soberano.\"Product\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "										ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "										ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND uconversion.\"Unit1_UnitHasUnitId\" = outputUnits[i]\n"
						+ "								WHERE am.\"InventoryItemHasInventoryItemCode\" = outputItems[i]) sq\n"
						+ "							INTO normalizedQuantity;\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"ProcessOutput\"(\"Quantity\", \n"
						+ "													 \"This_value_is_weighted_by_WeightCoefficient\", \n"
						+ "													 \"ProcessHasProcessId\", \n"
						+ "													 \"InventoryItemHasInventoryItemCode\")\n"
						+ "					VALUES (normalizedQuantity,\n"
						+ "						   weights[i],\n"
						+ "						   processId,\n"
						+ "						   outputItems[i]);\n"
						+ "						   \n"
						+ "				weightsSum := weightsSum + weights[i];\n"
						+ "				\n"
						+ "			END LOOP;\n"
						+ "		\n"
						+ "		END IF;\n"
						+ "		\n"
						+ "		IF weightsSum <> 100 THEN\n"
						+ "			DELETE FROM soberano.\"ProcessInput\" WHERE \"ProcessHasProcessId\" = processId;\n"
						+ "			DELETE FROM soberano.\"ProcessOutput\" WHERE \"ProcessHasProcessId\" = processId;\n"
						+ "			returnValue := -2;\n"
						+ "		END IF;\n"
						+ "		RETURN returnValue;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_create\"(\n"
						+ "	processname character varying,\n"
						+ "	fixedcost numeric,	\n"
						+ "	inputItems character varying[],	\n"
						+ "	inputQuantities numeric[],\n"
						+ "	inputUnits integer[],\n"
						+ "	outputItems character varying[],	\n"
						+ "	outputQuantities numeric[],\n"
						+ "	outputUnits integer[],\n"
						+ "	weights integer[],	\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		processId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		processId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Process', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Process\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Name\", \n"
						+ "											 \"This_has_FixedCost\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   processname,\n"
						+ "					   fixedcost)\n"
						+ "				RETURNING \"ProcessHasProcessId\" INTO processId;\n"
						+ "				\n"
						+ "			PERFORM soberano.\"fn_Process_insertInputsAndOutputs\"(processId,\n"
						+ "																inputItems,	\n"
						+ "																inputQuantities,\n"
						+ "																inputUnits,\n"
						+ "																outputItems,	\n"
						+ "																outputQuantities,\n"
						+ "																outputUnits,\n"
						+ "																weights);\n"
						+ "				\n"
						+ "		END IF;\n"
						+ "		RETURN processId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_disable\"(\n"
						+ "	processid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Process\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProcessHasProcessId\" = processid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--RULE: A process with an enabled product as one of its outputs cannot be\n"
						+ "			--disabled.\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ProcessOutput\" poutput\n"
						+ "						  			INNER JOIN soberano.\"Product\" product\n"
						+ "						 				ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						 				ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						 		WHERE poutput.\"ProcessHasProcessId\" = processid\n"
						+ "						  			--8 is the id of disabled stage\n"
						+ "						 			AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) \n"
						+ "				\n"
						+ "				--RULE: A process with an enabled product as one of its inputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessInput\" pinput\n"
						+ "						  			INNER JOIN soberano.\"Product\" product\n"
						+ "						 				ON pinput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						 				ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						 		WHERE pinput.\"ProcessHasProcessId\" = processid\n"
						+ "						  			--8 is the id of disabled stage\n"
						+ "						 			AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8)\n"
						+ "									\n"
						+ "				--RULE: A process with an enabled acquirable material as one of its outputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessOutput\" poutput\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" product\n"
						+ "											ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "									WHERE poutput.\"ProcessHasProcessId\" = processid\n"
						+ "										--8 is the id of disabled stage\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) \n"
						+ "\n"
						+ "				--RULE: A process with an enabled acquirable material as one of its inputs cannot be\n"
						+ "				--disabled.\n"
						+ "				AND NOT EXISTS(SELECT * FROM soberano.\"ProcessInput\" pinput\n"
						+ "									INNER JOIN soberano.\"AcquirableMaterial\" product\n"
						+ "										ON pinput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "										ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = product.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "								WHERE pinput.\"ProcessHasProcessId\" = processid\n"
						+ "									--8 is the id of disabled stage\n"
						+ "									AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 8) THEN\n"
						+ "									\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Process_tt ' || CAST(processid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "									\n"
						+ "			END IF;\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_get\"(\n"
						+ "	processid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"processId\" integer, \"entityTypeInstanceId\" integer, \"processName\" character varying, \"fixedCost\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProcessHasProcessId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_FixedCost\"\n"
						+ "								FROM soberano.\"Process\"\n"
						+ "								WHERE \"ProcessHasProcessId\" = processid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ProcessHasProcessId\", \n"
						+ "									\"This_has_Name\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(12, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Process\" process\n"
						+ "											ON instance.\"InstanceId\" = process.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_getAllToRun\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT process.\"ProcessHasProcessId\" processId, \n"
						+ "									\"This_has_Name\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(12, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Process\" process\n"
						+ "											ON instance.\"InstanceId\" = process.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						WHERE processId NOT IN (SELECT poutput.\"ProcessHasProcessId\" \n"
						+ "													FROM soberano.\"Product\" product\n"
						+ "														INNER JOIN soberano.\"ProcessOutput\" poutput\n"
						+ "															ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\")\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_modify\"(\n"
						+ "	processid integer,\n"
						+ "	processname character varying,\n"
						+ "	fixedcost numeric,\n"
						+ "	inputitems character varying[],\n"
						+ "	inputquantities numeric[],\n"
						+ "	inputunits integer[],\n"
						+ "	outputitems character varying[],\n"
						+ "	outputquantities numeric[],\n"
						+ "	outputunits integer[],\n"
						+ "	weights integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "		ruleConstraint14Met boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Process\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProcessHasProcessId\" = processid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_Process_RULE_CONSTRAINT_14\"(processid) INTO ruleConstraint14Met;\n"
						+ "			\n"
						+ "			IF ruleConstraint14Met THEN\n"
						+ "			\n"
						+ "				--update the object\n"
						+ "				UPDATE soberano.\"Process\"\n"
						+ "					SET \"This_has_Name\" = processname, \n"
						+ "						\"This_has_FixedCost\" = fixedcost\n"
						+ "					WHERE \"ProcessHasProcessId\" = processid;\n"
						+ "\n"
						+ "				DELETE FROM soberano.\"ProcessInput\" WHERE \"ProcessHasProcessId\" = processId;\n"
						+ "				DELETE FROM soberano.\"ProcessOutput\" WHERE \"ProcessHasProcessId\" = processId;\n"
						+ "\n"
						+ "				PERFORM soberano.\"fn_Process_insertInputsAndOutputs\"(processId,\n"
						+ "																	inputItems,	\n"
						+ "																	inputQuantities,\n"
						+ "																	inputUnits,\n"
						+ "																	outputItems,	\n"
						+ "																	outputQuantities,\n"
						+ "																	outputUnits,\n"
						+ "																	weights);\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Process_tt ' || CAST(processid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				qryResult := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_getInputs\"(\n"
						+ "	processid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" character varying, \"itemName\" character varying, \"unitAcron\" character varying, \"unitId\" integer, quantity numeric, weight integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT item.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							\"This_has_Name\",\n"
						+ "							\"Acronym\",\n"
						+ "							\"UnitHasUnitId\",\n"
						+ "							\"Quantity\",\n"
						+ "							0\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessInput\" pinput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = pinput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND pinput.\"ProcessHasProcessId\" = processid\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "										ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND unit.\"Language\" = lang\n"
						+ "							WHERE --user can make decisions on processes\n"
						+ "									(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(12, 1, loginname))\n"
						+ "										--or user can create process\n"
						+ "										OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_0AEEE069-E89E-407B-BF1D-B7881EF813B3', loginname)))\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_getOutputs\"(\n"
						+ "	processid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" character varying, \"itemName\" character varying, \"unitAcron\" character varying, \"unitId\" integer, quantity numeric, weight integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT item.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							\"This_has_Name\",\n"
						+ "							\"Acronym\",\n"
						+ "							\"UnitHasUnitId\",\n"
						+ "							\"Quantity\",\n"
						+ "							\"This_value_is_weighted_by_WeightCoefficient\"\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessOutput\" poutput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND poutput.\"ProcessHasProcessId\" = processid\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "								ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "									AND unit.\"Language\" = lang\n"
						+ "							WHERE --user can make decisions on processes\n"
						+ "									(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(12, 1, loginname))\n"
						+ "										--or user can create process\n"
						+ "										OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_0AEEE069-E89E-407B-BF1D-B7881EF813B3', loginname)))\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Process_estimateCost\"(\n"
						+ "	process integer,\n"
						+ "	costcenter integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS numeric\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		estimate numeric;\n"
						+ "BEGIN\n"
						+ "	SELECT COALESCE(SUM(\"Value\" / \"Quantity\"), 0) + \"This_has_FixedCost\"\n"
						+ "		FROM (SELECT * \n"
						+ "			  	FROM soberano.\"ProcessRun\" pru\n"
						+ "			 		INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = pru.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			 		\n"
						+ "			  				--process run is closed\n"
						+ "							AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 6	\n"
						+ "			  		INNER JOIN soberano.\"Process\" proc\n"
						+ "						ON pru.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.\"ProcessHasProcessId\"\n"
						+ "							AND pru.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = costcenter\n"
						+ "							AND proc.\"ProcessHasProcessId\" = process\n"
						+ "				WHERE EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(pru.\"This_is_identified_by_EntityTypeInstance_id\", loginname))\n"
						+ "			 	\n"
						+ "			  	--the last closed process run in the passed cost center\n"
						+ "			  	ORDER BY pru.\"ProcessRunHasProcessRunId\" DESC LIMIT 1) pr			\n"
						+ "				INNER JOIN soberano.\"ProcessRunFixedCost\" prfc\n"
						+ "					ON prfc.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "				INNER JOIN soberano.\"ProcessRunOutput\" pro\n"
						+ "					ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "				INNER JOIN soberano.\"ProcessRunOutputValue\" prov\n"
						+ "					ON prov.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "		GROUP BY \"This_has_FixedCost\"\n"
						+ "		INTO estimate;\n"
						+ "	RETURN estimate;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('AcquirableMaterial', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"InventoryItem\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "												 \"This_has_Name\", \n"
						+ "												 \"This_has_MinimumInventoryLevel\", \n"
						+ "												 \"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "				VALUES (itemCode,\n"
						+ "					   itemName,\n"
						+ "					   inventoryLevel,\n"
						+ "					   itemUnit);\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"AcquirableMaterial\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"InventoryItemHasInventoryItemCode\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   itemCode)\n"
						+ "				RETURNING \"AcquirableMaterialHasAcquirableMaterialId\" INTO itemId;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				ii.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"AcquirableMaterial\" objectdata\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "					ON ii.\"InventoryItemHasInventoryItemCode\" = objectdata.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_AcquirableMaterial_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_get\"(\n"
						+ "	acquirablematerialid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \"itemName\" character varying, \"inventoryLevel\" numeric, \"itemUnit\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"AcquirableMaterialHasAcquirableMaterialId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										ii.\"InventoryItemHasInventoryItemCode\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_MinimumInventoryLevel\",\n"
						+ "										\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "								FROM soberano.\"AcquirableMaterial\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"AcquirableMaterialHasAcquirableMaterialId\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(7, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_getAllWithStringId\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectStringId\" character varying, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT am.\"InventoryItemHasInventoryItemCode\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(7, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryItem_updateStockQuantities\"(\n"
						+ "	item character varying,\n"
						+ "	oldunit integer,\n"
						+ "	newunit integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		conversionFactor numeric;\n"
						+ "	BEGIN\n"
						+ "			\n"
						+ "		SELECT \"Factor\" \n"
						+ "			FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "			WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "				AND uconversion.\"Unit2_UnitHasUnitId\" = newunit\n"
						+ "			INTO conversionFactor;\n"
						+ "			\n"
						+ "		--the update is applied only if oldunit and newunit measure the same magnitude\n"
						+ "		IF conversionFactor IS NOT NULL THEN\n"
						+ "			UPDATE soberano.\"Stock\" \n"
						+ "				SET \"Quantity\" = \"Quantity\" * conversionFactor\n"
						+ "				WHERE \"InventoryItemHasInventoryItemCode\" = item;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_AcquirableMaterial_modify\"(\n"
						+ "	acquirablematerialid integer,\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "		oldItemCode character varying;\n"
						+ "		oldUnit integer;\n"
						+ "		newUnit integer;\n"
						+ "		conversionFactor numeric;\n"
						+ "		\n"
						+ "		ruleConstraint13Met boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\",\n"
						+ "								\n"
						+ "				objectdata.iiCode,\n"
						+ "				objectData.iiUnit\n"
						+ "			FROM (SELECT \"AcquirableMaterialHasAcquirableMaterialId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\",\n"
						+ "				  		ii.\"InventoryItemHasInventoryItemCode\" iiCode,\n"
						+ "				  		ii.\"This_is_measured_in_Unit_with_UnitHasUnitId\" iiUnit FROM soberano.\"AcquirableMaterial\" am\n"
						+ "					INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "						ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId,\n"
						+ "				\n"
						+ "				oldItemCode,\n"
						+ "				oldUnit;\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_InventoryItem_RULE_CONSTRAINT_13\"(oldItemCode) INTO ruleConstraint13Met;\n"
						+ "			\n"
						+ "			--An inventory item can not be modified if it is an input or output of a running process.\n"
						+ "			IF ruleConstraint13Met THEN\n"
						+ "\n"
						+ "				SELECT \"Factor\" \n"
						+ "					FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "					WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "						AND uconversion.\"Unit2_UnitHasUnitId\" = itemUnit\n"
						+ "					INTO conversionFactor;\n"
						+ "			\n"
						+ "				--if new unit does not measure the same magnitude as current unit, do not apply unit change\n"
						+ "				IF conversionFactor IS NULL THEN\n"
						+ "					newUnit := oldunit;\n"
						+ "				ELSE\n"
						+ "					newUnit := itemUnit;\n"
						+ "				END IF;\n"
						+ "\n"
						+ "				--update the object\n"
						+ "				UPDATE soberano.\"InventoryItem\"\n"
						+ "					SET \"InventoryItemHasInventoryItemCode\" = itemCode,\n"
						+ "						\"This_has_Name\" = itemName,\n"
						+ "						\"This_has_MinimumInventoryLevel\" = inventoryLevel,\n"
						+ "						\"This_is_measured_in_Unit_with_UnitHasUnitId\" = newUnit\n"
						+ "					WHERE \"InventoryItemHasInventoryItemCode\" = oldItemCode;			\n"
						+ "				UPDATE soberano.\"AcquirableMaterial\"\n"
						+ "					SET \"InventoryItemHasInventoryItemCode\" = itemCode\n"
						+ "					WHERE \"AcquirableMaterialHasAcquirableMaterialId\" = acquirablematerialid;\n"
						+ "\n"
						+ "				--RULE_CONSTRAINT_10: Quantity is expressed in the unit the corresponding inventory item is measured.\n"
						+ "				PERFORM soberano.\"fn_InventoryItem_updateStockQuantities\"(itemCode, oldUnit, newUnit);\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_AcquirableMaterial_tt ' || CAST(acquirablematerialid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;\n"
						+ "\n"
						+ "			ELSE\n"
						+ "\n"
						+ "				qryResult := -2;\n"
						+ "\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_updatePrices\"()\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		systemCurrencyIsReferenceCurrency boolean;\n"
						+ "	BEGIN\n"
						+ "		SELECT COUNT(*) = 1 FROM soberano.\"Currency\"\n"
						+ "			WHERE \"Currency_is_system_currency\" OR \"Currency_is_price_reference_currency\"\n"
						+ "			INTO systemCurrencyIsReferenceCurrency;\n"
						+ "		\n"
						+ "		IF systemCurrencyIsReferenceCurrency THEN\n"
						+ "			UPDATE soberano.\"Product\" \n"
						+ "				SET \"This_has_Price_in_reference_currency\" = \"This_has_Price\";\n"
						+ "		ELSE\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"This_has_Price\" = \"This_has_Price_in_reference_currency\" * rc.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "				FROM (SELECT \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \n"
						+ "					  	FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\") rc;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_updateStockValues\"(\n"
						+ "	oldsystemcurrency integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		exchRate numeric;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \n"
						+ "			FROM soberano.\"Currency\" \n"
						+ "			WHERE \"CurrencyHasCurrencyId\" = oldSystemCurrency\n"
						+ "			INTO exchRate;\n"
						+ "	\n"
						+ "		UPDATE soberano.\"Stock\" SET \"This_has_Value\" = \"This_has_Value\" * exchRate;\n"
						+ "					\n"
						+ "		UPDATE soberano.\"StockChange\" \n"
						+ "			SET \"This_is_called_with_Value\" = \"This_is_called_with_Value\" * exchRate, \n"
						+ "				\"This_saves_previous_Value\" = \"This_saves_previous_Value\" * exchRate;					\n"
						+ "					\n"
						+ "		UPDATE soberano.\"StockRecord\" SET \"This_has_Value\" = \"This_has_Value\" * exchRate;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean,\n"
						+ "	iscash boolean,\n"
						+ "	exchangerate numeric,\n"
						+ "	currencyposition integer,\n"
						+ "	paymentprocessor integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		finalExchangeRate numeric;\n"
						+ "		oldSystemCurrency integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;\n"
						+ "		IF exchangerate > 0 THEN\n"
						+ "		\n"
						+ "			--create entity type instance	\n"
						+ "			SELECT metamodel.\"fn_EntityTypeInstance_create\"('Currency', loginname)\n"
						+ "				INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "			--user has rights to create instance of that entity type\n"
						+ "			IF entityTypeInstanceId > 0 THEN\n"
						+ "\n"
						+ "				IF isSystemCurrency THEN finalExchangeRate = 1; ELSE finalExchangeRate = exchangeRate; END IF;\n"
						+ "				\n"
						+ "				SELECT \"CurrencyHasCurrencyId\" FROM soberano.\"Currency\" \n"
						+ "					WHERE \"Currency_is_system_currency\" INTO oldSystemCurrency;\n"
						+ "\n"
						+ "				--at most one currency is system currency\n"
						+ "				--at most one currency is reference price currency\n"
						+ "				PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(isSystemCurrency, isPriceReferenceCurrency);\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"Currency\"(\"This_has_Currency_code\", \n"
						+ "												\"This_has_Name\",\n"
						+ "												\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\", \n"
						+ "												\"This_is_shown_in_Position\", \n"
						+ "												\"Currency_is_system_currency\", \n"
						+ "												\"Currency_is_price_reference_currency\", \n"
						+ "												\"Currency_is_cash\",\n"
						+ "												\"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "					VALUES (itemcode,\n"
						+ "							itemname,\n"
						+ "							finalExchangeRate,\n"
						+ "							currencyPosition,\n"
						+ "							issystemcurrency,\n"
						+ "							ispricereferencecurrency,\n"
						+ "							isCash,\n"
						+ "							entityTypeInstanceId) RETURNING \"CurrencyHasCurrencyId\" INTO itemId;\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"PaymentProcessorIsUsedForCurrency\"(\"CurrencyHasCurrencyId\",\n"
						+ "																		\"PaymentProcessorHasPaymentProcessorId\")\n"
						+ "					VALUES(itemId, paymentProcessor);\n"
						+ "\n"
						+ "				--at least one currency must be system currency\n"
						+ "				--at least one currency must be reference price currency\n"
						+ "				PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(itemId);\n"
						+ "\n"
						+ "				PERFORM soberano.\"fn_Currency_updatePrices\"();\n"
						+ "\n"
						+ "				PERFORM soberano.\"fn_Currency_updateStockValues\"(oldSystemCurrency);\n"
						+ "			END IF;\n"
						+ "		ELSE\n"
						+ "			itemId := -3;\n"
						+ "		END IF;			\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		currencyBalanceIsZero boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Currency\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"CurrencyHasCurrencyId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT COALESCE(SUM(\"Balance\"), 0) = 0\n"
						+ "					FROM soberano.\"CashRegisterHasBalanceInCurrency\"\n"
						+ "					WHERE \"CurrencyHasCurrencyId\" = itemid\n"
						+ "					INTO currencyBalanceIsZero;\n"
						+ "		\n"
						+ "			--RULE_CONSTRAINT_11: A 'Currency' with balance in some 'CashRegister' can not be disabled.\n"
						+ "			IF currencyBalanceIsZero THEN\n"
						+ "			\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_CURRENCY_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;			\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				qryResult := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"CurrencyHasCurrencyId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_has_Currency_code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(9, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "								ON instance.\"InstanceId\" = currency.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	issystemcurrency boolean,\n"
						+ "	ispricereferencecurrency boolean,\n"
						+ "	iscash boolean,\n"
						+ "	exchangerate numeric,\n"
						+ "	currencyposition integer,\n"
						+ "	paymentprocessor integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		finalExchangeRate numeric;\n"
						+ "		oldSystemCurrency integer;\n"
						+ "		rule15Met boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		IF exchangerate > 0 THEN\n"
						+ "		\n"
						+ "			SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "					objectdata.\"This_has_Name\",\n"
						+ "					decision.\"DecisionHasDecisionId\" \n"
						+ "				FROM soberano.\"Currency\" objectdata\n"
						+ "					INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "										\"This_has_Name\" \n"
						+ "									FROM metamodel.\"Decision\") decision\n"
						+ "						ON decision.\"DecisionHasDecisionId\" = \n"
						+ "							(SELECT \"DecisionId\" \n"
						+ "								FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "											objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											loginname)\n"
						+ "								WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "									/************/\n"
						+ "										'Apply'\n"
						+ "									/************/						   \n"
						+ "\n"
						+ "							   )\n"
						+ "				WHERE \"CurrencyHasCurrencyId\" = itemid\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;	\n"
						+ "			\n"
						+ "			--user has rights\n"
						+ "			IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "\n"
						+ "				SELECT \"CurrencyHasCurrencyId\" FROM soberano.\"Currency\" \n"
						+ "					WHERE \"Currency_is_system_currency\" INTO oldSystemCurrency;\n"
						+ "\n"
						+ "				--orders ongoing?\n"
						+ "				SELECT * FROM soberano.\"fn_Order_RULE_CONSTRAINT_15\"() INTO rule15Met;\n"
						+ "\n"
						+ "				IF isSystemCurrency AND itemId != oldSystemCurrency AND NOT rule15Met THEN\n"
						+ "\n"
						+ "					--some order is ongoing. system currency cannot be changed.\n"
						+ "					qryResult := -2;\n"
						+ "\n"
						+ "				ELSE\n"
						+ "\n"
						+ "					IF isSystemCurrency THEN \n"
						+ "\n"
						+ "						--system currency change\n"
						+ "						IF itemId != oldSystemCurrency THEN\n"
						+ "\n"
						+ "							UPDATE soberano.\"Currency\" t1\n"
						+ "								SET \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \n"
						+ "									= t1.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" / t2.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "								FROM (SELECT \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "										FROM soberano.\"Currency\" WHERE \"CurrencyHasCurrencyId\" = itemid) t2\n"
						+ "								WHERE t1.\"CurrencyHasCurrencyId\" != itemid;\n"
						+ "\n"
						+ "							PERFORM soberano.\"fn_Currency_updateStockValues\"(oldSystemCurrency);\n"
						+ "\n"
						+ "						END IF;\n"
						+ "\n"
						+ "						finalExchangeRate = 1; \n"
						+ "\n"
						+ "					ELSE \n"
						+ "\n"
						+ "						finalExchangeRate = exchangeRate; \n"
						+ "\n"
						+ "					END IF;\n"
						+ "\n"
						+ "					--at most one currency is system currency\n"
						+ "					--at most one currency is reference price currency\n"
						+ "					PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_4_AND_5\"(isSystemCurrency, isPriceReferenceCurrency);\n"
						+ "\n"
						+ "					UPDATE soberano.\"Currency\"\n"
						+ "						SET  \"This_has_Currency_code\" = itemcode, \n"
						+ "							\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" = finalExchangeRate, \n"
						+ "							\"This_is_shown_in_Position\" = currencyposition, \n"
						+ "							\"This_has_Name\" = itemname, \n"
						+ "							\"Currency_is_system_currency\" = issystemcurrency, \n"
						+ "							\"Currency_is_price_reference_currency\" = ispricereferencecurrency, \n"
						+ "							\"Currency_is_cash\" = iscash\n"
						+ "						WHERE \"CurrencyHasCurrencyId\" = itemid;\n"
						+ "\n"
						+ "					DELETE FROM soberano.\"PaymentProcessorIsUsedForCurrency\"\n"
						+ "						WHERE \"CurrencyHasCurrencyId\" = itemId;\n"
						+ "\n"
						+ "					INSERT INTO soberano.\"PaymentProcessorIsUsedForCurrency\"(\"CurrencyHasCurrencyId\",\n"
						+ "																			\"PaymentProcessorHasPaymentProcessorId\")\n"
						+ "						VALUES(itemId, paymentprocessor);\n"
						+ "\n"
						+ "					--at least one currency must be system currency\n"
						+ "					--at least one currency must be reference price currency\n"
						+ "					PERFORM soberano.\"fn_Currency_RULE_CONSTRAINTS_6_AND_7\"(itemId);\n"
						+ "\n"
						+ "					PERFORM soberano.\"fn_Currency_updatePrices\"();\n"
						+ "\n"
						+ "					--make the decision\n"
						+ "					PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "													entityTypeInstanceId, \n"
						+ "													decisionId, \n"
						+ "													'tt_CURRENCY_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "					qryResult := 0;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "			END IF;			\n"
						+ "		ELSE\n"
						+ "			qryResult := -3;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_get\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemName\" character varying, \"itemCode\" character varying, \"isSystemCurrency\" boolean, \"isPriceReferenceCurrency\" boolean, \"isCash\" boolean, \"exchangeRate\" numeric, \"itemPosition\" integer, \"paymentProcessor\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT curr.\"CurrencyHasCurrencyId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_Currency_code\",\n"
						+ "										\"Currency_is_system_currency\",\n"
						+ "										\"Currency_is_price_reference_currency\",\n"
						+ "										\"Currency_is_cash\",\n"
						+ "										\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "										\"This_is_shown_in_Position\",\n"
						+ "										\"PaymentProcessorHasPaymentProcessorId\"\n"
						+ "								FROM soberano.\"Currency\" curr\n"
						+ "									INNER JOIN\n"
						+ "										soberano.\"PaymentProcessorIsUsedForCurrency\" pp\n"
						+ "											ON curr.\"CurrencyHasCurrencyId\" = pp.\"CurrencyHasCurrencyId\"\n"
						+ "								WHERE curr.\"CurrencyHasCurrencyId\" = itemid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Currency_getSystemCurrencies\"()\n"
						+ "    RETURNS TABLE(\"systemCurrencyCode\" character varying, \n"
						+ "				  \"referenceCurrencyCode\" character varying, \n"
						+ "				  \"referenceCurrencyExchangeRate\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT sct.\"This_has_Currency_code\",\n"
						+ "							rct.\"This_has_Currency_code\",\n"
						+ "							rct.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "							FROM (SELECT \"This_has_Currency_code\", \n"
						+ "										\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "										1 stickcolumn\n"
						+ "									FROM soberano.\"Currency\" curr\n"
						+ "									WHERE \"Currency_is_price_reference_currency\") rct\n"
						+ "								INNER JOIN (SELECT \"This_has_Currency_code\",\n"
						+ "													1 stickcolumn\n"
						+ "												FROM soberano.\"Currency\" curr\n"
						+ "												WHERE \"Currency_is_system_currency\") sct\n"
						+ "									ON rct.stickcolumn = sct.stickcolumn;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Service', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"Service\"(\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											 \"This_has_Code\",\n"
						+ "										  	 \"This_has_Name\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   itemCode,\n"
						+ "					   itemName)\n"
						+ "				RETURNING \"ServiceHasServiceId\" INTO itemId;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ServiceHasServiceId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_has_Code\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(19, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Service\" serv\n"
						+ "											ON instance.\"InstanceId\" = serv.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Service\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ServiceHasServiceId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Service_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_get\"(\n"
						+ "	serviceid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \"itemName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ServiceHasServiceId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										serv.\"This_has_Code\",\n"
						+ "										\"This_has_Name\"\n"
						+ "								FROM soberano.\"Service\" serv\n"
						+ "								WHERE \"ServiceHasServiceId\" = serviceid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Service_modify\"(\n"
						+ "	serviceid integer,\n"
						+ "	itemcode character varying,\n"
						+ "	itemname character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ServiceHasServiceId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Service\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ServiceHasServiceId\" = serviceid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Service\"\n"
						+ "				SET \"This_has_Code\" = itemCode,\n"
						+ "					\"This_has_Name\" = itemName\n"
						+ "				WHERE \"ServiceHasServiceId\" = serviceid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Service_tt ' || CAST(serviceid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_create\"(\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	costcenter integer,\n"
						+ "	itemprice numeric,\n"
						+ "	referenceprice numeric,\n"
						+ "	isenabled boolean,\n"
						+ "	itemcategories integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		finalreferenceprice numeric;\n"
						+ "		processid integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Product', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"InventoryItem\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "												 \"This_has_Name\", \n"
						+ "												 \"This_has_MinimumInventoryLevel\", \n"
						+ "												 \"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "				VALUES (itemCode,\n"
						+ "					   itemName,\n"
						+ "					   inventoryLevel,\n"
						+ "					   itemUnit);\n"
						+ "					   \n"
						+ "			IF abs(itemprice - referenceprice) > 0.00000001 THEN\n"
						+ "				\n"
						+ "				SELECT itemprice / \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "					FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "					INTO finalreferenceprice;\n"
						+ "				\n"
						+ "			ELSE finalreferenceprice = referenceprice;\n"
						+ "				\n"
						+ "			END IF;\n"
						+ "					   \n"
						+ "			INSERT INTO soberano.\"Product\"(\"InventoryItemHasInventoryItemCode\", \n"
						+ "										   \"This_has_Price\", \n"
						+ "										   \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										   \"This_has_Price_in_reference_currency\", \n"
						+ "										   \"Product_is_enabled\", \n"
						+ "										   \"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\")\n"
						+ "						VALUES (itemCode,\n"
						+ "							   itemprice,\n"
						+ "							   entityTypeInstanceId,\n"
						+ "							   finalreferenceprice,\n"
						+ "							   isenabled,\n"
						+ "							   costcenter)\n"
						+ "						RETURNING \"ProductHasProductId\" INTO itemId;\n"
						+ "				\n"
						+ "			--update product's categories\n"
						+ "			IF array_lower(itemcategories, 1) IS NOT NULL AND array_upper(itemcategories, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(itemcategories, 1) .. array_upper(itemcategories, 1) LOOP\n"
						+ "					INSERT INTO soberano.\"ProductIsOfProductCategory\"(\n"
						+ "						\"ProductHasProductId\", \"ProductCategoryHasProductCategoryId\")\n"
						+ "						VALUES (itemId, itemcategories[i]);\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--create the product process\n"
						+ "			PERFORM soberano.\"fn_Process_create\"(itemname,\n"
						+ "												0,\n"
						+ "												NULL,\n"
						+ "												NULL,\n"
						+ "												NULL,\n"
						+ "												ARRAY[itemCode],\n"
						+ "												ARRAY[1.0],\n"
						+ "												ARRAY[itemUnit],\n"
						+ "												ARRAY[100],\n"
						+ "												'soberano.user.top');\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				ii.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Product\" objectdata\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "					ON ii.\"InventoryItemHasInventoryItemCode\" = objectdata.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ProductHasProductId\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(13, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Product\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_get\"(\n"
						+ "	productid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemCode\" character varying, \n"
						+ "				  \"itemName\" character varying, \"inventoryLevel\" numeric, \"itemUnit\" integer, \n"
						+ "				  \"itemPrice\" numeric, \"itemReferencePrice\" numeric, \"costCenter\" integer, \n"
						+ "				  \"isEnabled\" boolean, \"itemProcess\" integer, \"categoryId\" integer, \"categoryName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT am.\"ProductHasProductId\",\n"
						+ "										am.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										ii.\"InventoryItemHasInventoryItemCode\",\n"
						+ "										ii.\"This_has_Name\",\n"
						+ "										\"This_has_MinimumInventoryLevel\",\n"
						+ "										\"This_is_measured_in_Unit_with_UnitHasUnitId\",\n"
						+ "										\"This_has_Price\",\n"
						+ "										\"This_has_Price_in_reference_currency\",\n"
						+ "										\"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\",\n"
						+ "										\"Product_is_enabled\",\n"
						+ "										\"ProcessHasProcessId\",\n"
						+ "										cat.\"ProductCategoryHasProductCategoryId\",\n"
						+ "										cat.\"This_has_Name\"\n"
						+ "								FROM soberano.\"Product\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									LEFT JOIN soberano.\"ProductIsOfProductCategory\" piocat\n"
						+ "										ON am.\"ProductHasProductId\" = piocat.\"ProductHasProductId\"\n"
						+ "									LEFT JOIN soberano.\"ProductCategory\" cat\n"
						+ "										ON piocat.\"ProductCategoryHasProductCategoryId\" = cat.\"ProductCategoryHasProductCategoryId\"\n"
						+ "									LEFT JOIN (SELECT product.\"InventoryItemHasInventoryItemCode\", \n"
						+ "											   		\"ProcessHasProcessId\"\n"
						+ "													FROM soberano.\"ProcessOutput\" poutput\n"
						+ "														INNER JOIN soberano.\"Product\" product\n"
						+ "															ON poutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE \"ProductHasProductId\" = productid\n"
						+ "											   ORDER BY \"ProcessHasProcessId\") process\n"
						+ "										ON ii.\"InventoryItemHasInventoryItemCode\" = process.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											AND process.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE am.\"ProductHasProductId\" = productid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(am.\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
												
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	itemname character varying,\n"
						+ "	itemcode character varying,\n"
						+ "	inventorylevel numeric,\n"
						+ "	itemunit integer,\n"
						+ "	costcenter integer,\n"
						+ "	itemprice numeric,\n"
						+ "	referenceprice numeric,\n"
						+ "	isenabled boolean,\n"
						+ "	itemcategories integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "		oldItemCode character varying;\n"
						+ "		finalreferenceprice numeric;		\n"
						+ "		oldUnit integer;\n"
						+ "		newUnit integer;\n"
						+ "		conversionFactor numeric;\n"
						+ "		\n"
						+ "		ruleConstraint13Met boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\",\n"
						+ "				\n"
						+ "				objectdata.iiCode,\n"
						+ "				objectData.iiUnit\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\",\n"
						+ "				  		ii.\"InventoryItemHasInventoryItemCode\" iiCode,\n"
						+ "				  		ii.\"This_is_measured_in_Unit_with_UnitHasUnitId\" iiUnit FROM soberano.\"Product\" am\n"
						+ "					INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "						ON ii.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId,\n"
						+ "				\n"
						+ "				oldItemCode,\n"
						+ "				oldUnit;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_InventoryItem_RULE_CONSTRAINT_13\"(oldItemCode) INTO ruleConstraint13Met;\n"
						+ "			\n"
						+ "			--An inventory item can not be modified if it is an input or output of a running process.\n"
						+ "			IF ruleConstraint13Met THEN\n"
						+ "			\n"
						+ "				IF abs(itemprice - referenceprice) > 0.00000001 THEN\n"
						+ "				\n"
						+ "					SELECT itemprice / \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "						FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "						INTO finalreferenceprice;\n"
						+ "\n"
						+ "				ELSE finalreferenceprice = referenceprice;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "\n"
						+ "				SELECT \"Factor\" \n"
						+ "					FROM soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "					WHERE uconversion.\"Unit1_UnitHasUnitId\" = oldunit\n"
						+ "						AND uconversion.\"Unit2_UnitHasUnitId\" = itemUnit\n"
						+ "					INTO conversionFactor;\n"
						+ "\n"
						+ "				--if new unit does not measure the same magnitude as current unit, do not apply unit change\n"
						+ "				IF conversionFactor IS NULL THEN\n"
						+ "					newUnit := oldunit;\n"
						+ "				ELSE\n"
						+ "					newUnit := itemUnit;\n"
						+ "				END IF;\n"
						+ "\n"
						+ "				--update the object\n"
						+ "				UPDATE soberano.\"InventoryItem\"\n"
						+ "					SET \"InventoryItemHasInventoryItemCode\" = itemCode,\n"
						+ "						\"This_has_Name\" = itemName,\n"
						+ "						\"This_has_MinimumInventoryLevel\" = inventoryLevel,\n"
						+ "						\"This_is_measured_in_Unit_with_UnitHasUnitId\" = itemUnit\n"
						+ "					WHERE \"InventoryItemHasInventoryItemCode\" = oldItemCode;			\n"
						+ "				UPDATE soberano.\"Product\"\n"
						+ "					SET \"InventoryItemHasInventoryItemCode\" = itemCode, \n"
						+ "						\"This_has_Price\" = itemprice, \n"
						+ "						\"This_has_Price_in_reference_currency\" = finalreferenceprice, \n"
						+ "						\"Product_is_enabled\" = isenabled, \n"
						+ "						\"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\" = costcenter\n"
						+ "					WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "				--delete current product's categories\n"
						+ "				DELETE FROM \"soberano\".\"ProductIsOfProductCategory\" \n"
						+ "					WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "				--update product's categories\n"
						+ "				IF array_lower(itemcategories, 1) IS NOT NULL AND array_upper(itemcategories, 1) IS NOT NULL THEN\n"
						+ "\n"
						+ "					FOR i IN array_lower(itemcategories, 1) .. array_upper(itemcategories, 1) LOOP\n"
						+ "						INSERT INTO soberano.\"ProductIsOfProductCategory\"(\n"
						+ "							\"ProductHasProductId\", \"ProductCategoryHasProductCategoryId\")\n"
						+ "							VALUES (itemId, itemcategories[i]);\n"
						+ "					END LOOP;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "\n"
						+ "				--RULE_CONSTRAINT_10: Quantity is expressed in the unit the corresponding inventory item is measured.\n"
						+ "				PERFORM soberano.\"fn_InventoryItem_updateStockQuantities\"(itemCode, oldUnit, itemUnit);\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				qryResult := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					invitem.\"This_has_Name\",\n"
						+ "							  					CAST(matacq.\"This_is_for_Quantity\" AS text) || ' ' || unit.\"Acronym\",\n"
						+ "							  					provider.\"This_has_Name\",\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(10, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"MaterialExpense\" matexpense\n"
						+ "											ON instance.\"InstanceId\" = matexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON matexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquisitionExpense\" acqexpense\n"
						+ "							  				ON matexpense.\"ExpenseHasExpenseId\" = acqexpense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Provider\" provider\n"
						+ "							  				ON acqexpense.\"This_pays_Provider_with_ProviderHasProviderId\" = provider.\"ProviderHasProviderId\"\n"
						+ "							 			INNER JOIN soberano.\"MaterialAcquisition\" matacq\n"
						+ "							  				ON expense.\"ExpenseHasExpenseId\" = matacq.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquirableMaterial\" acqmat\n"
						+ "							  				ON acqmat.\"AcquirableMaterialHasAcquirableMaterialId\" = matacq.\"AcquirableMaterialHasAcquirableMaterialId\"\n"
						+ "							  			INNER JOIN soberano.\"InventoryItem\" invitem\n"
						+ "							  				ON invitem.\"InventoryItemHasInventoryItemCode\" = acqmat.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							  			INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "							  				ON matacq.\"This_is_in_Unit_with_UnitHasUnitId\" = unit.\"UnitHasUnitId\"\n"
						+ "							 					AND unit.\"Language\" = lang\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_MaterialExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Stock_change\"(\n"
						+ "	changedatetime timestamp with time zone,\n"
						+ "	inventoryitem character varying,\n"
						+ "	warehouse integer,\n"
						+ "	quantity numeric,\n"
						+ "	unitvalue numeric,\n"
						+ "	expenseid integer,\n"
						+ "	valuesourcewarehouse integer,\n"
						+ "	updatestock boolean,\n"
						+ "	processrunid integer)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	stockChangeId integer;\n"
						+ "	stockChangeDateTime timestamp with time zone;\n"
						+ "BEGIN\n"
						+ "	SELECT CASE WHEN changeDateTime IS NULL THEN NOW() ELSE changeDateTime END INTO stockChangeDateTime;\n"
						+ "\n"
						+ "	--if it is the first stock change for that warehouse-item pair, before or at that datetime,\n"
						+ "	--firstly, insert an innocuous stock change for that pair\n"
						+ "	IF NOT EXISTS(SELECT *\n"
						+ "				  	FROM soberano.\"StockChange\" \n"
						+ "				  	WHERE \"This_is_at_DateTime\" < stockChangeDateTime\n"
						+ "				 			AND\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\" = warehouse\n"
						+ "				 			AND \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" = inventoryItem) THEN\n"
						+ "		INSERT INTO soberano.\"StockChange\"(\"This_is_at_DateTime\", \n"
						+ "										   \"This_is_called_with_Quantity\", \n"
						+ "										   \"This_is_called_with_Value\", \n"
						+ "										   \"This_saves_previous_Quantity\", \n"
						+ "										   \"This_saves_previous_Value\", \n"
						+ "										   \"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\", \n"
						+ "										   \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\",\n"
						+ "									  	   \"This_is_triggered_by_MaterialExpense_with_ExpenseHasExpenseId\",\n"
						+ "									  	   \"This_takes_value_from_Warehouse_with_WarehouseHasWarehouseId\",\n"
						+ "										   \"This_is_triggered_by_ProcessRun_with_ProcessRunHasProcessRunId\")\n"
						+ "			VALUES(stockChangeDateTime,\n"
						+ "					0,\n"
						+ "					0,\n"
						+ "					0,\n"
						+ "					0,\n"
						+ "					warehouse,\n"
						+ "					inventoryitem,\n"
						+ "					NULL,\n"
						+ "					NULL,\n"
						+ "				    NULL);\n"
						+ "	END IF;\n"
						+ "\n"
						+ "	--if the item doesn't exist in the warehouse,\n"
						+ "	IF NOT EXISTS(SELECT * FROM soberano.\"Stock\" \n"
						+ "			WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItem \n"
						+ "				AND \"WarehouseHasWarehouseId\" = warehouse) THEN\n"
						+ "				\n"
						+ "		--record that item stock entry in that warehouse with quantity and value equal to 0\n"
						+ "		INSERT INTO soberano.\"Stock\"(\"Quantity\", \n"
						+ "									 \"This_has_Value\", \n"
						+ "									 \"WarehouseHasWarehouseId\", \n"
						+ "									 \"InventoryItemHasInventoryItemCode\")\n"
						+ "									VALUES (0,\n"
						+ "										   0,\n"
						+ "										   warehouse,\n"
						+ "										   inventoryItem);\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	--if the item doesn't exist in the value source warehouse,\n"
						+ "	IF NOT EXISTS(SELECT * FROM soberano.\"Stock\" \n"
						+ "			WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItem \n"
						+ "				AND \"WarehouseHasWarehouseId\" = valuesourcewarehouse) THEN\n"
						+ "				\n"
						+ "		--record that item stock entry in that warehouse with quantity and value equal to 0\n"
						+ "		INSERT INTO soberano.\"Stock\"(\"Quantity\", \n"
						+ "									 \"This_has_Value\", \n"
						+ "									 \"WarehouseHasWarehouseId\", \n"
						+ "									 \"InventoryItemHasInventoryItemCode\")\n"
						+ "			SELECT 0, 0, \"WarehouseHasWarehouseId\", inventoryItem\n"
						+ "				FROM soberano.\"Warehouse\"\n"
						+ "				WHERE \"WarehouseHasWarehouseId\" = valuesourcewarehouse;\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	--record stock change for future inventory recalc\n"
						+ "	INSERT INTO soberano.\"StockChange\"(\"This_is_at_DateTime\", \n"
						+ "										   \"This_is_called_with_Quantity\", \n"
						+ "										   \"This_is_called_with_Value\", \n"
						+ "										   \"This_saves_previous_Quantity\", \n"
						+ "										   \"This_saves_previous_Value\", \n"
						+ "										   \"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\", \n"
						+ "										   \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\",\n"
						+ "									  	   \"This_is_triggered_by_MaterialExpense_with_ExpenseHasExpenseId\",\n"
						+ "									  	   \"This_takes_value_from_Warehouse_with_WarehouseHasWarehouseId\",\n"
						+ "										   \"This_is_triggered_by_ProcessRun_with_ProcessRunHasProcessRunId\")\n"
						+ "		SELECT stockChangeDateTime,\n"
						+ "				quantity,\n"
						+ "				unitvalue,\n"
						+ "				\"Quantity\",\n"
						+ "				\"This_has_Value\",\n"
						+ "				warehouse,\n"
						+ "				inventoryitem,\n"
						+ "				expenseId,\n"
						+ "				valueSourceWarehouse,\n"
						+ "				processrunid\n"
						+ "			FROM soberano.\"Stock\"\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "				AND \"InventoryItemHasInventoryItemCode\" = inventoryitem\n"
						+ "			RETURNING \"StockChangeHasStockChangeId\" INTO stockChangeId;\n"
						+ "	\n"
						+ "	--update stock (for new material expense, stock updating happens later upon inmediate inventory recalculation)\n"
						+ "	--this is for preventing double updating for new material expenses\n"
						+ "	IF updateStock THEN\n"
						+ "		UPDATE soberano.\"Stock\" \n"
						+ "			SET \"This_has_Value\" = CASE WHEN \"Quantity\" + quantity <= 0 THEN 0\n"
						+ "										WHEN quantity <= 0 THEN \"This_has_Value\"\n"
						+ "										WHEN \"Quantity\" < 0 THEN unitvalue\n"
						+ "										ELSE (\"Quantity\" * \"This_has_Value\" + quantity * unitvalue) / (\"Quantity\" + quantity) END,\n"
						+ "				\"Quantity\" = \"Quantity\" + quantity\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "					AND \"InventoryItemHasInventoryItemCode\" = inventoryItem;\n"
						+ "	END IF;\n"
						+ "	RETURN stockChangeId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Stock_change\"(\n"
						+ "	stockchangeid integer)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	inventoryitem character varying;\n"
						+ "	warehouse integer;\n"
						+ "	quantity numeric;\n"
						+ "	unitvalue numeric;\n"
						+ "	pQty numeric;\n"
						+ "	pValue numeric;\n"
						+ "	\n"
						+ "	processRunId integer;\n"
						+ "	newStockUnitValue numeric;\n"
						+ "	outputsTotalValue numeric;\n"
						+ "	weighttoredistribute numeric;\n"
						+ "	producedoutputcount integer;\n"
						+ "	outputvalue numeric;\n"
						+ "	itemRecord record;\n"
						+ "	processRunDateTime timestamp with time zone;\n"
						+ "BEGIN\n"
						+ "	--here, the item already exists in that warehouse since stock change was called before.\n"
						+ "	SELECT \"This_is_called_with_Quantity\", \n"
						+ "			CASE WHEN \"This_takes_value_from_Warehouse_with_WarehouseHasWarehouseId\" IS NULL THEN \"This_is_called_with_Value\"\n"
						+ "				ELSE \"This_has_Value\" END,\n"
						+ "			\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\",\n"
						+ "			\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\",\n"
						+ "			\"This_is_triggered_by_ProcessRun_with_ProcessRunHasProcessRunId\"\n"
						+ "		FROM soberano.\"StockChange\" sc\n"
						+ "			LEFT JOIN soberano.\"Stock\" st\n"
						+ "				ON sc.\"This_takes_value_from_Warehouse_with_WarehouseHasWarehouseId\" = st.\"WarehouseHasWarehouseId\"\n"
						+ "					AND sc.\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" = st.\"InventoryItemHasInventoryItemCode\"\n"
						+ "		WHERE \"StockChangeHasStockChangeId\" = stockChangeId\n"
						+ "		INTO quantity,\n"
						+ "			unitvalue,\n"
						+ "			warehouse,\n"
						+ "			inventoryitem,\n"
						+ "			processRunId;\n"
						+ "			\n"
						+ "	--current corresponding stock state	\n"
						+ "	SELECT 	\"Quantity\",\n"
						+ "			\"This_has_Value\"\n"
						+ "		FROM soberano.\"Stock\"\n"
						+ "			WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "				AND \"InventoryItemHasInventoryItemCode\" = inventoryitem\n"
						+ "		INTO pQty, pValue;\n"
						+ "		\n"
						+ "	--update stock change\n"
						+ "	UPDATE soberano.\"StockChange\" SET \"This_is_called_with_Value\" = unitvalue, \n"
						+ "										   \"This_saves_previous_Quantity\" = pQty, \n"
						+ "										   \"This_saves_previous_Value\" = pValue\n"
						+ "		WHERE \"StockChangeHasStockChangeId\" = stockChangeId;\n"
						+ "		\n"
						+ "	--update stock. \n"
						+ "	SELECT CASE WHEN \"Quantity\" + quantity <= 0 THEN 0\n"
						+ "				WHEN quantity <= 0 THEN \"This_has_Value\"\n"
						+ "				WHEN \"Quantity\" < 0 THEN unitvalue\n"
						+ "				ELSE (\"Quantity\" * \"This_has_Value\" + quantity * unitvalue) / (\"Quantity\" + quantity) END\n"
						+ "		FROM soberano.\"Stock\"\n"
						+ "		WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "			AND \"InventoryItemHasInventoryItemCode\" = inventoryItem\n"
						+ "		INTO newStockUnitValue;\n"
						+ "		\n"
						+ "	UPDATE soberano.\"Stock\" \n"
						+ "		SET \"This_has_Value\" = newStockUnitValue,\n"
						+ "			\"Quantity\" = \"Quantity\" + quantity\n"
						+ "		WHERE \"WarehouseHasWarehouseId\" = warehouse\n"
						+ "				AND \"InventoryItemHasInventoryItemCode\" = inventoryItem;\n"
						+ "				\n"
						+ "	--if it is an input of a process run\n"
						+ "	IF EXISTS(SELECT * \n"
						+ "				FROM soberano.\"ProcessRunInput\" \n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "					AND \"InventoryItemHasInventoryItemCode\" = inventoryItem)\n"
						+ "		AND NOT quantity > 0 THEN\n"
						+ "\n"
						+ "		--update input value for proper following process run output values recalculation\n"
						+ "		UPDATE soberano.\"ProcessRunInputValue\"\n"
						+ "			SET \"Value\" = newStockUnitValue * CASE WHEN quantity < 0 THEN 0 ELSE abs(quantity) END\n"
						+ "			WHERE \"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "					AND \"InventoryItemHasInventoryItemCode\" = inventoryItem;\n"
						+ "\n"
						+ "		SELECT SUM(\"Value\") FROM soberano.\"ProcessRunInputValue\"\n"
						+ "			WHERE \"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "			INTO outputsTotalValue;\n"
						+ "\n"
						+ "		/******************************************************************/\n"
						+ "		/* almost the same as soberano.\"fn_ProcessRun_close\" 	    	  */\n"
						+ "		/* it's about process run output values matching the input values */\n"
						+ "		/******************************************************************/\n"
						+ "		\n"
						+ "		--process run output values are to be recalculated next\n"
						+ "		DELETE FROM soberano.\"ProcessRunOutputValue\"\n"
						+ "			WHERE \"ProcessRunHasProcessRunId\" = processrunid;\n"
						+ "		\n"
						+ "		--distribute outputs total value among outputs and update output warehouse stocks.\n"
						+ "		--the weights of outputs equal to zero are redistributed among the other ones\n"
						+ "		weighttoredistribute := 0;\n"
						+ "		producedoutputcount := 0;\n"
						+ "		FOR itemRecord IN SELECT pro.\"InventoryItemHasInventoryItemCode\" item,\n"
						+ "									pro.\"Quantity\" quantity,\n"
						+ "									pro.\"This_value_is_weighted_by_WeightCoefficient\" weight,\n"
						+ "									pr.\"This_is_at_DateTime\" datetime\n"
						+ "								FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "									INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "										ON pr.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "											AND pro.\"ProcessRunHasProcessRunId\" = processrunid LOOP\n"
						+ "								\n"
						+ "			--no production of this output\n"
						+ "			IF itemRecord.quantity = 0 THEN\n"
						+ "\n"
						+ "				--no output value is recorded\n"
						+ "\n"
						+ "				--its weight must be redistributed among the other ones\n"
						+ "				weighttoredistribute := weighttoredistribute + itemRecord.weight;\n"
						+ "			ELSE\n"
						+ "				outputvalue := itemRecord.quantity * outputsTotalValue * itemRecord.weight / 100;	\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"ProcessRunOutputValue\"(\"Value\", \n"
						+ "															 \"ProcessRunHasProcessRunId\", \n"
						+ "															 \"InventoryItemHasInventoryItemCode\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "					SELECT outputvalue, \n"
						+ "							processrunid, \n"
						+ "							itemRecord.item,\n"
						+ "							\"CurrencyHasCurrencyId\"\n"
						+ "						FROM soberano.\"Currency\" WHERE \"Currency_is_system_currency\";\n"
						+ "\n"
						+ "				producedoutputcount := producedoutputcount + 1;\n"
						+ "			END IF;\n"
						+ "\n"
						+ "			UPDATE soberano.\"ProcessRunOutput\"\n"
						+ "				SET \"This_value_is_weighted_by_WeightCoefficient\" = itemRecord.weight\n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "					AND \"InventoryItemHasInventoryItemCode\" = itemRecord.item;\n"
						+ "					\n"
						+ " 			processRunDateTime := itemRecord.datetime;\n"
						+ "		END LOOP;\n"
						+ "\n"
						+ "		--only outputs with quantity > 0 have rows in soberano.\"ProcessRunOutputValue\"\n"
						+ "		UPDATE soberano.\"ProcessRunOutputValue\" prov\n"
						+ "			SET \"Value\" = \"Value\" + pro.\"Quantity\" * outputsTotalValue * weighttoredistribute / producedoutputcount / 100\n"
						+ "			FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "			WHERE prov.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "				AND prov.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "				AND prov.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\";\n"
						+ "	END IF;	\n"
						+ "END;\n"
						+ "$BODY$;",
						
					
					
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Stock_restoreToStateBefore\"(\n"
						+ "	startdatetime timestamp with time zone,\n"
						+ "	inventoryitem character varying)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		--for each warehouse, restore stock to its state before the recalculation starting date\n"
						+ "		UPDATE soberano.\"Stock\" stock \n"
						+ "			SET \"Quantity\" = COALESCE(sc.\"This_saves_previous_Quantity\" + sc.\"This_is_called_with_Quantity\", 0),\n"
						+ "				\"This_has_Value\" = CASE WHEN sc.\"This_saves_previous_Quantity\" + sc.\"This_is_called_with_Quantity\" = 0 THEN 0\n"
						+ "										ELSE COALESCE((sc.\"This_saves_previous_Value\" *  sc.\"This_saves_previous_Quantity\" \n"
						+ "									+ sc.\"This_is_called_with_Value\" * sc.\"This_is_called_with_Quantity\") /\n"
						+ "									(sc.\"This_saves_previous_Quantity\" + sc.\"This_is_called_with_Quantity\"), 0) END\n"
						+ "			FROM (SELECT \"This_saves_previous_Quantity\",\n"
						+ "				  		\"This_is_called_with_Quantity\",\n"
						+ "				  		\"This_saves_previous_Value\",\n"
						+ "				  		\"This_is_called_with_Value\",\n"
						+ "				  		\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\",\n"
						+ "				  		\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\"\n"
						+ "					FROM soberano.\"StockChange\"\n"
						+ "					WHERE \"This_is_at_DateTime\" < startdatetime\n"
						+ "						AND \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" = inventoryItem\n"
						+ "					ORDER BY \"This_is_at_DateTime\" DESC, \"StockChangeHasStockChangeId\" DESC\n"
						+ "					LIMIT 1) sc\n"
						+ "			WHERE stock.\"WarehouseHasWarehouseId\" = sc.\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "				AND stock.\"InventoryItemHasInventoryItemCode\" = sc.\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\";\n"
						+ "		\n"
						+ "		--but for innocuous stock change insertions post recalculation starting date\n"
						+ "		--(see soberano.\"fn_Stock_change\"(timestamp with time zone,...), stock quantities\n"
						+ "		--and values must be set to zero.\n"
						+ "		UPDATE soberano.\"Stock\" stock \n"
						+ "			SET \"Quantity\" = 0,\n"
						+ "				\"This_has_Value\" = 0\n"
						+ "			FROM (SELECT \"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\",\n"
						+ "				  		\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\"\n"
						+ "					FROM soberano.\"StockChange\"\n"
						+ "					WHERE \"This_is_at_DateTime\" >= startdatetime\n"
						+ "						AND \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" = inventoryItem\n"
						+ "						AND \"This_is_called_with_Quantity\" = 0 \n"
						+ "						AND \"This_is_called_with_Value\" = 0 \n"
						+ "						AND \"This_saves_previous_Quantity\" = 0 \n"
						+ "						AND \"This_saves_previous_Value\" = 0\n"
						+ "				 		AND \"This_is_triggered_by_MaterialExpense_with_ExpenseHasExpenseId\" IS NULL\n"
						+ "						AND \"This_takes_value_from_Warehouse_with_WarehouseHasWarehouseId\" IS NULL) sc\n"
						+ "			WHERE stock.\"WarehouseHasWarehouseId\" = sc.\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "				AND stock.\"InventoryItemHasInventoryItemCode\" = sc.\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\";\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Stock_recalculateInventoryFrom\"(\n"
						+ "	startdatetime timestamp with time zone)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		stockChangeRecord record;	\n"
						+ "		inputItemRecord record;	\n"
						+ "		inputStockChangeRecord record;\n"
						+ "	BEGIN\n"
						+ "		PERFORM soberano.\"fn_Stock_restoreToStateBefore\"(startDateTime, \"InventoryItemHasInventoryItemCode\")\n"
						+ "			FROM soberano.\"InventoryItem\";\n"
						+ "		\n"
						+ "		--rerun the item's stock changes (inventory history) from start time\n"
						+ "		FOR stockChangeRecord IN SELECT \"StockChangeHasStockChangeId\",\n"
						+ "										\"This_is_triggered_by_ProcessRun_with_ProcessRunHasProcessRunId\" processRunId,\n"
						+ "										\"This_is_called_with_Quantity\" qty,\n"
						+ "										\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" inventoryItem\n"
						+ "									FROM soberano.\"StockChange\"\n"
						+ "									WHERE \"This_is_at_DateTime\" >= startDateTime \n"
						+ "									ORDER BY \"This_is_at_DateTime\" ASC, \"StockChangeHasStockChangeId\" ASC LOOP\n"
						+ "									\n"
						+ "			/*this stock change record corresponds to a process run input. it needs to be rerun.*/\n"
						+ "			IF stockChangeRecord.processRunId IS NOT NULL\n"
						+ "				AND NOT stockChangeRecord.qty > 0 THEN\n"
						+ "				\n"
						+ "				--restore all input stock values\n"
						+ "				UPDATE soberano.\"ProcessRunInputValue\" pri\n"
						+ "					SET \"Value\" = stock.\"This_has_Value\"\n"
						+ "					FROM soberano.\"Stock\" stock\n"
						+ "					WHERE pri.\"ProcessRunHasProcessRunId\" = stockChangeRecord.processRunId\n"
						+ "							AND pri.\"InventoryItemHasInventoryItemCode\" = stockChangeRecord.inventoryItem\n"
						+ "								AND pri.\"InventoryItemHasInventoryItemCode\" = stock.\"InventoryItemHasInventoryItemCode\";\n"
						+ "			END IF;\n"
						+ "			PERFORM soberano.\"fn_Stock_change\"(stockChangeRecord.\"StockChangeHasStockChangeId\");\n"
						+ "		END LOOP;		\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_create\"(\n"
						+ "	material integer,\n"
						+ "	unit integer,\n"
						+ "	quantity numeric,\n"
						+ "	provider integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		normalizedQuantity numeric;\n"
						+ "		inventoryItem character varying;\n"
						+ "		expenseTimeStamp timestamp with time zone;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('MaterialExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 AND quantity >= 0 THEN\n"
						+ "					\n"
						+ "						--as the expense timestamp it is taken the\n"
						+ "						--init time of the expense day closure\n"
						+ "						SELECT expensedate +\n"
						+ "								make_time(\"This_has_ShiftClosureHours\",\n"
						+ "										 \"This_has_ShiftClosureMinutes\",\n"
						+ "										 0)\n"
						+ "							FROM soberano.\"Configuration\"\n"
						+ "							LIMIT 1\n"
						+ "							INTO expenseTimeStamp;\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expenseTimeStamp, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"AcquisitionExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "																  \"This_pays_Provider_with_ProviderHasProviderId\")\n"
						+ "							VALUES (itemId, provider);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"MaterialExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															   \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"MaterialAcquisition\"(\"This_is_for_Quantity\", \n"
						+ "																   \"ExpenseHasExpenseId\", \n"
						+ "																   \"AcquirableMaterialHasAcquirableMaterialId\", \n"
						+ "																   \"This_is_in_Unit_with_UnitHasUnitId\")\n"
						+ "							VALUES (ROUND(quantity, 8),\n"
						+ "								   itemId,\n"
						+ "								   material,\n"
						+ "								   unit);\n"
						+ "								   \n"
						+ "						SELECT iitem.\"InventoryItemHasInventoryItemCode\",\n"
						+ "								quantity * \"Factor\"\n"
						+ "							FROM soberano.\"AcquirableMaterial\" am\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "									ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "										AND uconversion.\"Unit1_UnitHasUnitId\" = unit\n"
						+ "							WHERE am.\"AcquirableMaterialHasAcquirableMaterialId\" = material\n"
						+ "							INTO inventoryItem,\n"
						+ "								normalizedQuantity;\n"
						+ "								\n"
						+ "						----------------\n"
						+ "						--update stock--\n"
						+ "						----------------						\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(expenseTimeStamp,\n"
						+ "													inventoryItem, \n"
						+ "													\"WarehouseHasWarehouseId\",\n"
						+ "													normalizedQuantity,\n"
						+ "													amount * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" / normalizedQuantity,\n"
						+ "													itemId,\n"
						+ "													NULL,\n"
						+ "													false,\n"
						+ "													NULL) \n"
						+ "						FROM soberano.\"Warehouse\", soberano.\"Currency\"\n"
						+ "						WHERE \"Warehouse_is_procurement_warehouse\"\n"
						+ "								AND \"CurrencyHasCurrencyId\" = currency;\n"
						+ "								\n"
						+ "						--recalculate inventory from expense datetime\n"
						+ "						PERFORM soberano.\"fn_Stock_recalculateInventoryFrom\"(expenseTimeStamp);\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_MaterialExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseTimeStamp timestamp with time zone;\n"
						+ "		inventoryItem character varying;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"InventoryItemHasInventoryItemCode\",\n"
						+ "				expense.\"This_is_at_DateTime\",\n"
						+ "				materialexpense.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\",\n"
						+ "				\"StockChangeHasStockChangeId\"\n"
						+ "			FROM soberano.\"MaterialExpense\" materialexpense\n"
						+ "				INNER JOIN soberano.\"StockChange\" sc\n"
						+ "					ON materialexpense.\"ExpenseHasExpenseId\" = sc.\"This_is_triggered_by_MaterialExpense_with_ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = materialexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN soberano.\"MaterialAcquisition\" acq\n"
						+ "					ON acq.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN soberano.\"AcquirableMaterial\" amat\n"
						+ "					ON amat.\"AcquirableMaterialHasAcquirableMaterialId\" = acq.\"AcquirableMaterialHasAcquirableMaterialId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										materialexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE materialexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO inventoryItem,\n"
						+ "				expenseTimeStamp,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= CAST(expenseTimeStamp AS date)) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Expense_tt ' || CAST(expenseid AS text) || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				--delete the stock change recorded by the expense is being canceled\n"
						+ "				DELETE FROM soberano.\"StockChange\" sc\n"
						+ "					WHERE \"This_is_triggered_by_MaterialExpense_with_ExpenseHasExpenseId\" = expenseid;\n"
						+ "				\n"
						+ "				--recalculate inventory from expense datetime				\n"
						+ "				PERFORM soberano.\"fn_Stock_recalculateInventoryFrom\"(expenseTimeStamp);\n"
						+ "				\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					CAST('' AS character varying),\n"
						+ "							  					service.\"This_has_Name\" || ' : ' || service.\"This_has_Code\",\n"
						+ "							  					provider.\"This_has_Name\",\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(18, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ServiceExpense\" servexpense\n"
						+ "											ON instance.\"InstanceId\" = servexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON servexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"AcquisitionExpense\" acqexpense\n"
						+ "							  				ON servexpense.\"ExpenseHasExpenseId\" = acqexpense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Provider\" provider\n"
						+ "							  				ON acqexpense.\"This_pays_Provider_with_ProviderHasProviderId\" = provider.\"ProviderHasProviderId\"\n"
						+ "							 			INNER JOIN soberano.\"Service\" service\n"
						+ "							  				ON servexpense.\"This_is_on_Service_with_ServiceHasServiceId\" = service.\"ServiceHasServiceId\"\n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_ServiceExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_create\"(\n"
						+ "	service integer,\n"
						+ "	provider integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('ServiceExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 THEN\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expensedate, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"AcquisitionExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "																  \"This_pays_Provider_with_ProviderHasProviderId\")\n"
						+ "							VALUES (itemId, provider);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ServiceExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															   \"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "															 \"This_is_on_Service_with_ServiceHasServiceId\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId,\n"
						+ "								   service);\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ServiceExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseDate date;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT expense.\"This_is_at_DateTime\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ServiceExpense\" serviceexpense\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = serviceexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										serviceexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE serviceexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO expenseDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= expenseDate) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Expense_tt ' || CAST(expenseid AS text) || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"expenseId\" integer, \"conceptName\" character varying, description text, \"payeeName\" character varying, reference character varying, \"expenseDate\" timestamp with time zone, \"recordingDate\" timestamp with time zone, \"expenseAmount\" numeric, \"expenseCurrency\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT expense.\"ExpenseHasExpenseId\",\n"
						+ "							  					CAST('' AS character varying),\n"
						+ "							  					CAST('' AS text),\n"
						+ "							  					CAST(worker.\"This_has_FirstName\" || ' ' || worker.\"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\" AS character varying),\n"
						+ "							  					expense.\"This_has_Reference\",\n"
						+ "							  					expense.\"This_is_at_DateTime\",\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate,\n"
						+ "							  					amount.\"Amount\",\n"
						+ "							  					currency.\"This_has_Currency_code\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(11, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"PayrollExpense\" payrollexpense\n"
						+ "											ON instance.\"InstanceId\" = payrollexpense.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"Expense\" expense\n"
						+ "							  				ON payrollexpense.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "							  			INNER JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON payrollexpense.\"This_pays_Worker_with_WorkerHasWorkerId\" = worker.\"WorkerHasWorkerId\"\n"
						+ "							 			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN soberano.\"ExpenseAmount\" amount\n"
						+ "											ON amount.\"ExpenseHasExpenseId\" = expense.\"ExpenseHasExpenseId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" currency\n"
						+ "											ON amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = currency.\"CurrencyHasCurrencyId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_PayrollExpense_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_create\"(\n"
						+ "	worker integer,\n"
						+ "	reference character varying,\n"
						+ "	expensedate date,\n"
						+ "	amount numeric,\n"
						+ "	currency integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId := -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('PayrollExpense', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--the date is equal to today or earlier\n"
						+ "			IF (SELECT date_trunc('day', now()) >= expenseDate) THEN\n"
						+ "			\n"
						+ "				--the shift hasn't been closed\n"
						+ "				IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "									INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "										ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "								--or it has, but the closure was canceled\n"
						+ "								WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "									--for the closure's shift\n"
						+ "									AND \"This_is_of_Shift\" = expenseDate) THEN\n"
						+ "									\n"
						+ "					IF amount >= 0 THEN\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"Expense\"(\"This_is_at_DateTime\", \n"
						+ "												   \"This_has_Reference\")\n"
						+ "							VALUES (expensedate, reference) \n"
						+ "							RETURNING \"ExpenseHasExpenseId\" INTO itemId;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"ExpenseAmount\"(\"Amount\", \n"
						+ "															 \"ExpenseHasExpenseId\", \n"
						+ "															 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							VALUES (ROUND(amount, 8),\n"
						+ "								   itemId,\n"
						+ "								   currency);\n"
						+ "								   \n"
						+ "						INSERT INTO soberano.\"PayrollExpense\"(\"ExpenseHasExpenseId\", \n"
						+ "															  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "															  \"This_pays_Worker_with_WorkerHasWorkerId\")\n"
						+ "							VALUES (itemId,\n"
						+ "								   entityTypeInstanceId,\n"
						+ "								   worker);\n"
						+ "					ELSE\n"
						+ "						itemId := -4;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					itemId := -3;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				itemId := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PayrollExpense_disable\"(\n"
						+ "	expenseid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "		expenseDate date;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT expense.\"This_is_at_DateTime\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"PayrollExpense\" payrollexpense\n"
						+ "				INNER JOIN soberano.\"Expense\" expense\n"
						+ "					ON expense.\"ExpenseHasExpenseId\" = payrollexpense.\"ExpenseHasExpenseId\"\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										payrollexpense.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE payrollexpense.\"ExpenseHasExpenseId\" = expenseid\n"
						+ "			INTO expenseDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND \"This_is_of_Shift\" >= expenseDate) THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_Expense_tt ' || CAST(expenseid AS text) || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -3;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_ShiftClosure_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"shiftClosureId\" integer, shift date, \"closureTime\" timestamp with time zone, \"recordingDate\" timestamp with time zone) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT shiftclosure.\"ShiftClosureHasShiftClosureId\",\n"
						+ "							  					shiftclosure.\"This_is_of_Shift\",\n"
						+ "							  					\"This_has_ClosureTime\",							  					\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" recordingDate\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(20, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ShiftClosure\" shiftclosure\n"
						+ "											ON instance.\"InstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\") sq\n"
						+ "						ORDER BY recordingDate DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_getReport\"(\n"
						+ "	lang character,\n"
						+ "	closureid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	report text;\n"
						+ "	previousClosureTime timestamp with time zone;\n"
						+ "	shift date;\n"
						+ "	closureTime timestamp with time zone;\n"
						+ "	sales numeric;\n"
						+ "	receivables numeric;\n"
						+ "	incomes numeric;\n"
						+ "	materialExpenses numeric;\n"
						+ "	serviceExpenses numeric;\n"
						+ "	payrollExpenses numeric;\n"
						+ "	expenses numeric;\n"
						+ "	profit numeric;\n"
						+ "	expenseToSaleRatio numeric;\n"
						+ "	cash numeric;\n"
						+ "	lastOrderTime timestamp with time zone;\n"
						+ "	expRecord RECORD;\n"
						+ "	\n"
						+ "BEGIN\n"
						+ "	shift := now();\n"
						+ "	closureTime := now();\n"
						+ "	report := '';\n"
						+ "	sales := 0;\n"
						+ "	receivables := 0;\n"
						+ "	incomes := 0;\n"
						+ "	materialExpenses := 0;\n"
						+ "	serviceExpenses := 0;\n"
						+ "	payrollExpenses := 0;\n"
						+ "	expenses := 0;\n"
						+ "	profit := 0;\n"
						+ "	expenseToSaleRatio := 0;\n"
						+ "	cash := 0;\n"
						+ "	lastOrderTime := '2023-01-01';\n"
						+ "		\n"
						+ "	--the user has rights to record a closure,\n"
						+ "	IF (soberano.\"fn_ShiftClosure_closureAllowed\"(loginname))\n"
						+ "	\n"
						+ "		--or make decisions on an existing closure\n"
						+ "		OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(20, 1, loginname)) THEN\n"
						+ "		\n"
						+ "			--the user is requesting the report of an existing closure\n"
						+ "			IF (closureId != 0) THEN\n"
						+ "				SELECT \"This_is_of_Shift\", \n"
						+ "						\"This_is_created_at_Timestamp\" \n"
						+ "					FROM soberano.\"ShiftClosure\" shiftclosure\n"
						+ "						INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "							ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "								AND shiftclosure.\"ShiftClosureHasShiftClosureId\" = closureId\n"
						+ "					INTO shift, closureTime;\n"
						+ "			END IF;\n"
						+ "	\n"
						+ "			--get previous shift closure time\n"
						+ "			SELECT COALESCE(\"This_has_ClosureTime\", CAST('1/1/2000' AS timestamp with time zone))\n"
						+ "				FROM soberano.\"ShiftClosure\" shiftclosure\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = shiftclosure.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND \"This_has_ClosureTime\" < closureTime\n"
						+ "				ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 1\n"
						+ "				INTO previousClosureTime;\n"
						+ "			\n"
						+ "			--time of last order\n"
						+ "			lastOrderTime := now();\n"
						+ "\n"
						+ "			--sales\n"
						+ "			sales := CASE WHEN sales IS NULL THEN 0 ELSE sales END;\n"
						+ "\n"
						+ "			--receivables\n"
						+ "			receivables := CASE WHEN receivables IS NULL THEN 0 ELSE receivables END;\n"
						+ "\n"
						+ "			--incomes\n"
						+ "			incomes := sales - receivables;\n"
						+ "\n"
						+ "			--material expenses\n"
						+ "			SELECT COALESCE(SUM(\"Amount\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"), 0)\n"
						+ "				FROM soberano.\"ExpenseAmount\" amount\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					INNER JOIN soberano.\"MaterialExpense\" mate\n"
						+ "						ON mate.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN soberano.\"Expense\" expense\n"
						+ "						ON expense.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = mate.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND \"This_is_at_DateTime\" > previousClosureTime\n"
						+ "						AND \"This_is_at_DateTime\" <= closureTime INTO materialExpenses;\n"
						+ "\n"
						+ "			--services expenses\n"
						+ "			SELECT COALESCE(SUM(\"Amount\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"), 0)\n"
						+ "				FROM soberano.\"ExpenseAmount\" amount\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					INNER JOIN soberano.\"ServiceExpense\" mate\n"
						+ "						ON mate.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN soberano.\"Expense\" expense\n"
						+ "						ON expense.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = mate.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND \"This_is_at_DateTime\" > previousClosureTime\n"
						+ "						AND \"This_is_at_DateTime\" <= closureTime INTO serviceExpenses;\n"
						+ "\n"
						+ "			--payroll expenses\n"
						+ "			SELECT COALESCE(SUM(\"Amount\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"), 0) \n"
						+ "				FROM soberano.\"ExpenseAmount\" amount\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = amount.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					INNER JOIN soberano.\"PayrollExpense\" mate\n"
						+ "						ON mate.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN soberano.\"Expense\" expense\n"
						+ "						ON expense.\"ExpenseHasExpenseId\" = amount.\"ExpenseHasExpenseId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = mate.\"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "\n"
						+ "				--not cancelled\n"
						+ "				WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "					AND \"This_is_at_DateTime\" > previousClosureTime\n"
						+ "						AND \"This_is_at_DateTime\" <= closureTime INTO serviceExpenses;\n"
						+ "\n"
						+ "			--profit\n"
						+ "			profit := sales - materialExpenses - serviceExpenses - payrollExpenses;\n"
						+ "			\n"
						+ "			--expense-to-sales ratio\n"
						+ "			IF sales > 0 THEN\n"
						+ "				expenseToSaleRatio := (materialExpenses + serviceExpenses + payrollExpenses) / sales * 100;\n"
						+ "			ELSE\n"
						+ "				expenseToSaleRatio := 0;\n"
						+ "			END IF;			\n"
						+ "\n"
						+ "			--cash\n"
						+ "			SELECT COALESCE(SUM(\"Balance\" * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"), 0)\n"
						+ "				FROM soberano.\"CashRegisterHasBalanceInCurrency\" balance\n"
						+ "					INNER JOIN soberano.\"Currency\" currency\n"
						+ "						ON currency.\"CurrencyHasCurrencyId\" = balance.\"CurrencyHasCurrencyId\"\n"
						+ "				INTO cash;\n"
						+ "\n"
						+ "			--order details\n"
						+ "\n"
						+ "			--ordered item details\n"
						+ "\n"
						+ "			--canceled ordered items\n"
						+ "\n"
						+ "			--sales by product category\n"
						+ "\n"
						+ "			--expense details\n"
						+ "\n"
						+ "			/*************************/\n"
						+ "			/* build the report body */\n"
						+ "			/*************************/\n"
						+ "			report := report || 'tt_SHIFT_CLOSURE_tt' || chr(13) || chr(13);\n"
						+ "			report := report || '=== ' || 'tt_SUMMARY_tt' || ' ===' || chr(13);\n"
						+ "			report := report || 'tt_SHIFT_tt' || ': ' || to_char(shift, 'YYYY/MM/DD') || chr(13);\n"
						+ "			report := report || 'tt_LAST_ORDER_tt' || ': ' || \n"
						+ "				CASE WHEN lastOrderTime IS NULL THEN '' ELSE to_char(lastOrderTime, 'YYYY/MM/DD HH24:MI') END || chr(13);\n"
						+ "			report := report || 'tt_CLOSURE_TIME_tt' || ': ' || to_char(closureTime, 'YYYY/MM/DD HH24:MI') || chr(13);\n"
						+ "			report := report || 'tt_SALES_tt' || ': ' || sales || chr(13);\n"
						+ "			report := report || 'tt_RECEIVABLES_tt' || ': ' || receivables || chr(13);\n"
						+ "			report := report || 'tt_INCOMES_tt' || ': ' || incomes || chr(13);\n"
						+ "			report := report || 'tt_MATERIAL_EXPENSES_tt' || ': ' || materialExpenses || chr(13);\n"
						+ "			report := report || 'tt_SERVICE_EXPENSES_tt' || ': ' || serviceExpenses || chr(13);\n"
						+ "			report := report || 'tt_PAYROLL_EXPENSES_tt' || ': ' || payrollExpenses || chr(13);\n"
						+ "			report := report || 'tt_PROFITS_tt' || ': ' || profit || chr(13);\n"
						+ "			report := report || 'tt_COST_TO_INCOME_RATIO_tt' || ': ' || expenseToSaleRatio || '%' || chr(13);\n"
						+ "			report := report || 'tt_CASH_tt ' || cash || chr(13);\n"
						+ "			report := report || '=== ' || 'tt_SUMMARY_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_ORDER_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_ORDER_TIME_tt' || '     ' || 'tt_ORDER_ID_tt' || '     ' || 'tt_ORDER_AMOUNT_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_ORDER_DETAILS_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_ITEM_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_ITEM_NAME_tt' || '     ' || 'tt_ITEM_COUNT_tt' || '     ' || 'tt_ITEM_AMOUNT_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);			\n"
						+ "			report := report || '=== ' || 'tt_ITEM_DETAILS_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "\n"
						+ "			report := report || '=== ' || 'tt_MATERIAL_EXPENSE_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_EXPENSE_PROVIDER_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_MATERIAL_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_DESCRIPTION_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_AMOUNT_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_CURRENCY_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_REFERENCE_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_MaterialExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"conceptName\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"conceptName\" || chr(13);\n"
						+ "				report := report || expRecord.\"description\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_SERVICE_EXPENSE_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_EXPENSE_PROVIDER_tt'\n"
						+ "					|| '     ' || 'tt_EXPENSE_DESCRIPTION_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_AMOUNT_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_CURRENCY_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_REFERENCE_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_ServiceExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"description\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"description\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_PAYROLL_EXPENSE_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_EXPENSE_WORKER_tt'\n"
						+ "					|| '     ' || 'tt_EXPENSE_AMOUNT_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_CURRENCY_tt' \n"
						+ "					|| '     ' || 'tt_EXPENSE_REFERENCE_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);\n"
						+ "			\n"
						+ "			FOR expRecord IN SELECT * FROM soberano.\"fn_PayrollExpense_getAll\"(lang, loginname) \n"
						+ "								WHERE CAST(\"expenseDate\" AS date) = shift ORDER BY \"payeeName\" ASC, \"reference\" ASC LOOP\n"
						+ "\n"
						+ "				report := report || expRecord.\"payeeName\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseAmount\" || chr(13);\n"
						+ "				report := report || expRecord.\"expenseCurrency\" || chr(13);\n"
						+ "				report := report || expRecord.\"reference\" || chr(13) || chr(13);\n"
						+ "			END LOOP;\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_EXPENSE_DETAILS_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			\n"
						+ "			report := report || '=== ' || 'tt_MENU_SECTION_DETAILS_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "			report := report || 'tt_MENU_SECTION_tt' || '     ' || 'tt_ITEM_COUNT_tt' || '     ' || 'tt_ITEM_AMOUNT_tt' || chr(13);\n"
						+ "			report := report || '----- ' || chr(13);	\n"
						+ "			report := report || '=== ' || 'tt_MENU_SECTION_DETAILS_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "	\n"
						+ "			report := report || '=== ' || 'tt_REPORT_END_tt' || ' ===' || chr(13) || chr(13);\n"
						+ "	END IF;\n"
						+ "	RETURN report;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryItem_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectStringId\" character varying, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT am.\"InventoryItemHasInventoryItemCode\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(7, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"AcquirableMaterial\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							 UNION\n"
						+ "							 SELECT DISTINCT am.\"InventoryItemHasInventoryItemCode\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(13, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Product\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"operationId\" integer, \n"
						+ "				  \"fromWarehouse\" character varying, \n"
						+ "				  \"toWarehouse\" character varying, \n"
						+ "				  \"worker\" text, \n"
						+ "				  description text, \n"
						+ "				  \"operationDate\" timestamp with time zone, \n"
						+ "				  \"recordingDate\" timestamp with time zone) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT operation.\"InventoryOperationHasInventoryOperationId\" operationId,\n"
						+ "							  					fromWarehouse.\"This_has_Name\" fromwh,\n"
						+ "							  					toWarehouse.\"This_has_Name\" towh,\n"
						+ "							  					worker.\"This_has_FirstName\" || ' ' || worker.\"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\" w,\n"
						+ "							  					STRING_AGG(inventoryItem.\"This_has_Name\" || ' ' || movedItem.\"Quantity\" || ' ' || unit.\"Acronym\",\n"
						+ "							  								chr(13)\n"
						+ "							  								ORDER BY inventoryItem.\"This_has_Name\") movedi,\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" od,\n"
						+ "							  					eti.\"This_is_created_at_Timestamp\" rd\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(21, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"InventoryOperation\" operation\n"
						+ "											ON instance.\"InstanceId\" = operation.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"InventoryItemMovement\" movedItem\n"
						+ "							  				ON movedItem.\"InventoryOperationHasInventoryOperationId\" = operation.\"InventoryOperationHasInventoryOperationId\"\n"
						+ "							  			INNER JOIN soberano.\"InventoryItem\" inventoryItem\n"
						+ "							  				ON inventoryItem.\"InventoryItemHasInventoryItemCode\" = movedItem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							  			INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "							  				ON unit.\"UnitHasUnitId\" = inventoryItem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "							  					AND unit.\"Language\" = lang						  \n"
						+ "							  			INNER JOIN soberano.\"Warehouse\" fromWarehouse\n"
						+ "							  				ON fromWarehouse.\"WarehouseHasWarehouseId\" = operation.\"This_moves_items_from_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "							  			INNER JOIN soberano.\"Warehouse\" toWarehouse\n"
						+ "							  				ON toWarehouse.\"WarehouseHasWarehouseId\" = operation.\"This_moves_items_to_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "							  			INNER JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON operation.\"Worker_with_WorkerHasWorkerId_takes_responsibility_of_items_mov\" = worker.\"WorkerHasWorkerId\" \n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "							 	GROUP BY operationId, fromwh, towh, w, od, rd) sq\n"
						+ "						ORDER BY operationId DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_InventoryOperation_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_create\"(\n"
						+ "	fromwarehouse integer,\n"
						+ "	towarehouse integer,\n"
						+ "	worker integer,\n"
						+ "	inventoryitems character varying[],\n"
						+ "	units integer[],\n"
						+ "	quantities numeric[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		operationId integer;\n"
						+ "		normalizedQuantity numeric;\n"
						+ "		inventoryItemValueAtOrigin numeric;\n"
						+ "		inventoryItemQuantityAtOrigin numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		operationId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('InventoryOperation', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			INSERT INTO soberano.\"InventoryOperation\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "													  \"This_moves_items_from_Warehouse_with_WarehouseHasWarehouseId\", \n"
						+ "													  \"This_moves_items_to_Warehouse_with_WarehouseHasWarehouseId\", \n"
						+ "													  \"Worker_with_WorkerHasWorkerId_takes_responsibility_of_items_mov\")\n"
						+ "				VALUES (entityTypeInstanceId,\n"
						+ "					   fromWarehouse,\n"
						+ "					   toWarehouse,\n"
						+ "					   worker)\n"
						+ "				RETURNING \"InventoryOperationHasInventoryOperationId\" INTO operationId;\n"
						+ "				\n"
						+ "			IF array_lower(inventoryItems, 1) IS NOT NULL AND array_upper(inventoryItems, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(inventoryItems, 1) .. array_upper(inventoryItems, 1) LOOP\n"
						+ "			\n"
						+ "					SELECT * FROM (SELECT quantities[i] * \"Factor\"\n"
						+ "								FROM soberano.\"AcquirableMaterial\" am\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "										ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "										ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND uconversion.\"Unit1_UnitHasUnitId\" = units[i]\n"
						+ "								WHERE am.\"InventoryItemHasInventoryItemCode\" = inventoryItems[i]\n"
						+ "								UNION\n"
						+ "								SELECT quantities[i] * \"Factor\"\n"
						+ "									FROM soberano.\"Product\" am\n"
						+ "										INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "											ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "												AND uconversion.\"Unit1_UnitHasUnitId\" = units[i]\n"
						+ "									WHERE am.\"InventoryItemHasInventoryItemCode\" = inventoryItems[i]) sq\n"
						+ "								INTO normalizedQuantity;\n"
						+ "								\n"
						+ "					SELECT \"Quantity\", \n"
						+ "							\"This_has_Value\"\n"
						+ "						FROM soberano.\"Stock\" stock\n"
						+ "							INNER JOIN soberano.\"Warehouse\" origin\n"
						+ "								ON stock.\"WarehouseHasWarehouseId\" = origin.\"WarehouseHasWarehouseId\"\n"
						+ "									AND stock.\"WarehouseHasWarehouseId\" = fromWarehouse\n"
						+ "										AND stock.\"InventoryItemHasInventoryItemCode\" = inventoryItems[i]\n"
						+ "						INTO inventoryItemQuantityAtOrigin, \n"
						+ "							inventoryItemValueAtOrigin;				\n"
						+ "								\n"
						+ "					PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "													   inventoryItems[i], \n"
						+ "														fromWarehouse,\n"
						+ "														-normalizedQuantity,\n"
						+ "														CAST(0 AS numeric),\n"
						+ "													    NULL,\n"
						+ "													  	NULL,\n"
						+ "													  	true,\n"
						+ "													  	NULL);\n"
						+ "														\n"
						+ "					IF inventoryItemQuantityAtOrigin > 0 AND \n"
						+ "						normalizedQuantity > inventoryItemQuantityAtOrigin THEN\n"
						+ "						\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "												   inventoryItems[i], \n"
						+ "													toWarehouse,\n"
						+ "													inventoryItemQuantityAtOrigin,\n"
						+ "													inventoryItemValueAtOrigin,\n"
						+ "													NULL,\n"
						+ "													NULL, --fromWarehouse,\n"
						+ "													true,\n"
						+ "													NULL);\n"
						+ "\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "												   inventoryItems[i], \n"
						+ "													toWarehouse,\n"
						+ "													normalizedQuantity - inventoryItemQuantityAtOrigin,\n"
						+ "													CAST(0 AS numeric),\n"
						+ "													NULL,\n"
						+ "													NULL,\n"
						+ "													true,\n"
						+ "													NULL);\n"
						+ "													\n"
						+ "					ELSIF normalizedQuantity <= inventoryItemQuantityAtOrigin THEN\n"
						+ "					\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "													   inventoryItems[i], \n"
						+ "														toWarehouse,\n"
						+ "														normalizedQuantity,\n"
						+ "														inventoryItemValueAtOrigin,\n"
						+ "														NULL,\n"
						+ "														fromWarehouse,\n"
						+ "														true,\n"
						+ "														NULL);\n"
						+ "														\n"
						+ "					ELSIF inventoryItemQuantityAtOrigin <= 0 OR inventoryItemQuantityAtOrigin IS NULL THEN\n"
						+ "														\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "													   inventoryItems[i], \n"
						+ "														toWarehouse,\n"
						+ "														normalizedQuantity,\n"
						+ "														CAST(0 AS numeric),\n"
						+ "														NULL,\n"
						+ "														NULL,\n"
						+ "														true,\n"
						+ "														NULL);\n"
						+ "						\n"
						+ "					END IF;\n"
						+ "														\n"
						+ "					INSERT INTO soberano.\"InventoryItemMovement\"(\"Quantity\", \n"
						+ "																  \"InventoryOperationHasInventoryOperationId\", \n"
						+ "																  \"InventoryItemHasInventoryItemCode\")\n"
						+ "						VALUES (normalizedQuantity,\n"
						+ "							   operationId,\n"
						+ "							   inventoryItems[i]);	\n"
						+ "				END LOOP;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN operationId;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getStockCount\"(\n"
						+ "	warehouseId integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_InventoryOperation_getStock\"(warehouseId, lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getStock\"(\n"
						+ "	warehouseid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"inventoryItemCode\" character varying, \"inventoryItemName\" character varying, quantity numeric, unit character varying, \"unitValue\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT stock.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							  				inventoryItem.\"This_has_Name\",\n"
						+ "							  				SUM(stock.\"Quantity\"),\n"
						+ "							  				unit.\"Acronym\",\n"
						+ "							  				CASE WHEN SUM(stock.\"Quantity\") <= 0 THEN 0 \n"
						+ "							  						ELSE ROUND(SUM(stock.\"Quantity\" * stock.\"This_has_Value\") / SUM(stock.\"Quantity\"), 8) END\n"
						+ "									FROM soberano.\"Stock\" stock\n"
						+ "							  			INNER JOIN soberano.\"InventoryItem\" inventoryItem\n"
						+ "							  				ON inventoryItem.\"InventoryItemHasInventoryItemCode\" = stock.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							  			INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "							  				ON unit.\"UnitHasUnitId\" = inventoryItem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "							  					AND unit.\"Language\" = lang\n"
						+ "							  		WHERE --user can make decisions on inventory operations \n"
						+ "							  			(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(21, 1, loginname))\n"
						+ "											--or user can execute inventory operations\n"
						+ "											OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_E439FAF1-C89D-4C86-A1F7-0A970074FA02', loginname)))\n"
						+ "										AND (stock.\"WarehouseHasWarehouseId\" = warehouseId OR warehouseId = 0)						  \n"
						+ "							 	GROUP BY stock.\"InventoryItemHasInventoryItemCode\",\n"
						+ "										inventoryItem.\"This_has_Name\",\n"
						+ "										unit.\"Acronym\") sq\n"
						+ "						ORDER BY \"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Customer_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		--in domainObjectName is returned the qualified name of the customer\n"
						+ "		RETURN QUERY SELECT \"CustomerHasCustomerId\", qualifiedName\n"
						+ "						FROM (SELECT DISTINCT \"CustomerHasCustomerId\", \n"
						+ "							  				(\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || u.\"This_includes_EmailAddress\") qualifiedName\n"
						+ "						FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(22, 1, loginname) instance\n"
						+ "							INNER JOIN soberano.\"Customer\" customer\n"
						+ "								ON instance.\"InstanceId\" = customer.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							INNER JOIN soberano.\"ContactData\" u\n"
						+ "								ON u.\"ContactDataHasContactDataId\" = customer.\"This_has_ContactData_with_ContactDataHasContactDataId\") sq\n"
						+ "						ORDER BY qualifiedName;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Customer_create\"(\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	discount numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		customerId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		customerId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Customer', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			--create postal address\n"
						+ "			INSERT INTO soberano.\"PostalAddress\"(\"This_includes_Town\", \n"
						+ "												 \"This_includes_PostalCode\", \n"
						+ "												 \"This_includes_AddressString\", \n"
						+ "												 \"This_includes_Latitute\", \n"
						+ "												 \"This_includes_Longitude\", \n"
						+ "												 \"This_includes_City\", \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\")\n"
						+ "				VALUES (town,\n"
						+ "					   postalCode,\n"
						+ "					   address,\n"
						+ "					   latitude,\n"
						+ "					   longitude,\n"
						+ "					   city,\n"
						+ "					   municipalityId) \n"
						+ "				RETURNING \"PostalAddressHasPostalAddressId\" INTO postalAddressId;\n"
						+ "				\n"
						+ "			--create contact data\n"
						+ "			INSERT INTO soberano.\"ContactData\"(\"This_includes_PhoneNumber\", \n"
						+ "											   \"This_includes_EmailAddress\", \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\")\n"
						+ "				VALUES (mobilePhoneNumber,\n"
						+ "					   emailAddress,\n"
						+ "					   postalAddressId) \n"
						+ "				RETURNING \"ContactDataHasContactDataId\" INTO contactDataId;\n"
						+ "				\n"
						+ "			--create customer\n"
						+ "			INSERT INTO soberano.\"Customer\"(\"This_has_FirstName\", \n"
						+ "											\"This_has_LastName\", \n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											\"This_is_granted_a_DiscountRate\", \n"
						+ "											\"This_has_ContactData_with_ContactDataHasContactDataId\")\n"
						+ "				VALUES (firstName,\n"
						+ "					   lastName,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   discount,\n"
						+ "					   contactDataId) \n"
						+ "				RETURNING \"CustomerHasCustomerId\" INTO customerId;\n"
						+ "		END IF;\n"
						+ "		RETURN customerId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Customer_modify\"(\n"
						+ "	customerid integer,\n"
						+ "	firstname character varying,\n"
						+ "	lastname character varying,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	discount numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "						\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\",\n"
						+ "						\"ContactDataHasContactDataId\"\n"
						+ "					FROM soberano.\"Customer\" objecttable\n"
						+ "						INNER JOIN soberano.\"ContactData\" contactdata\n"
						+ "							ON objecttable.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contactdata.\"ContactDataHasContactDataId\"\n"
						+ "					WHERE \"CustomerHasCustomerId\" = customerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				postalAddressId,\n"
						+ "				contactDataId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the customer\n"
						+ "			UPDATE soberano.\"Customer\" \n"
						+ "				SET \"This_has_LastName\" = lastname, \n"
						+ "					\"This_has_FirstName\" = firstname,\n"
						+ "					\"This_is_granted_a_DiscountRate\" = discount\n"
						+ "				WHERE \"CustomerHasCustomerId\" = customerid;\n"
						+ "		\n"
						+ "			--update postal address\n"
						+ "			UPDATE soberano.\"PostalAddress\" SET \"This_includes_Town\" = town, \n"
						+ "												 \"This_includes_PostalCode\" = postalcode, \n"
						+ "												 \"This_includes_AddressString\" = address, \n"
						+ "												 \"This_includes_Latitute\" = latitude, \n"
						+ "												 \"This_includes_Longitude\" = longitude, \n"
						+ "												 \"This_includes_City\" = city, \n"
						+ "												 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipalityid \n"
						+ "				WHERE \"PostalAddressHasPostalAddressId\" = postalAddressId;\n"
						+ "				\n"
						+ "			--update contact data\n"
						+ "			UPDATE soberano.\"ContactData\" SET \"This_includes_PhoneNumber\" = mobilePhoneNumber, \n"
						+ "											   \"This_includes_EmailAddress\" = emailAddress, \n"
						+ "											   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = postalAddressId\n"
						+ "				WHERE \"ContactDataHasContactDataId\" = contactDataId;\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_CUSTOMER_tt ' || CAST(customerId AS text) || ' : ' || firstname || ' ' || lastname || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Customer_disable\"(\n"
						+ "	customerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		qualifiedName text;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.*,\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM (SELECT \"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || \"This_includes_EmailAddress\"\n"
						+ "					FROM soberano.\"Customer\" objecttable\n"
						+ "						INNER JOIN soberano.\"ContactData\" contactdata\n"
						+ "							ON objecttable.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contactdata.\"ContactDataHasContactDataId\"\n"
						+ "					WHERE \"CustomerHasCustomerId\" = customerid) objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				qualifiedName,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_CUSTOMER_tt ' || CAST(customerid AS text) || ' : ' || qualifiedName || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Customer_get\"(\n"
						+ "	customerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \n"
						+ "				  \"entityTypeInstanceId\" integer, \n"
						+ "				  \"emailAddress\" character varying,\n"
						+ "				  \"firstName\" character varying, \n"
						+ "				  \"lastName\" character varying,\n"
						+ "				  \"mobilePhoneNumber\" character varying, \n"
						+ "				  \"countryCode\" character, \n"
						+ "				  address character varying, \n"
						+ "				  \"postalCode\" character varying, \n"
						+ "				  town character varying, \n"
						+ "				  \"municipalityId\" integer, \n"
						+ "				  city character varying, \n"
						+ "				  \"provinceId\" integer, \n"
						+ "				  latitude double precision, \n"
						+ "				  longitude double precision, \n"
						+ "				  discount numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"CustomerHasCustomerId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_includes_EmailAddress\",\n"
						+ "										\"This_has_FirstName\",\n"
						+ "										\"This_has_LastName\",\n"
						+ "										\"This_includes_PhoneNumber\",\n"
						+ "										\"This_belongs_to_Country_with_CountryHasCountryCode\",\n"
						+ "										\"This_includes_AddressString\",\n"
						+ "										\"This_includes_PostalCode\",\n"
						+ "										\"This_includes_Town\",\n"
						+ "										\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\",\n"
						+ "										\"This_includes_City\",\n"
						+ "										\"This_belongs_to_Province_with_ProvinceHasProvinceId\",\n"
						+ "										\"This_includes_Latitute\",\n"
						+ "										\"This_includes_Longitude\",\n"
						+ "									 	\"This_is_granted_a_DiscountRate\"\n"
						+ "								FROM soberano.\"Customer\" customer\n"
						+ "									INNER JOIN soberano.\"ContactData\" contact\n"
						+ "										ON customer.\"This_has_ContactData_with_ContactDataHasContactDataId\" = contact.\"ContactDataHasContactDataId\"\n"
						+ "									INNER JOIN soberano.\"PostalAddress\" address\n"
						+ "										ON contact.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = address.\"PostalAddressHasPostalAddressId\"\n"
						+ "									INNER JOIN soberano.\"Municipality\" municipality\n"
						+ "										ON address.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipality.\"MunicipalityHasMunicipalityId\"\n"
						+ "									INNER JOIN soberano.\"Province\" province\n"
						+ "										ON municipality.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = province.\"ProvinceHasProvinceId\"\n"
						+ "								WHERE \"CustomerHasCustomerId\" = customerid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_getCurrencies\"(\n"
						+ "	cashregisterid integer,\n"
						+ "	excludeCash boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"entityTypeInstanceId\" integer, \"itemName\" character varying, \"itemCode\" character varying, \"isSystemCurrency\" boolean, \"isPriceReferenceCurrency\" boolean, \"isCash\" boolean, \"exchangeRate\" numeric, \"itemPosition\" integer, \"paymentProcessor\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT curr.\"CurrencyHasCurrencyId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_has_Currency_code\",\n"
						+ "										\"Currency_is_system_currency\",\n"
						+ "										\"Currency_is_price_reference_currency\",\n"
						+ "										\"Currency_is_cash\",\n"
						+ "										\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "										\"This_is_shown_in_Position\",\n"
						+ "										\"PaymentProcessorHasPaymentProcessorId\"\n"
						+ "								FROM soberano.\"Currency\" curr\n"
						+ "									INNER JOIN\n"
						+ "										soberano.\"PaymentProcessorIsUsedForCurrency\" pp\n"
						+ "											ON curr.\"CurrencyHasCurrencyId\" = pp.\"CurrencyHasCurrencyId\"\n"
						+ "									INNER JOIN\n"
						+ "										metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON curr.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "												\n"
						+ "												--only enabled currencies\n"
						+ "												AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 2\n"
						+ "								WHERE (curr.\"Currency_is_cash\" AND NOT excludeCash)\n"
						+ "										OR NOT curr.\"Currency_is_cash\"\n"
						+ "									AND (--user is allowed to deposit, withdraw, balance, or it is an auditor\n"
						+ "											1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_87225364-61F0-4563-B1BC-E601F83D0B6E', loginname))	\n"
						+ "											OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_5C00E9C9-05FC-4B07-A1F4-A679E4A52D6D', loginname))\n"
						+ "											OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_41FC249B-08AC-4DC8-A024-431318812945', loginname))	\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(23, 1, loginname))\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(24, 1, loginname))\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(26, 1, loginname)))\n"
						+ "								ORDER BY \"This_is_shown_in_Position\"; \n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_get\"(\n"
						+ "	cashregisterid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"cashRegisterId\" integer, \"entityTypeInstanceId\" integer, printer integer, \"currencyCode\" character varying, balance numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT crcurr.\"CashRegisterHasCashRegisterId\",\n"
						+ "							\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "							\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\",\n"
						+ "							\"This_has_Currency_code\",\n"
						+ "							CASE WHEN \"Balance\" IS NULL THEN CAST(0 AS numeric) ELSE ROUND(\"Balance\", 8) END\n"
						+ "							FROM (SELECT \"CashRegisterHasCashRegisterId\", \n"
						+ "										cr.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\",\n"
						+ "										\"CurrencyHasCurrencyId\",\n"
						+ "										\"This_has_Currency_code\"\n"
						+ "									FROM soberano.\"CashRegister\" cr, soberano.\"Currency\"\n"
						+ "									WHERE \"Currency_is_cash\"\n"
						+ "										AND (--user is allowed to deposit, withdraw, balance, or it is an auditor\n"
						+ "											1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_87225364-61F0-4563-B1BC-E601F83D0B6E', loginname))	\n"
						+ "											OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_5C00E9C9-05FC-4B07-A1F4-A679E4A52D6D', loginname))\n"
						+ "											OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_41FC249B-08AC-4DC8-A024-431318812945', loginname))	\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(23, 1, loginname))\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(24, 1, loginname))\n"
						+ "											OR EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(26, 1, loginname)))\n"
						+ "									ORDER BY \"This_is_shown_in_Position\") crcurr\n"
						+ "								LEFT JOIN soberano.\"CashRegisterHasBalanceInCurrency\" b\n"
						+ "									ON crcurr.\"CashRegisterHasCashRegisterId\" = b.\"CashRegisterHasCashRegisterId\"\n"
						+ "										AND b.\"CurrencyHasCurrencyId\" = crcurr.\"CurrencyHasCurrencyId\";\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_getAllOperationsCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_CashRegister_getAllOperations\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_getAllOperations\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"entityTypeInstanceId\" integer, \"operationId\" integer, operation text, worker text, description text, \"recordingDate\" timestamp with time zone) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  					deposit.\"DepositHasDepositId\",\n"
						+ "							  					'#TO_TRANSLATE(DEPOSIT)#',\n"
						+ "							  					\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\",\n"
						+ "							  					STRING_AGG(curr.\"This_has_Currency_code\" || ' ' || ROUND(\"Amount\", 8) || ' ' || chr(8644) || ROUND(\"This_uses_ExchangeRate\", 8),\n"
						+ "							  								chr(13)\n"
						+ "							  								ORDER BY curr.\"This_has_Currency_code\") || chr(13) || \"This_has_Note\",\n"
						+ "							  					\"This_is_created_at_Timestamp\" rd\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(23, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Deposit\" deposit\n"
						+ "											ON instance.\"InstanceId\" = deposit.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							  			INNER JOIN soberano.\"DepositAmount\" da\n"
						+ "							  				ON deposit.\"DepositHasDepositId\" = da.\"DepositHasDepositId\"\n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "							  			INNER JOIN metamodel.\"User\" u\n"
						+ "							  				ON eti.\"This_is_created_by_User_with_UserHasUserId\" = u.\"UserHasUserId\"\n"
						+ "										INNER JOIN soberano.\"Currency\" curr\n"
						+ "							  				ON curr.\"CurrencyHasCurrencyId\" = da.\"CurrencyHasCurrencyId\"\n"
						+ "							  			LEFT JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON u.\"This_has_LoginName\" = worker.\"This_has_LoginName\"\n"
						+ "							  		GROUP BY \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  				deposit.\"DepositHasDepositId\",\n"
						+ "							  				\"This_has_FirstName\",\n"
						+ "							  				\"This_has_LastName\",\n"
						+ "							  				worker.\"This_has_LoginName\",\n"
						+ "							  				\"This_is_created_at_Timestamp\"\n"
						+ "							 \n"
						+ "							 UNION\n"
						+ "							 \n"
						+ "							 SELECT DISTINCT \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  					withdrawal.\"WithdrawalHasWithdrawalId\",\n"
						+ "							  					'#TO_TRANSLATE(WITHDRAWAL)#',\n"
						+ "							  					\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\",\n"
						+ "							  					STRING_AGG(curr.\"This_has_Currency_code\" || ' ' || ROUND(\"Amount\", 8) || ' ' || chr(8644) || ROUND(\"This_uses_ExchangeRate\", 8),\n"
						+ "							  								chr(13)\n"
						+ "							  								ORDER BY curr.\"This_has_Currency_code\") || chr(13) || \"This_has_Note\",\n"
						+ "							  					\"This_is_created_at_Timestamp\" rd\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(24, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Withdrawal\" withdrawal\n"
						+ "											ON instance.\"InstanceId\" = withdrawal.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							   			INNER JOIN soberano.\"WithdrawalAmount\" wa\n"
						+ "							  				ON withdrawal.\"WithdrawalHasWithdrawalId\" = wa.\"WithdrawalHasWithdrawalId\"\n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "							  			INNER JOIN metamodel.\"User\" u\n"
						+ "							  				ON eti.\"This_is_created_by_User_with_UserHasUserId\" = u.\"UserHasUserId\"\n"
						+ "							  			INNER JOIN soberano.\"Currency\" curr\n"
						+ "							  				ON curr.\"CurrencyHasCurrencyId\" = wa.\"CurrencyHasCurrencyId\"\n"
						+ "							  			LEFT JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON u.\"This_has_LoginName\" = worker.\"This_has_LoginName\"\n"
						+ "							  		GROUP BY \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  				withdrawal.\"WithdrawalHasWithdrawalId\",\n"
						+ "							  				\"This_has_FirstName\",\n"
						+ "							  				\"This_has_LastName\",\n"
						+ "							  				worker.\"This_has_LoginName\",\n"
						+ "							  				\"This_is_created_at_Timestamp\"\n"
						+ "							 \n"
						+ "							 UNION\n"
						+ "							 \n"
						+ "							 SELECT DISTINCT \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  					balancing.\"BalancingHasBalancingId\",\n"
						+ "							  					'#TO_TRANSLATE(BALANCING)#',\n"
						+ "							  					\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || worker.\"This_has_LoginName\",\n"
						+ "							  					STRING_AGG(curr.\"This_has_Currency_code\" || chr(13) ||\n"
						+ "														   '#TO_TRANSLATE(EXPECTED)#' || ': ' || ROUND(eb.\"Balance\", 8) || chr(13) ||\n"
						+ "														   '#TO_TRANSLATE(COUNTED)#' || ': ' || ROUND(cb.\"Balance\", 8) || chr(13),\n"
						+ "														   chr(13)\n"
						+ "							  							   ORDER BY curr.\"This_has_Currency_code\") || chr(13) || \"This_has_Note\",\n"
						+ "							  					\"This_is_created_at_Timestamp\" rd\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(26, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Balancing\" balancing\n"
						+ "											ON instance.\"InstanceId\" = balancing.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							  			INNER JOIN soberano.\"CashRegister\" cr \n"
						+ "							  				ON cr.\"CashRegisterHasCashRegisterId\" = balancing.\"This_is_of_CashRegister_with_CashRegisterHasCashRegisterId\"\n"
						+ "							  			INNER JOIN soberano.\"CountedBalance\" cb\n"
						+ "							  				ON balancing.\"BalancingHasBalancingId\" = cb.\"BalancingHasBalancingId\"\n"
						+ "							  			INNER JOIN soberano.\"CashRegisterHasBalanceInCurrency\" eb\n"
						+ "							  				ON eb.\"CashRegisterHasCashRegisterId\" = balancing.\"This_is_of_CashRegister_with_CashRegisterHasCashRegisterId\"\n"
						+ "							  					AND cr.\"CashRegisterHasCashRegisterId\" = eb.\"CashRegisterHasCashRegisterId\"\n"
						+ "							  			INNER JOIN soberano.\"Currency\" curr\n"
						+ "							  				ON curr.\"CurrencyHasCurrencyId\" = eb.\"CurrencyHasCurrencyId\"\n"
						+ "							  					AND curr.\"CurrencyHasCurrencyId\" = cb.\"CurrencyHasCurrencyId\"						  \n"
						+ "							   			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "							  			INNER JOIN metamodel.\"User\" u\n"
						+ "							  				ON eti.\"This_is_created_by_User_with_UserHasUserId\" = u.\"UserHasUserId\"\n"
						+ "							  			INNER JOIN soberano.\"Worker\" worker\n"
						+ "							  				ON u.\"This_has_LoginName\" = worker.\"This_has_LoginName\"\n"
						+ "							  		GROUP BY \"EntityTypeInstanceHasEntityTypeInstanceId\",\n"
						+ "							  				balancing.\"BalancingHasBalancingId\",\n"
						+ "							  				\"This_has_FirstName\",\n"
						+ "							  				\"This_has_LastName\",\n"
						+ "							  				worker.\"This_has_LoginName\",\n"
						+ "							  				\"This_is_created_at_Timestamp\"\n"
						+ "							 			) sq\n"
						+ "						ORDER BY \"EntityTypeInstanceHasEntityTypeInstanceId\" DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_RULE_CONSTRAINT_12\"(\n"
						+ "	currencyids integer[],\n"
						+ "	cashregisterid integer,\n"
						+ "	excludeCash boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS boolean\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN currencyIds = ARRAY(SELECT \"itemId\" \n"
						+ "								   	FROM soberano.\"fn_CashRegister_getCurrencies\"(cashregisterid, excludeCash, loginname));\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Deposit_create\"(\n"
						+ "	cashregister integer,\n"
						+ "	excludecash boolean,\n"
						+ "	orderid integer,\n"
						+ "	receivable integer,\n"
						+ "	currencyids integer[],\n"
						+ "	amounts numeric[],\n"
						+ "	notes character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		depositId integer;\n"
						+ "		constraint12met boolean;\n"
						+ "		systemCurrencyId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		depositId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Deposit', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_CashRegister_RULE_CONSTRAINT_12\"(currencyIds, cashRegister, excludeCash, loginname) INTO constraint12met;\n"
						+ "		\n"
						+ "			IF constraint12met THEN\n"
						+ "			\n"
						+ "				SELECT \"CurrencyHasCurrencyId\" \n"
						+ "					FROM soberano.\"Currency\" \n"
						+ "					WHERE \"Currency_is_system_currency\"\n"
						+ "					INTO systemCurrencyId;\n"
						+ "			\n"
						+ "				INSERT INTO soberano.\"Deposit\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											   \"This_is_to_CashRegister_with_CashRegisterHasCashRegisterId\", \n"
						+ "											   \"This_is_for_Order_with_OrderHasOrderId\", \n"
						+ "											   \"This_is_for_Receivable_with_ReceivableHasReceivableId\",\n"
						+ "											   \"ExchangeRate_is_used_from_order_currency_on_This\",\n"
						+ "											   \"Currency_with_CurrencyHasCurrencyId_is_system_currency_on_This\",\n"
						+ "											   \"This_has_Note\")\n"
						+ "					SELECT entityTypeInstanceId,\n"
						+ "						   cashRegister,\n"
						+ "						   orderId,\n"
						+ "						   receivable,\n"
						+ "						   \n"
						+ "						   --any order output price row serves for taking the exchange rate from the order currency\n"
						+ "						   --to the current system currency. the agreed price is in the currency that was the \n"
						+ "						   --system currency upon opening the order. so MAX, since usually an order has several items,\n"
						+ "						   --every of them priced in the same currency\n"
						+ "						   MAX(\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"),\n"
						+ "						   systemCurrencyId,\n"
						+ "						   notes\n"
						+ "						FROM soberano.\"Order\" ord\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" price\n"
						+ "								ON ord.\"OrderHasOrderId\" = price.\"OrderHasOrderId\"\n"
						+ "									AND ord.\"OrderHasOrderId\" = orderId\n"
						+ "							INNER JOIN soberano.\"Currency\" curr\n"
						+ "								ON curr.\"CurrencyHasCurrencyId\" = price.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					RETURNING \"DepositHasDepositId\" INTO depositId;\n"
						+ "					\n"
						+ "				IF array_lower(currencyIds, 1) IS NOT NULL AND array_upper(currencyIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "					FOR i IN array_lower(currencyIds, 1) .. array_upper(currencyIds, 1) LOOP\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"DepositAmount\"(\"Amount\", \n"
						+ "															 \"This_uses_ExchangeRate\", \n"
						+ "															 \"DepositHasDepositId\", \n"
						+ "															 \"CurrencyHasCurrencyId\")\n"
						+ "							SELECT amounts[i],\n"
						+ "									\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "									depositId,\n"
						+ "									currencyIds[i]\n"
						+ "									FROM soberano.\"Currency\"\n"
						+ "										WHERE \"CurrencyHasCurrencyId\" = currencyIds[i];\n"
						+ "										\n"
						+ "						PERFORM soberano.\"fn_CashRegister_updateBalance\"(1,\n"
						+ "																	 cashRegister,\n"
						+ "																	 currencyIds[i],\n"
						+ "																	 amounts[i]);\n"
						+ "					END LOOP;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				depositId := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN depositId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"--operations: 1 deposit, 2 withdrawal, 3 balancing\n"
						+ "CREATE OR REPLACE FUNCTION soberano.\"fn_CashRegister_updateBalance\"(operation integer,\n"
						+ "																	 cashregister integer,\n"
						+ "																	 currencyid integer,\n"
						+ "																	 amount numeric)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		IF NOT EXISTS(SELECT * \n"
						+ "					  	FROM soberano.\"CashRegisterHasBalanceInCurrency\"\n"
						+ "					 	WHERE \"CurrencyHasCurrencyId\" = currencyid) THEN\n"
						+ "			\n"
						+ "			INSERT INTO soberano.\"CashRegisterHasBalanceInCurrency\"(\"Balance\", \n"
						+ "																	\"CurrencyHasCurrencyId\", \n"
						+ "																	\"CashRegisterHasCashRegisterId\")\n"
						+ "				SELECT CASE operation \n"
						+ "							WHEN 1 THEN amount\n"
						+ "							WHEN 2 THEN -amount\n"
						+ "							WHEN 3 THEN amount END,\n"
						+ "						currencyid,\n"
						+ "					   	cashregister;\n"
						+ "		ELSE\n"
						+ "			UPDATE soberano.\"CashRegisterHasBalanceInCurrency\"\n"
						+ "				SET \"Balance\" = CASE operation \n"
						+ "									WHEN 1 THEN \"Balance\" + amount\n"
						+ "									WHEN 2 THEN \"Balance\" - amount\n"
						+ "									WHEN 3 THEN amount END\n"
						+ "				WHERE \"CashRegisterHasCashRegisterId\" = cashregister\n"
						+ "					AND \"CurrencyHasCurrencyId\" = currencyid;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Withdrawal_create\"(\n"
						+ "	cashregister integer,\n"
						+ "	excludecash boolean,\n"
						+ "	orderid integer,\n"
						+ "	receivable integer,\n"
						+ "	currencyids integer[],\n"
						+ "	amounts numeric[],\n"
						+ "	notes character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		withdrawalId integer;\n"
						+ "		constraint12met boolean;\n"
						+ "		systemCurrencyId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		withdrawalId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Withdrawal', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_CashRegister_RULE_CONSTRAINT_12\"(currencyIds, cashRegister, excludeCash, loginname) INTO constraint12met;\n"
						+ "		\n"
						+ "			IF constraint12met THEN\n"
						+ "			\n"
						+ "				SELECT \"CurrencyHasCurrencyId\" \n"
						+ "					FROM soberano.\"Currency\" \n"
						+ "					WHERE \"Currency_is_system_currency\"\n"
						+ "					INTO systemCurrencyId;\n"
						+ "			\n"
						+ "				INSERT INTO soberano.\"Withdrawal\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											   \"This_is_from_CashRegister_with_CashRegisterHasCashRegisterId\", \n"
						+ "											   \"This_is_for_Order_with_OrderHasOrderId\", \n"
						+ "											   \"This_is_for_Receivable_with_ReceivableHasReceivableId\",\n"
						+ "											   \"ExchangeRate_is_used_from_order_currency_on_This\",\n"
						+ "											   \"Currency_with_CurrencyHasCurrencyId_is_system_currency_on_This\",\n"
						+ "											   \"This_has_Note\")\n"
						+ "					SELECT entityTypeInstanceId,\n"
						+ "							   cashRegister,\n"
						+ "							   orderId,\n"
						+ "							   receivable,\n"
						+ "\n"
						+ "							   --any order output price row serves for taking the exchange rate from the order currency\n"
						+ "							   --to the current system currency. the agreed price is in the currency that was the \n"
						+ "							   --system currency upon opening the order. so MAX, since usually an order has several items,\n"
						+ "							   --every of them priced in the same currency\n"
						+ "							   MAX(\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"),\n"
						+ "							   systemCurrencyId,\n"
						+ "							   notes\n"
						+ "							FROM soberano.\"Order\" ord\n"
						+ "								INNER JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" price\n"
						+ "									ON ord.\"OrderHasOrderId\" = price.\"OrderHasOrderId\"\n"
						+ "										AND ord.\"OrderHasOrderId\" = orderId\n"
						+ "								INNER JOIN soberano.\"Currency\" curr\n"
						+ "									ON curr.\"CurrencyHasCurrencyId\" = price.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "					RETURNING \"WithdrawalHasWithdrawalId\" INTO withdrawalId;\n"
						+ "					\n"
						+ "				IF array_lower(currencyIds, 1) IS NOT NULL AND array_upper(currencyIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "					FOR i IN array_lower(currencyIds, 1) .. array_upper(currencyIds, 1) LOOP\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"WithdrawalAmount\"(\"Amount\", \n"
						+ "															 \"This_uses_ExchangeRate\", \n"
						+ "															 \"WithdrawalHasWithdrawalId\", \n"
						+ "															 \"CurrencyHasCurrencyId\")\n"
						+ "							SELECT amounts[i],\n"
						+ "									\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\",\n"
						+ "									withdrawalId,\n"
						+ "									currencyIds[i]\n"
						+ "									FROM soberano.\"Currency\"\n"
						+ "										WHERE \"CurrencyHasCurrencyId\" = currencyIds[i];\n"
						+ "										\n"
						+ "						PERFORM soberano.\"fn_CashRegister_updateBalance\"(2,\n"
						+ "																	 cashRegister,\n"
						+ "																	 currencyIds[i],\n"
						+ "																	 amounts[i]);\n"
						+ "					END LOOP;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				withdrawalId := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN withdrawalId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Balancing_create\"(\n"
						+ "	cashregister integer,\n"
						+ "	excludecash boolean,\n"
						+ "	currencyids integer[],\n"
						+ "	amounts numeric[],\n"
						+ "	notes character varying,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		balancingId integer;\n"
						+ "		constraint12met boolean;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		balancingId = -1;	\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('Balancing', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			SELECT soberano.\"fn_CashRegister_RULE_CONSTRAINT_12\"(currencyIds, cashRegister, excludeCash, loginname) INTO constraint12met;\n"
						+ "		\n"
						+ "			IF constraint12met THEN\n"
						+ "			\n"
						+ "				INSERT INTO soberano.\"Balancing\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											   \"This_is_of_CashRegister_with_CashRegisterHasCashRegisterId\",\n"
						+ "											   \"This_has_Note\")\n"
						+ "					VALUES (entityTypeInstanceId,\n"
						+ "						   cashRegister,\n"
						+ "						   notes) \n"
						+ "					RETURNING \"BalancingHasBalancingId\" INTO balancingId;\n"
						+ "					\n"
						+ "				IF array_lower(currencyIds, 1) IS NOT NULL AND array_upper(currencyIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "					FOR i IN array_lower(currencyIds, 1) .. array_upper(currencyIds, 1) LOOP\n"
						+ "					\n"
						+ "						INSERT INTO soberano.\"CountedBalance\"(\"Balance\", \n"
						+ "															 \"BalancingHasBalancingId\", \n"
						+ "															 \"CurrencyHasCurrencyId\")\n"
						+ "							SELECT amounts[i],\n"
						+ "									balancingId,\n"
						+ "									currencyIds[i]\n"
						+ "									FROM soberano.\"Currency\"\n"
						+ "										WHERE \"CurrencyHasCurrencyId\" = currencyIds[i];\n"
						+ "										\n"
						+ "						PERFORM soberano.\"fn_CashRegister_updateBalance\"(3,\n"
						+ "																	 cashRegister,\n"
						+ "																	 currencyIds[i],\n"
						+ "																	 amounts[i]);\n"
						+ "					END LOOP;\n"
						+ "\n"
						+ "				END IF;\n"
						+ "			\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				balancingId := -2;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "		END IF;\n"
						+ "		RETURN balancingId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_ProcessRun_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"operationId\" integer, process character varying, \"costCenter\" character varying, stage character varying, description text, history text, \"recordingDate\" timestamp with time zone, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT run.\"ProcessRunHasProcessRunId\" operationId,\n"
						+ "						proc.\"This_has_Name\" process,\n"
						+ "						cc.\"This_has_Name\" costCenter,\n"
						+ "						st.\"This_has_Name\" stage,\n"
						+ "						soberano.\"fn_ProcessRun_getDescription\"(\"ProcessRunHasProcessRunId\",\n"
						+ "																lang) description,\n"
						+ "						metamodel.\"fn_EntityTypeInstance_getHistory\"(run.\"This_is_identified_by_EntityTypeInstance_id\") history,\n"
						+ "						eti.\"This_is_created_at_Timestamp\" recordingDate,											\n"
						+ "						run.\"This_is_identified_by_EntityTypeInstance_id\" entityTypeInstanceId\n"
						+ "				FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(27, 1, loginname) instance\n"
						+ "					INNER JOIN soberano.\"ProcessRun\" run\n"
						+ "						ON instance.\"InstanceId\" = run.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "					INNER JOIN soberano.\"Process\" proc\n"
						+ "						ON run.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.\"ProcessHasProcessId\"\n"
						+ "					INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "						ON run.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\"\n"
						+ "					INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "						ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = run.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							AND eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "					INNER JOIN metamodel.\"Stage\" st\n"
						+ "						ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "				ORDER BY st.\"This_has_Name\" DESC, run.\"ProcessRunHasProcessRunId\" DESC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_getDescription\"(\n"
						+ "	processrunid integer,\n"
						+ "	lang character)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		inputspec text;\n"
						+ "		outputspec text;\n"
						+ "		description text;\n"
						+ "		prCode character varying;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"This_has_Code\",\n"
						+ "				STRING_AGG(ii.\"This_has_Name\" || ' ' \n"
						+ "						  	|| pri.\"Quantity\" || ' ' \n"
						+ "						  	|| iu.\"Acronym\",\n"
						+ "						  '\\n' ORDER BY ii.\"This_has_Name\")\n"
						+ "			FROM soberano.\"ProcessRunInput\" pri\n"
						+ "				INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "					ON pri.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND pr.\"ProcessRunHasProcessRunId\" = processRunid\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "					ON ii.\"InventoryItemHasInventoryItemCode\" = pri.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN soberano.\"UnitHasAcronymInLanguage\" iu\n"
						+ "					ON iu.\"UnitHasUnitId\" = ii.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "						AND iu.\"Language\" = lang\n"
						+ "			GROUP BY \"This_has_Code\"\n"
						+ "			INTO prCode, inputspec;\n"
						+ "			\n"
						+ "		SELECT STRING_AGG(oi.\"This_has_Name\" || ' ' \n"
						+ "						  	|| pro.\"Quantity\" || ' ' \n"
						+ "						  	|| ou.\"Acronym\",\n"
						+ "						  chr(13) ORDER BY oi.\"This_has_Name\")\n"
						+ "			FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "				INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "					ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND pr.\"ProcessRunHasProcessRunId\" = processRunid\n"
						+ "				INNER JOIN soberano.\"InventoryItem\" oi\n"
						+ "					ON oi.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				INNER JOIN soberano.\"UnitHasAcronymInLanguage\" ou\n"
						+ "					ON ou.\"UnitHasUnitId\" = oi.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "						AND ou.\"Language\" = lang\n"
						+ "			INTO outputspec;\n"
						+ "			\n"
						+ "		SELECT prCode || chr(13) || chr(13) ||\n"
						+ "				'tt_INPUTS_tt' || chr(13) ||\n"
						+ "				inputspec || chr(13) || chr(13) ||\n"
						+ "				'tt_OUTPUTS_tt' || chr(13) ||\n"
						+ "				outputspec\n"
						+ "			INTO description;\n"
						+ "			\n"
						+ "		RETURN description;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_create\"(\n"
						+ "	itemcode character varying,\n"
						+ "	process integer,\n"
						+ "	costcenter integer,\n"
						+ "	inputitems character varying[],\n"
						+ "	inputquantities numeric[],\n"
						+ "	inputunits integer[],\n"
						+ "	outputitems character varying[],\n"
						+ "	outputquantities numeric[],\n"
						+ "	outputunits integer[],\n"
						+ "	weights integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		operationId integer;\n"
						+ "		normalizedQuantity numeric;\n"
						+ "		normalizedUnit numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		operationId = -1;\n"
						+ "		\n"
						+ "		--creation decision order must match cost center order.\n"
						+ "		--a creation decision per order matching enabled cost center\n"
						+ "		IF EXISTS(SELECT * FROM (SELECT rownumber \n"
						+ "									FROM (SELECT \"CostCenterHasCostCenterId\", \n"
						+ "												ROW_NUMBER () OVER (ORDER BY \"CostCenterHasCostCenterId\" ASC) rownumber\n"
						+ "											FROM soberano.\"CostCenter\" coc\n"
						+ "				 								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "				 									ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = coc.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "				 			\n"
						+ "														--cost center is enabled\n"
						+ "														AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 2) sq\n"
						+ "											WHERE \"CostCenterHasCostCenterId\" = costcenter) cc\n"
						+ "								INNER JOIN (SELECT ROW_NUMBER () OVER () rownumber, \"DecisionName\"\n"
						+ "												FROM metamodel.\"fn_User_InstanceCreationDecision\"(1, '_0FA8A5A6-6037-4B1F-AB01-CB0947E3C3AA', 'soberano.user.top')) allde\n"
						+ "									ON cc.rownumber = allde.rownumber\n"
						+ "				 \n"
						+ "				  				--the user must be authorized to create object specifically in that cost center.\n"
						+ "				  				--that is controlled by decision name index \n"
						+ "				 				INNER JOIN (SELECT \"DecisionName\"\n"
						+ "												FROM metamodel.\"fn_User_InstanceCreationDecision\"(1, '_0FA8A5A6-6037-4B1F-AB01-CB0947E3C3AA', loginname)) userde\n"
						+ "									ON allde.\"DecisionName\" = userde.\"DecisionName\") THEN\n"
						+ "									\n"
						+ "			--create entity type instance	\n"
						+ "			SELECT metamodel.\"fn_EntityTypeInstance_create\"('ProcessRun', loginname)\n"
						+ "				INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "			--user has rights to create instance of that entity type\n"
						+ "			IF entityTypeInstanceId > 0 THEN\n"
						+ "\n"
						+ "				--verify process spec: compare IO items and units arrays with the process specs'\n"
						+ "				IF ARRAY(SELECT item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"InventoryItem\" item\n"
						+ "										INNER JOIN soberano.\"ProcessInput\" pinput\n"
						+ "											ON item.\"InventoryItemHasInventoryItemCode\" = pinput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												AND pinput.\"ProcessHasProcessId\" = process\n"
						+ "										ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) = inputItems \n"
						+ "\n"
						+ "					AND\n"
						+ "					\n"
						+ "					ARRAY(SELECT \"UnitHasUnitId\" FROM (SELECT DISTINCT \"UnitHasUnitId\", item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"InventoryItem\" item\n"
						+ "										INNER JOIN soberano.\"ProcessInput\" pinput\n"
						+ "											ON item.\"InventoryItemHasInventoryItemCode\" = pinput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												AND pinput.\"ProcessHasProcessId\" = process\n"
						+ "										INNER JOIN soberano.\"Unit\" unit\n"
						+ "													ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "										ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) sq) = inputUnits\n"
						+ "\n"
						+ "					AND\n"
						+ "\n"
						+ "					ARRAY(SELECT item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"InventoryItem\" item\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" poutput\n"
						+ "									ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										AND poutput.\"ProcessHasProcessId\" = process\n"
						+ "							ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) = outputItems\n"
						+ "\n"
						+ "					AND\n"
						+ "\n"
						+ "					ARRAY(SELECT \"UnitHasUnitId\" FROM (SELECT DISTINCT \"UnitHasUnitId\", item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"InventoryItem\" item\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" poutput\n"
						+ "									ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										AND poutput.\"ProcessHasProcessId\" = process\n"
						+ "								INNER JOIN soberano.\"Unit\" unit\n"
						+ "									ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "							ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) sq) = outputUnits THEN\n"
						+ "\n"
						+ "					INSERT INTO soberano.\"ProcessRun\"(\"This_is_at_DateTime\", \n"
						+ "													  \"This_has_Code\", \n"
						+ "													  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "													  \"This_is_of_Process_with_ProcessHasProcessId\", \n"
						+ "													  \"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\")\n"
						+ "						VALUES(NOW(),\n"
						+ "								itemCode,\n"
						+ "								entityTypeInstanceId,\n"
						+ "								process,\n"
						+ "								costCenter)\n"
						+ "						RETURNING \"ProcessRunHasProcessRunId\" INTO operationId;\n"
						+ "\n"
						+ "					INSERT INTO soberano.\"ProcessRunFixedCost\"(\"FixedCost\", \n"
						+ "															   \"ProcessRunHasProcessRunId\",\n"
						+ "															   \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "						SELECT \"This_has_FixedCost\",\n"
						+ "								operationId,\n"
						+ "								\"CurrencyHasCurrencyId\"\n"
						+ "							FROM soberano.\"Process\", soberano.\"Currency\"\n"
						+ "							WHERE \"ProcessHasProcessId\" = process AND \"Currency_is_system_currency\";\n"
						+ "\n"
						+ "					IF array_lower(inputItems, 1) IS NOT NULL AND array_upper(inputItems, 1) IS NOT NULL THEN\n"
						+ "\n"
						+ "						FOR i IN array_lower(inputItems, 1) .. array_upper(inputItems, 1) LOOP\n"
						+ "							SELECT inputQuantities[i] * \"Factor\",\n"
						+ "									iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "								FROM soberano.\"InventoryItem\" iitem\n"
						+ "									INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "										ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND uconversion.\"Unit1_UnitHasUnitId\" = inputUnits[i]\n"
						+ "								WHERE iitem.\"InventoryItemHasInventoryItemCode\" = inputItems[i]\n"
						+ "								INTO normalizedQuantity, normalizedUnit;\n"
						+ "\n"
						+ "							INSERT INTO soberano.\"ProcessRunInput\"(\"Quantity\", \n"
						+ "																   \"ProcessRunHasProcessRunId\", \n"
						+ "																   \"InventoryItemHasInventoryItemCode\", \n"
						+ "																   \"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "								VALUES (normalizedQuantity, operationId, inputItems[i], normalizedUnit);						\n"
						+ "						END LOOP;\n"
						+ "						\n"
						+ "					END IF;\n"
						+ "					\n"
						+ "					IF array_lower(outputItems, 1) IS NOT NULL AND array_upper(outputItems, 1) IS NOT NULL THEN\n"
						+ "\n"
						+ "						FOR i IN array_lower(outputItems, 1) .. array_upper(outputItems, 1) LOOP\n"
						+ "							SELECT outputQuantities[i] * \"Factor\",\n"
						+ "									iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "								FROM soberano.\"InventoryItem\" iitem\n"
						+ "									INNER JOIN soberano.\"UnitIsConvertedToUnitMultiplyingByFactor\" uconversion\n"
						+ "										ON uconversion.\"Unit2_UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND uconversion.\"Unit1_UnitHasUnitId\" = outputUnits[i]\n"
						+ "								WHERE iitem.\"InventoryItemHasInventoryItemCode\" = outputItems[i]\n"
						+ "								INTO normalizedQuantity, normalizedUnit;\n"
						+ "\n"
						+ "								INSERT INTO soberano.\"ProcessRunOutput\"(\"Quantity\", \n"
						+ "																		\"This_value_is_weighted_by_WeightCoefficient\", \n"
						+ "																		\"ProcessRunHasProcessRunId\", \n"
						+ "																		\"InventoryItemHasInventoryItemCode\", \n"
						+ "																		\"This_is_measured_in_Unit_with_UnitHasUnitId\")\n"
						+ "									VALUES (normalizedQuantity, weights[i], operationId, outputItems[i], normalizedUnit);						\n"
						+ "						END LOOP;\n"
						+ "					END IF;\n"
						+ "				ELSE			\n"
						+ "					operationId = -2;	\n"
						+ "				END IF;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN operationId;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_close\"(\n"
						+ "	processrunid integer,\n"
						+ "	outputitems character varying[],\n"
						+ "	outputquantities numeric[],\n"
						+ "	outputunits integer[],\n"
						+ "	weights integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		inputsWarehouse integer;\n"
						+ "		outputsWarehouse integer;\n"
						+ "		qryResult integer;\n"
						+ "		itemRecord record;\n"
						+ "		qtybefore numeric;\n"
						+ "		qtyafter numeric;\n"
						+ "		unitvaluebefore numeric;\n"
						+ "		inputvalue numeric;\n"
						+ "		outputsTotalValue numeric;\n"
						+ "		i integer;\n"
						+ "		weighttoredistribute numeric;\n"
						+ "		producedoutputcount integer;\n"
						+ "		outputvalue numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				\"This_has_Code\",\n"
						+ "				\"DecisionId\",\n"
						+ "				\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\",\n"
						+ "				\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" \n"
						+ "			FROM (SELECT *, \n"
						+ "						ROW_NUMBER () OVER (ORDER BY \"DecisionId\" ASC) rownumber \n"
						+ "					FROM (SELECT DISTINCT \"DecisionId\", \n"
						+ "											\"DecisionName\"\n"
						+ "							  	\n"
						+ "							  	--important to use here top user, for all the decisions \n"
						+ "						  		--on process runs (lifecycle 27) get retrieved					\n"
						+ "								FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(27, 1, 'soberano.user.top')\n"
						+ "								WHERE \"DecisionName\" LIKE \n"
						+ "\n"
						+ "									/************/\n"
						+ "										'Close%'\n"
						+ "									/************/\n"
						+ "\n"
						+ "								ORDER BY \"DecisionName\") sq) closedec\n"
						+ "			INNER JOIN (SELECT \"CostCenterHasCostCenterId\", \n"
						+ "								\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\",\n"
						+ "								\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\",\n"
						+ "								ROW_NUMBER () OVER (ORDER BY \"CostCenterHasCostCenterId\" ASC) rownumber\n"
						+ "							FROM soberano.\"CostCenter\" coc\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "				 					ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = coc.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "				 			\n"
						+ "										--cost center is enabled\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 2) cc\n"
						+ "				ON cc.rownumber = closedec.rownumber\n"
						+ "			INNER JOIN soberano.\"ProcessRun\" objectdata\n"
						+ "				ON \"DecisionId\" IN (SELECT \"DecisionId\" \n"
						+ "						 				FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "											objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											loginname))\n"
						+ "					AND objectData.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\"\n"
						+ "			WHERE \"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId,\n"
						+ "				inputsWarehouse,\n"
						+ "				outputsWarehouse;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--verify process spec: compare IO items and units arrays with the process specs'\n"
						+ "			IF ARRAY(SELECT item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutput\" poutput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "					 		INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "					 			ON poutput.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "					 				AND pr.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) = outputItems\n"
						+ "\n"
						+ "				AND\n"
						+ "\n"
						+ "				ARRAY(SELECT \"UnitHasUnitId\" FROM (SELECT DISTINCT \"UnitHasUnitId\", item.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutput\" poutput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "					 		INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "					 			ON poutput.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "					 				AND pr.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "								ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC) sq) = outputUnits THEN\n"
						+ "					\n"
						+ "				--RULE_CONSTRAINT_3: weights sum 100			\n"
						+ "				IF (SELECT (SELECT SUM(w) FROM (SELECT UNNEST(weights) as w) as sq) = 100) THEN\n"
						+ "				\n"
						+ "					--calc value transfered to outputs and update input warehouse stocks\n"
						+ "					outputsTotalValue := 0;				\n"
						+ "					FOR itemRecord IN SELECT pri.\"InventoryItemHasInventoryItemCode\" item, \n"
						+ "												pri.\"Quantity\" qtytoconsume,\n"
						+ "												sk.\"Quantity\" qtycurrent,\n"
						+ "												sk.\"This_has_Value\" unitvaluecurrent,\n"
						+ "												cc.\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\" warehouse\n"
						+ "											FROM soberano.\"ProcessRunInput\" pri\n"
						+ "												INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "													ON pri.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "														AND pr.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "												INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "													ON pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\"\n"
						+ "												LEFT JOIN soberano.\"Stock\" sk\n"
						+ "													ON pri.\"InventoryItemHasInventoryItemCode\" = sk.\"InventoryItemHasInventoryItemCode\"\n"
						+ "														AND cc.\"This_consumes_materials_from_InputWarehouse_with_WarehouseHasWa\" = sk.\"WarehouseHasWarehouseId\" LOOP\n"
						+ "\n"
						+ "						IF itemRecord.qtycurrent IS NULL THEN\n"
						+ "							qtybefore := 0;\n"
						+ "							unitvaluebefore := 0;														\n"
						+ "						ELSE\n"
						+ "							qtybefore := itemRecord.qtycurrent;\n"
						+ "							unitvaluebefore := itemRecord.unitvaluecurrent;\n"
						+ "						END IF;\n"
						+ "						\n"
						+ "						IF qtybefore < itemRecord.qtytoconsume THEN						\n"
						+ "							IF qtybefore > 0 THEN							\n"
						+ "								inputvalue := qtybefore * unitvaluebefore;\n"
						+ "							ELSE\n"
						+ "								inputvalue := 0;\n"
						+ "							END IF;						\n"
						+ "						ELSE						\n"
						+ "							inputvalue := itemRecord.qtytoconsume * unitvaluebefore;							\n"
						+ "						END IF;\n"
						+ "						\n"
						+ "						INSERT INTO soberano.\"ProcessRunInputValue\"(\"Value\", \n"
						+ "																	\"ProcessRunHasProcessRunId\", \n"
						+ "																	\"InventoryItemHasInventoryItemCode\", \n"
						+ "																	\"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "							SELECT inputvalue, processrunid, itemRecord.item, \"CurrencyHasCurrencyId\"\n"
						+ "								FROM soberano.\"Currency\" WHERE \"Currency_is_system_currency\";\n"
						+ "						\n"
						+ "						outputsTotalValue := outputsTotalValue + inputvalue;\n"
						+ "						PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "															itemRecord.item,\n"
						+ "															itemRecord.warehouse,\n"
						+ "															-itemRecord.qtytoconsume,\n"
						+ "															CAST(0 AS numeric),\n"
						+ "														    NULL,\n"
						+ "														  	NULL,\n"
						+ "														  	true,\n"
						+ "														  	processrunid);					\n"
						+ "					END LOOP;\n"
						+ "					\n"
						+ "					--distribute outputs total value among outputs and update output warehouse stocks.\n"
						+ "					--the weights of outputs equal to zero are redistributed among the other ones\n"
						+ "					weighttoredistribute := 0;\n"
						+ "					producedoutputcount := 0;\n"
						+ "					i := 1;\n"
						+ "					FOR itemRecord IN SELECT pro.\"InventoryItemHasInventoryItemCode\" item,\n"
						+ "												cc.\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" warehouse\n"
						+ "											FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "												INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "													ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "														AND pr.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "												INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "													ON pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\"\n"
						+ "												LEFT JOIN soberano.\"Stock\" sk\n"
						+ "													ON pro.\"InventoryItemHasInventoryItemCode\" = sk.\"InventoryItemHasInventoryItemCode\"\n"
						+ "														AND cc.\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" = sk.\"WarehouseHasWarehouseId\" LOOP\n"
						+ "						--no production of this output\n"
						+ "						IF outputquantities[i] = 0 THEN\n"
						+ "						\n"
						+ "							--no output value is recorded\n"
						+ "							\n"
						+ "							--its weight must be redistributed among the other ones\n"
						+ "							weighttoredistribute := weighttoredistribute + weights[i];\n"
						+ "						ELSE\n"
						+ "							outputvalue := outputquantities[i] * outputsTotalValue * weights[i] / 100;	\n"
						+ "\n"
						+ "							INSERT INTO soberano.\"ProcessRunOutputValue\"(\"Value\", \n"
						+ "																		 \"ProcessRunHasProcessRunId\", \n"
						+ "																		 \"InventoryItemHasInventoryItemCode\", \n"
						+ "																		 \"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "								SELECT outputvalue, \n"
						+ "										processrunid, \n"
						+ "										itemRecord.item,\n"
						+ "										\"CurrencyHasCurrencyId\"\n"
						+ "									FROM soberano.\"Currency\" WHERE \"Currency_is_system_currency\";\n"
						+ "									\n"
						+ "							producedoutputcount := producedoutputcount + 1;\n"
						+ "						END IF;\n"
						+ "						\n"
						+ "						UPDATE soberano.\"ProcessRunOutput\"\n"
						+ "							SET \"Quantity\" = outputquantities[i], \n"
						+ "								\"This_value_is_weighted_by_WeightCoefficient\" = weights[i]\n"
						+ "							WHERE \"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "								AND \"InventoryItemHasInventoryItemCode\" = itemRecord.item;\n"
						+ "								\n"
						+ "						i := i + 1;\n"
						+ "					END LOOP;\n"
						+ "					\n"
						+ "					--only outputs with quantity > 0 have rows in soberano.\"ProcessRunOutputValue\"\n"
						+ "					UPDATE soberano.\"ProcessRunOutputValue\" prov\n"
						+ "						SET \"Value\" = \"Value\" + pro.\"Quantity\" * outputsTotalValue * weighttoredistribute / producedoutputcount / 100\n"
						+ "						FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "						WHERE prov.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							AND prov.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "							AND prov.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\";\n"
						+ "						\n"
						+ "					UPDATE soberano.\"ProcessRunFixedCost\" prfc\n"
						+ "						SET \"FixedCost\" = proc.\"This_has_FixedCost\",\n"
						+ "							\"This_is_in_Currency_with_CurrencyHasCurrencyId\" = curr.\"CurrencyHasCurrencyId\"\n"
						+ "						FROM soberano.\"ProcessRun\" pr, soberano.\"Process\" proc, soberano.\"Currency\" curr\n"
						+ "						WHERE prfc.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							AND prfc.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "							AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.\"ProcessHasProcessId\"\n"
						+ "							AND curr.\"Currency_is_system_currency\";\n"
						+ "									\n"
						+ "					--update stocks at output warehouse. only produced outputs, with values recorded\n"
						+ "					PERFORM soberano.\"fn_Stock_change\"(NULL,\n"
						+ "														pro.\"InventoryItemHasInventoryItemCode\",\n"
						+ "														cc.\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\",\n"
						+ "														pro.\"Quantity\",\n"
						+ "														prov.\"Value\" / pro.\"Quantity\",\n"
						+ "													    NULL,\n"
						+ "													  	NULL,\n"
						+ "													  	true,\n"
						+ "														processrunid)\n"
						+ "						FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutputValue\" prov\n"
						+ "								ON pro.\"ProcessRunHasProcessRunId\" = prov.\"ProcessRunHasProcessRunId\"\n"
						+ "									AND pro.\"InventoryItemHasInventoryItemCode\" = prov.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "								ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "									AND pr.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "								ON pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\";\n"
						+ "					\n"
						+ "					--make the decision\n"
						+ "					PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "														entityTypeInstanceId, \n"
						+ "														decisionId, \n"
						+ "														'tt_ProcessRun_tt ' || CAST(processrunid AS text) || ' : ' || objectCode || ' tt_CLOSED_BY_tt ' || loginname);\n"
						+ "					qryResult := 0;		\n"
						+ "				ELSE\n"
						+ "					qryResult := -4;\n"
						+ "				END IF;\n"
						+ "			ELSE			\n"
						+ "				qryResult := -2;	\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_get\"(\n"
						+ "	processrunid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" integer,\n"
						+ "				  \"itemCode\" character varying,\n"
						+ "				  \"entityTypeInstanceId\" integer,\n"
						+ "				  \"processId\" integer,\n"
						+ "				  \"processName\" character varying,\n"
						+ "				  \"costCenterId\" integer,\n"
						+ "				  \"costCenterName\" character varying,\n"
						+ "				 \"currentStageName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"ProcessRunHasProcessRunId\",\n"
						+ "							\"This_has_Code\",\n"
						+ "							pr.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "							\"This_is_of_Process_with_ProcessHasProcessId\",\n"
						+ "							proc.\"This_has_Name\",\n"
						+ "							\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\",\n"
						+ "							cc.\"This_has_Name\",\n"
						+ "							st.\"This_has_Name\"\n"
						+ "						FROM soberano.\"ProcessRun\" pr\n"
						+ "							INNER JOIN soberano.\"Process\" proc\n"
						+ "								ON pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.\"ProcessHasProcessId\"\n"
						+ "							INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "								ON pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\" = cc.\"CostCenterHasCostCenterId\"\n"
						+ "							INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "								ON pr.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							INNER JOIN metamodel.\"Stage\" st\n"
						+ "								ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "						WHERE \"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(pr.\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_getInputs\"(\n"
						+ "	processrunid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" character varying, \"itemName\" character varying, \"unitAcron\" character varying, \"unitId\" integer, quantity numeric, weight integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT item.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							\"This_has_Name\",\n"
						+ "							\"Acronym\",\n"
						+ "							\"UnitHasUnitId\",\n"
						+ "							\"Quantity\",\n"
						+ "							0\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessRunInput\" pinput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = pinput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND pinput.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "										ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "											AND unit.\"Language\" = lang\n"
						+ "							WHERE --user can make decisions on process run\n"
						+ "									(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(27, 1, loginname)))\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_getOutputs\"(\n"
						+ "	processrunid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"itemId\" character varying, \"itemName\" character varying, \"unitAcron\" character varying, \"unitId\" integer, quantity numeric, weight integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT item.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							\"This_has_Name\",\n"
						+ "							\"Acronym\",\n"
						+ "							\"UnitHasUnitId\",\n"
						+ "							\"Quantity\",\n"
						+ "							\"This_value_is_weighted_by_WeightCoefficient\"\n"
						+ "						FROM soberano.\"InventoryItem\" item\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutput\" poutput\n"
						+ "								ON item.\"InventoryItemHasInventoryItemCode\" = poutput.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND poutput.\"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "								ON unit.\"UnitHasUnitId\" = item.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "									AND unit.\"Language\" = lang\n"
						+ "							WHERE --user can make decisions on process runs\n"
						+ "									(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(27, 1, loginname)))\n"
						+ "						ORDER BY item.\"InventoryItemHasInventoryItemCode\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProcessRun_cancel\"(\n"
						+ "	processrunid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Code\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProcessRun\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProcessRunHasProcessRunId\" = processrunid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_ProcessRun_tt ' || CAST(processrunid AS text) || ' : ' || objectCode || ' tt_CANCELED_BY_tt ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_create\"(\n"
						+ "	orderlabel character varying,\n"
						+ "	counters character varying[],\n"
						+ "	customer integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		orderId integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		orderId := -1;\n"
						+ "		\n"
						+ "		--all specified counters are free\n"
						+ "		IF NOT EXISTS(SELECT * FROM (SELECT UNNEST(counters) AS coCode) AS coCodes\n"
						+ "					  			INNER JOIN soberano.\"Counter\" counter\n"
						+ "					  				ON counter.\"This_has_Counter_code\" = coCodes.coCode\n"
						+ "					  					AND counter.\"only_one_order_is_permitted_in_Counter\"\n"
						+ "								INNER JOIN soberano.\"OrderOccupiesCounter\" ooc\n"
						+ "									ON counter.\"CounterHasCounterId\" = ooc.\"CounterHasCounterId\"\n"
						+ "								INNER JOIN soberano.\"Order\" ord\n"
						+ "									ON ord.\"OrderHasOrderId\" = ooc.\"OrderHasOrderId\"\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "									ON ord.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "\n"
						+ "										--the order is in course\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3) THEN\n"
						+ "		\n"
						+ "			--create entity type instance	\n"
						+ "			SELECT metamodel.\"fn_EntityTypeInstance_create\"('Order', loginname)\n"
						+ "				INTO entityTypeInstanceId;\n"
						+ "\n"
						+ "			--user has rights to create instance of that entity type\n"
						+ "			IF entityTypeInstanceId > 0 THEN\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"Order\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											 \"This_is_identified_by_Label\", \n"
						+ "											 \"This_is_granted_a_DiscountRate\")\n"
						+ "					VALUES (entityTypeInstanceId,\n"
						+ "						   orderLabel,\n"
						+ "						   0) \n"
						+ "					RETURNING \"OrderHasOrderId\" INTO orderId;\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"OrderOccupiesCounter\"(\"OrderHasOrderId\", \"CounterHasCounterId\")\n"
						+ "					SELECT DISTINCT orderId, \"CounterHasCounterId\" \n"
						+ "						FROM (SELECT UNNEST(counters) AS coCode) AS coCodes\n"
						+ "							INNER JOIN soberano.\"Counter\" counter\n"
						+ "								ON counter.\"This_has_Counter_code\" = coCodes.coCode;\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"CustomerOrder\"(\"This_has_DiscountRate\", \"OrderHasOrderId\", \"CustomerHasCustomerId\")\n"
						+ "					VALUES (0, orderId, customer);\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "		ELSE\n"
						+ "			orderId := -2;\n"
						+ "		END IF;\n"
						+ "		RETURN orderId;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getAll\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"operationId\" integer, \n"
						+ "				  	\"orderLabel\" character varying, \n"
						+ "				  	\"customer\" text,\n"
						+ "				  	\"counter\" character varying, \n"
						+ "				  	stage character varying, \n"
						+ "				  	description text, \n"
						+ "				  	history text, \n"
						+ "				  	\"recordingDate\" timestamp with time zone, \n"
						+ "				  	\"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT opid,\n"
						+ "							orderl,\n"
						+ "							ordercu,\n"
						+ "							orderco,\n"
						+ "							stag,\n"
						+ "							descr,\n"
						+ "							hist,\n"
						+ "							recordingD,											\n"
						+ "							etiId \n"
						+ "						FROM (SELECT DISTINCT ord.\"OrderHasOrderId\" opid,\n"
						+ "												ord.\"This_is_identified_by_Label\" orderl,\n"
						+ "												(custo.\"This_has_FirstName\" || ' ' || custo.\"This_has_LastName\" || ' : ' || u.\"This_includes_EmailAddress\") ordercu,\n"
						+ "												counter.\"This_has_Counter_code\" orderco,\n"
						+ "												st.\"This_has_Name\" stag,\n"
						+ "												'' descr,\n"
						+ "												metamodel.\"fn_EntityTypeInstance_getHistory\"(ord.\"This_is_identified_by_EntityTypeInstance_id\") hist,\n"
						+ "												eti.\"This_is_created_at_Timestamp\" recordingD,											\n"
						+ "												ord.\"This_is_identified_by_EntityTypeInstance_id\" etiId,\n"
						+ "												row_number() over (partition by ord.\"OrderHasOrderId\" order by counter.\"This_has_Counter_code\" asc) as row_number\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(3, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Order\" ord\n"
						+ "											ON instance.\"InstanceId\" = ord.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = ord.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "												AND eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN metamodel.\"Stage\" st\n"
						+ "											ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "										INNER JOIN soberano.\"OrderOccupiesCounter\" ordcounter\n"
						+ "											ON ordcounter.\"OrderHasOrderId\" = ord.\"OrderHasOrderId\"\n"
						+ "										INNER JOIN soberano.\"Counter\" counter\n"
						+ "											ON counter.\"CounterHasCounterId\" = ordcounter.\"CounterHasCounterId\"\n"
						+ "										LEFT JOIN soberano.\"CustomerOrder\" custord\n"
						+ "											ON custord.\"OrderHasOrderId\" = ord.\"OrderHasOrderId\"\n"
						+ "										LEFT JOIN soberano.\"Customer\" custo\n"
						+ "											ON custo.\"CustomerHasCustomerId\" = custord.\"CustomerHasCustomerId\"\n"
						+ "										LEFT JOIN soberano.\"ContactData\" u\n"
						+ "											ON custo.\"This_has_ContactData_with_ContactDataHasContactDataId\" = u.\"ContactDataHasContactDataId\"\n"
						+ "									ORDER BY st.\"This_has_Name\" DESC, ord.\"OrderHasOrderId\" DESC) sq\n"
						+ "						WHERE row_number = 1;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Activity_getOngoing\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"objectType\" integer, \"operationId\" integer, \"orderLabel\" character varying, customer text, counter character varying, stage character varying, description text, history text, \"recordingDate\" timestamp with time zone, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT objectType,\n"
						+ "							opid,\n"
						+ "							orderl,\n"
						+ "							ordercu,\n"
						+ "							orderco,\n"
						+ "							stag,\n"
						+ "							descr,\n"
						+ "							hist,\n"
						+ "							recordingD,											\n"
						+ "							etiId \n"
						+ "						FROM (SELECT DISTINCT 0 objectType,\n"
						+ "							  					ord.\"OrderHasOrderId\" opid,\n"
						+ "												ord.\"This_is_identified_by_Label\" orderl,\n"
						+ "												(custo.\"This_has_FirstName\" || ' ' || custo.\"This_has_LastName\" || ' : ' || u.\"This_includes_EmailAddress\") ordercu,\n"
						+ "												counter.\"This_has_Counter_code\" orderco,\n"
						+ "												st.\"This_has_Name\" stag,\n"
						+ "												'' descr,\n"
						+ "												metamodel.\"fn_EntityTypeInstance_getHistory\"(ord.\"This_is_identified_by_EntityTypeInstance_id\") hist,\n"
						+ "												eti.\"This_is_created_at_Timestamp\" recordingD,											\n"
						+ "												ord.\"This_is_identified_by_EntityTypeInstance_id\" etiId,\n"
						+ "												row_number() over (partition by ord.\"OrderHasOrderId\" order by counter.\"This_has_Counter_code\" asc) as row_number\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(3, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Order\" ord\n"
						+ "											ON instance.\"InstanceId\" = ord.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = ord.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "												AND eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN metamodel.\"Stage\" st\n"
						+ "											ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "							  					AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3\n"
						+ "										INNER JOIN soberano.\"OrderOccupiesCounter\" ordcounter\n"
						+ "											ON ordcounter.\"OrderHasOrderId\" = ord.\"OrderHasOrderId\"\n"
						+ "										INNER JOIN soberano.\"Counter\" counter\n"
						+ "											ON counter.\"CounterHasCounterId\" = ordcounter.\"CounterHasCounterId\"\n"
						+ "										LEFT JOIN soberano.\"CustomerOrder\" custord\n"
						+ "											ON custord.\"OrderHasOrderId\" = ord.\"OrderHasOrderId\"\n"
						+ "										LEFT JOIN soberano.\"Customer\" custo\n"
						+ "											ON custo.\"CustomerHasCustomerId\" = custord.\"CustomerHasCustomerId\"\n"
						+ "										LEFT JOIN soberano.\"ContactData\" u\n"
						+ "											ON custo.\"This_has_ContactData_with_ContactDataHasContactDataId\" = u.\"ContactDataHasContactDataId\"\n"
						+ "							 \n"
						+ "							 UNION\n"
						+ "							 \n"
						+ "							 SELECT DISTINCT 1 objectType,\n"
						+ "							  					pr.\"ProcessRunHasProcessRunId\" opid,\n"
						+ "												pro.\"This_has_Name\" orderl,\n"
						+ "												'' ordercu,\n"
						+ "												cc.\"This_has_Name\" orderco,\n"
						+ "												st.\"This_has_Name\" stag,\n"
						+ "												'' descr,\n"
						+ "												metamodel.\"fn_EntityTypeInstance_getHistory\"(pr.\"This_is_identified_by_EntityTypeInstance_id\") hist,\n"
						+ "												eti.\"This_is_created_at_Timestamp\" recordingD,											\n"
						+ "												pr.\"This_is_identified_by_EntityTypeInstance_id\" etiId,\n"
						+ "												row_number() over (partition by pr.\"ProcessRunHasProcessRunId\" order by cc.\"This_has_Name\" asc) as row_number\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(27, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "											ON instance.\"InstanceId\" = pr.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = pr.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "												AND eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "										INNER JOIN metamodel.\"Stage\" st\n"
						+ "											ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "							  					AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3\n"
						+ "										INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "							  				ON cc.\"CostCenterHasCostCenterId\" = pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\"\n"
						+ "							  			INNER JOIN soberano.\"Process\" pro\n"
						+ "											ON pr.\"This_is_of_Process_with_ProcessHasProcessId\" = pro.\"ProcessHasProcessId\") sq\n"
						+ "						WHERE row_number = 1\n"
						+ "						ORDER BY objectType ASC, orderco ASC, opid ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getCount\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_Order_getAll\"(lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_make\"(\n"
						+ "	orderid integer,\n"
						+ "	itemid integer,\n"
						+ "	description character varying,\n"
						+ "	runs numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		objectCode character varying;\n"
						+ "		processName character varying;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		processId integer;\n"
						+ "		processRunCode text;\n"
						+ "		processRunId integer;\n"
						+ "		costCenter integer;\n"
						+ "		inputitems character varying[];\n"
						+ "		inputquantities numeric[];\n"
						+ "		inputunits integer[];\n"
						+ "		outputitems character varying[];\n"
						+ "		outputquantities numeric[];\n"
						+ "		outputunits integer[];\n"
						+ "		weights integer[];\n"
						+ "		qryResult integer;		\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*, \n"
						+ "				CASE WHEN inputitemsarr IS NULL THEN ARRAY[]::character varying[] ELSE inputitemsarr END,\n"
						+ "				array(select unnest(inputquantitiesarr) * runs),\n"
						+ "				CASE WHEN inputunitsarr IS NULL THEN ARRAY[]::integer[] ELSE inputunitsarr END,\n"
						+ "				outputitemsarr,\n"
						+ "				array(select unnest(outputquantitiesarr) * runs),\n"
						+ "				outputunitsarr,\n"
						+ "				weightsarr\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								process.\"ProcessHasProcessId\",\n"
						+ "								\"This_is_usually_produced_in_CostCenter_with_CostCenterHasCostCe\",\n"
						+ "								decision.\"DecisionHasDecisionId\",\n"
						+ "				  				process.\"This_has_Name\"\n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Make'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "								INNER JOIN soberano.\"Product\" product\n"
						+ "									ON product.\"ProductHasProductId\" = itemid\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" processoutput\n"
						+ "									ON processoutput.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "				  				INNER JOIN soberano.\"Process\" process\n"
						+ "				  					ON process.\"ProcessHasProcessId\" = processoutput.\"ProcessHasProcessId\"\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid\n"
						+ "\n"
						+ "							--only one of the processes that produces the item is returned\n"
						+ "							--the last one configured\n"
						+ "							ORDER BY \"ProcessHasProcessId\" DESC\n"
						+ "							LIMIT 1) proc\n"
						+ "					LEFT JOIN (SELECT \"ProcessHasProcessId\",\n"
						+ "									ARRAY_AGG(pin.\"InventoryItemHasInventoryItemCode\") inputitemsarr,\n"
						+ "									ARRAY_AGG(\"Quantity\") inputquantitiesarr,\n"
						+ "									ARRAY_AGG(\"This_is_measured_in_Unit_with_UnitHasUnitId\") inputunitsarr\n"
						+ "								FROM soberano.\"ProcessInput\" pin\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "										ON iitem.\"InventoryItemHasInventoryItemCode\" = pin.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									GROUP BY \"ProcessHasProcessId\") pinput\n"
						+ "						ON proc.\"ProcessHasProcessId\" = pinput.\"ProcessHasProcessId\"\n"
						+ "					LEFT JOIN (SELECT \"ProcessHasProcessId\",\n"
						+ "									ARRAY_AGG(pout.\"InventoryItemHasInventoryItemCode\") outputitemsarr,\n"
						+ "									ARRAY_AGG(\"Quantity\") outputquantitiesarr,\n"
						+ "									ARRAY_AGG(\"This_is_measured_in_Unit_with_UnitHasUnitId\") outputunitsarr,\n"
						+ "									ARRAY_AGG(\"This_value_is_weighted_by_WeightCoefficient\") weightsarr\n"
						+ "								FROM soberano.\"ProcessOutput\" pout\n"
						+ "									INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "										ON iitem.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									GROUP BY \"ProcessHasProcessId\") poutput\n"
						+ "						ON proc.\"ProcessHasProcessId\" = poutput.\"ProcessHasProcessId\"\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					processId,\n"
						+ "					costCenter,\n"
						+ "					decisionId,\n"
						+ "					processName,\n"
						+ "					inputitems,\n"
						+ "					inputquantities,\n"
						+ "					inputunits,\n"
						+ "					outputitems,\n"
						+ "					outputquantities,\n"
						+ "					outputunits,\n"
						+ "					weights;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--create process run\n"
						+ "			SELECT array_to_string(ARRAY(SELECT chr((65 + round(random() * 25)) :: integer) \n"
						+ "											FROM generate_series(1, 15)), \n"
						+ "								   '')\n"
						+ "				INTO processRunCode;\n"
						+ "			SELECT soberano.\"fn_ProcessRun_create\"(processRunCode,\n"
						+ "													processId,\n"
						+ "													costCenter,\n"
						+ "													inputitems,\n"
						+ "													inputquantities,\n"
						+ "													inputunits,\n"
						+ "													outputitems,\n"
						+ "													outputquantities,\n"
						+ "													outputunits,\n"
						+ "													weights,\n"
						+ "													'soberano.user.top') \n"
						+ "				INTO processRunId;\n"
						+ "				\n"
						+ "			IF processRunId > 0 THEN\n"
						+ "			\n"
						+ "				INSERT INTO soberano.\"OrderProcessRun\"(\"This_has_Description\",\n"
						+ "												   \"This_has_ordered_Runs\",\n"
						+ "												   \"This_has_customer-canceled_Runs\",\n"
						+ "												   \"This_has_full_discounted_Runs\",\n"
						+ "												   \"This_has_ended_Runs\",\n"
						+ "												   \"ProcessRunHasProcessRunId\",\n"
						+ "												   \"OrderHasOrderId\")\n"
						+ "					VALUES (description, \n"
						+ "							runs,\n"
						+ "							0,\n"
						+ "							0,\n"
						+ "							runs,\n"
						+ "							processRunId,\n"
						+ "							orderid);\n"
						+ "\n"
						+ "				INSERT INTO soberano.\"ProcessRunOutputHasPriceForOrder\"(\"Price\",\n"
						+ "																		\"ProcessRunHasProcessRunId\",\n"
						+ "																		\"InventoryItemHasInventoryItemCode\", \n"
						+ "																		\"OrderHasOrderId\", \n"
						+ "																		\"This_is_in_Currency_with_CurrencyHasCurrencyId\")\n"
						+ "					SELECT \"This_has_Price\",\n"
						+ "						   processRunId,\n"
						+ "						   product.\"InventoryItemHasInventoryItemCode\",\n"
						+ "						   orderid,\n"
						+ "						   \"CurrencyHasCurrencyId\" \n"
						+ "						FROM soberano.\"Product\" product\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutput\" prout\n"
						+ "								ON product.\"InventoryItemHasInventoryItemCode\" = prout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND prout.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "							INNER JOIN soberano.\"Currency\" curr\n"
						+ "								ON curr.\"Currency_is_system_currency\";\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId,\n"
						+ "												CAST(runs AS text) || ' ' || processName || ' tt_WITH_DESCRIPTION_tt ' || description || ' tt_ADDED_TO_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_get\"(\n"
						+ "	lang character,\n"
						+ "	orderid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"orderId\" integer, \"orderLabel\" character varying, counters text, customer text, \"customerId\" integer, \n"
						+ "				  \"deliverTo\" text, \"orderDiscount\" numeric, \"orderAmount\" numeric, \"collectedAmount\" numeric, \n"
						+ "				  \"amountToCollect\" numeric, category character varying, description character varying, \"processRunId\" integer, \n"
						+ "				  \"productName\" character varying, \"productQuantity\" numeric, \"productUnit\" character varying, \n"
						+ "				  \"orderedRuns\" numeric, \"canceledRuns\" numeric, \"discountedRuns\" numeric, \"endedRuns\" numeric, \n"
						+ "				  currency character varying, stage character varying, \"stageId\" integer, \"oneRunQuantity\" numeric, \n"
						+ "				  \"inventoryItemCode\" character varying, \"deliveryBy\" character varying, \"mobilePhoneNumber\" character varying, \n"
						+ "				  \"emailAddress\" character varying, \"countryCode\" character, address character varying, \"postalCode\" character varying, \n"
						+ "				  town character varying, \"municipalityId\" integer, city character varying, \"provinceId\" integer, latitude double precision, \n"
						+ "				  longitude double precision) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		amount numeric;\n"
						+ "		cAmount numeric;\n"
						+ "		aTCollect numeric;\n"
						+ "	BEGIN\n"
						+ "		SELECT * \n"
						+ "			FROM soberano.\"fn_Order_getAmounts\"(orderid)\n"
						+ "			INTO amount, cAmount, aTCollect;\n"
						+ "			\n"
						+ "		RETURN QUERY SELECT o.\"OrderHasOrderId\",\n"
						+ "						o.\"This_is_identified_by_Label\",\n"
						+ "						occ.counters,\n"
						+ "						c.\"This_has_FirstName\" || ' ' || c.\"This_has_LastName\" || ' : ' || cdata.\"This_includes_EmailAddress\",\n"
						+ "						c.\"CustomerHasCustomerId\",\n"
						+ "						'Tel: ' || ddata.\"This_includes_PhoneNumber\" || chr(13) ||\n"
						+ "						'Email: ' || ddata.\"This_includes_EmailAddress\" || chr(13) ||\n"
						+ "						'Address: ' || addr.\"This_includes_AddressString\" || ', ' || \n"
						+ "										addr.\"This_includes_Town\" || ', ' || \n"
						+ "										addr.\"This_includes_PostalCode\"	|| ', ' || \n"
						+ "										mun.\"This_has_Name\"	|| ', ' || \n"
						+ "										prov.\"This_has_Name\" || ', ' || \n"
						+ "										ctry.\"This_has_Name\",\n"
						+ "						o.\"This_is_granted_a_DiscountRate\",\n"
						+ "						amount,\n"
						+ "						cAmount,\n"
						+ "						aTCollect,\n"
						+ "						cat.\"This_has_Name\",\n"
						+ "						opr.\"This_has_Description\",\n"
						+ "						opr.\"ProcessRunHasProcessRunId\",\n"
						+ "						iitem.\"This_has_Name\",\n"
						+ "						CASE WHEN SUM(opr.\"This_has_ordered_Runs\") > 0 THEN SUM(pro.\"Quantity\") - SUM(opr.\"This_has_customer-canceled_Runs\") * SUM(pro.\"Quantity\") / SUM(opr.\"This_has_ordered_Runs\")\n"
						+ "																		ELSE 0 END,\n"
						+ "						unit.\"Acronym\",\n"
						+ "						SUM(opr.\"This_has_ordered_Runs\"),\n"
						+ "						SUM(opr.\"This_has_customer-canceled_Runs\"),\n"
						+ "						SUM(opr.\"This_has_full_discounted_Runs\"),\n"
						+ "						SUM(opr.\"This_has_ended_Runs\"),\n"
						+ "						curr.\"This_has_Currency_code\",\n"
						+ "						st.\"This_has_Name\",						\n"
						+ "						CASE\n"
						+ "							--order closed but not collected yet\n"
						+ "							WHEN st.\"StageHasStageId\" = 6 AND amount > cAmount THEN 0 ELSE st.\"StageHasStageId\" END,\n"
						+ "						procout.\"Quantity\",\n"
						+ "						iitem.\"InventoryItemHasInventoryItemCode\",\n"
						+ "						dp.\"This_has_Name\",\n"
						+ "						ddata.\"This_includes_PhoneNumber\",\n"
						+ "						ddata.\"This_includes_EmailAddress\",\n"
						+ "						ctry.\"CountryHasCountryCode\",\n"
						+ "						addr.\"This_includes_AddressString\",\n"
						+ "						addr.\"This_includes_PostalCode\",\n"
						+ "						addr.\"This_includes_Town\",\n"
						+ "						mun.\"MunicipalityHasMunicipalityId\",\n"
						+ "						addr.\"This_includes_City\",\n"
						+ "						prov.\"ProvinceHasProvinceId\",\n"
						+ "						addr.\"This_includes_Latitute\",\n"
						+ "						addr.\"This_includes_Longitude\"\n"
						+ "					FROM soberano.\"Order\" o\n"
						+ "						INNER JOIN (SELECT \"OrderHasOrderId\",\n"
						+ "											STRING_AGG(\"This_has_Counter_code\" || ', ',\n"
						+ "														''\n"
						+ "														ORDER BY \"OrderHasOrderId\", \"This_has_Counter_code\") counters\n"
						+ "										FROM soberano.\"OrderOccupiesCounter\" ocou\n"
						+ "											INNER JOIN soberano.\"Counter\" coun\n"
						+ "												ON coun.\"CounterHasCounterId\" = ocou.\"CounterHasCounterId\"\n"
						+ "										GROUP BY \"OrderHasOrderId\") occ\n"
						+ "							ON o.\"OrderHasOrderId\" = occ.\"OrderHasOrderId\"\n"
						+ "						INNER JOIN soberano.\"CustomerOrder\" cust\n"
						+ "							ON cust.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "						LEFT JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "							ON opr.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "						LEFT JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" prophfo\n"
						+ "							ON prophfo.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "								AND opr.\"ProcessRunHasProcessRunId\" = prophfo.\"ProcessRunHasProcessRunId\"\n"
						+ "						LEFT JOIN soberano.\"InventoryItem\" iitem\n"
						+ "							ON iitem.\"InventoryItemHasInventoryItemCode\" = prophfo.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						LEFT JOIN soberano.\"Product\" product\n"
						+ "							ON product.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						LEFT JOIN soberano.\"ProductIsOfProductCategory\" pcat\n"
						+ "							ON pcat.\"ProductHasProductId\" = product.\"ProductHasProductId\"\n"
						+ "						LEFT JOIN soberano.\"ProductCategory\" cat\n"
						+ "							ON pcat.\"ProductCategoryHasProductCategoryId\" = cat.\"ProductCategoryHasProductCategoryId\"\n"
						+ "						LEFT JOIN soberano.\"ProcessRunOutput\" pro\n"
						+ "							ON pro.\"ProcessRunHasProcessRunId\" = prophfo.\"ProcessRunHasProcessRunId\"\n"
						+ "								AND pro.\"InventoryItemHasInventoryItemCode\" = iitem.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						LEFT JOIN soberano.\"ProcessRun\" processrun\n"
						+ "							ON processrun.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "						LEFT JOIN soberano.\"ProcessOutput\" procout\n"
						+ "							ON procout.\"ProcessHasProcessId\" = processrun.\"This_is_of_Process_with_ProcessHasProcessId\"\n"
						+ "								AND procout.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						LEFT JOIN soberano.\"Unit\" u\n"
						+ "							ON u.\"UnitHasUnitId\" = pro.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "						LEFT JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "							ON unit.\"UnitHasUnitId\" = u.\"UnitHasUnitId\"\n"
						+ "								AND unit.\"Language\" = lang\n"
						+ "						LEFT JOIN soberano.\"Currency\" curr\n"
						+ "							ON curr.\"CurrencyHasCurrencyId\" = prophfo.\"This_is_in_Currency_with_CurrencyHasCurrencyId\"\n"
						+ "						LEFT JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "							ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "						LEFT JOIN metamodel.\"Stage\" st\n"
						+ "							ON eti.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "						LEFT JOIN soberano.\"Customer\" c\n"
						+ "							ON c.\"CustomerHasCustomerId\" = cust.\"CustomerHasCustomerId\"\n"
						+ "						LEFT JOIN soberano.\"ContactData\" cdata\n"
						+ "							ON cdata.\"ContactDataHasContactDataId\" = c.\"This_has_ContactData_with_ContactDataHasContactDataId\"\n"
						+ "						LEFT JOIN soberano.\"ContactData\" ddata\n"
						+ "							ON ddata.\"ContactDataHasContactDataId\" = o.\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\"\n"
						+ "						LEFT JOIN soberano.\"PostalAddress\" addr\n"
						+ "							ON ddata.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = addr.\"PostalAddressHasPostalAddressId\"\n"
						+ "						LEFT JOIN soberano.\"Municipality\" mun\n"
						+ "							ON mun.\"MunicipalityHasMunicipalityId\" = addr.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\"\n"
						+ "						LEFT JOIN soberano.\"Province\" prov\n"
						+ "							ON prov.\"ProvinceHasProvinceId\" = mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\"\n"
						+ "						LEFT JOIN soberano.\"Country\" ctry\n"
						+ "							ON ctry.\"CountryHasCountryCode\" = prov.\"This_belongs_to_Country_with_CountryHasCountryCode\"\n"
						+ "						LEFT JOIN soberano.\"Delivery\" delivery\n"
						+ "							ON delivery.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "						LEFT JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "							ON dp.\"DeliveryProviderHasDeliveryProviderId\" = delivery.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "					WHERE o.\"OrderHasOrderId\" = orderid\n"
						+ "						AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(o.\"This_is_identified_by_EntityTypeInstance_id\", loginname))\n"
						+ "					GROUP BY o.\"OrderHasOrderId\",\n"
						+ "							o.\"This_is_identified_by_Label\",\n"
						+ "							occ.counters,\n"
						+ "							c.\"This_has_FirstName\" || ' ' || c.\"This_has_LastName\" || ' : ' || cdata.\"This_includes_EmailAddress\",\n"
						+ "							c.\"CustomerHasCustomerId\",\n"
						+ "							o.\"This_is_granted_a_DiscountRate\",\n"
						+ "							cat.\"This_has_Name\",\n"
						+ "							opr.\"This_has_Description\",\n"
						+ "							opr.\"ProcessRunHasProcessRunId\",\n"
						+ "							iitem.\"This_has_Name\",\n"
						+ "							unit.\"Acronym\",\n"
						+ "							curr.\"This_has_Currency_code\",\n"
						+ "							st.\"This_has_Name\",\n"
						+ "							st.\"StageHasStageId\",\n"
						+ "							ddata.\"This_includes_PhoneNumber\",\n"
						+ "							ddata.\"This_includes_EmailAddress\",\n"
						+ "							addr.\"This_includes_AddressString\",\n"
						+ "							addr.\"This_includes_Town\",\n"
						+ "							addr.\"This_includes_PostalCode\",\n"
						+ "							mun.\"This_has_Name\",\n"
						+ "							prov.\"This_has_Name\",\n"
						+ "							ctry.\"This_has_Name\",\n"
						+ "							procout.\"Quantity\",\n"
						+ "							iitem.\"InventoryItemHasInventoryItemCode\",\n"
						+ "							dp.\"This_has_Name\",\n"
						+ "							ctry.\"CountryHasCountryCode\",\n"
						+ "							mun.\"MunicipalityHasMunicipalityId\",\n"
						+ "							addr.\"This_includes_City\",\n"
						+ "							prov.\"ProvinceHasProvinceId\",\n"
						+ "							addr.\"This_includes_Latitute\",\n"
						+ "							addr.\"This_includes_Longitude\"\n"
						+ "					ORDER BY cat.\"This_has_Name\",\n"
						+ "							opr.\"This_has_Description\",\n"
						+ "							iitem.\"This_has_Name\";\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getAmount\"(\n"
						+ "	orderid integer)\n"
						+ "    RETURNS TABLE(\"orderAmount\" numeric, \"collectedAmount\" numeric, surchage numeric, \"customerDiscountRate\" numeric, \"orderDiscountRate\" numeric, \"deliveryAmount\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	amount numeric;\n"
						+ "	cAmount numeric;\n"
						+ "	aCounterIsSurcharged boolean;\n"
						+ "	customerDiscountRate numeric;\n"
						+ "	surchargeRate numeric;\n"
						+ "	orderDiscountRate numeric;\n"
						+ "	\n"
						+ "	dAmount numeric;\n"
						+ "	deliveryProviderIsReseller boolean;\n"
						+ "	deliveryFee money;\n"
						+ "	deliveryRate double precision;\n"
						+ "	isDelivery boolean;\n"
						+ "BEGIN\n"
						+ "	SELECT CASE WHEN cu.\"This_is_granted_a_DiscountRate\" IS NULL THEN 0 ELSE cu.\"This_is_granted_a_DiscountRate\" END,\n"
						+ "			CASE WHEN \"This_has_SurchargeRate\" IS NULL THEN 0 ELSE \"This_has_SurchargeRate\" END,\n"
						+ "			CASE WHEN \"Counter_is_surcharged\" THEN true ELSE false END,\n"
						+ "			o.\"This_is_granted_a_DiscountRate\"\n"
						+ "		FROM soberano.\"Order\" o\n"
						+ "			LEFT JOIN soberano.\"CustomerOrder\" cuo\n"
						+ "				ON cuo.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "			LEFT JOIN soberano.\"Customer\" cu\n"
						+ "				ON cuo.\"CustomerHasCustomerId\" = cu.\"CustomerHasCustomerId\"\n"
						+ "			LEFT JOIN (SELECT \"Counter_is_surcharged\", \"OrderHasOrderId\" FROM soberano.\"OrderOccupiesCounter\" ooc\n"
						+ "					   				INNER JOIN soberano.\"Counter\" cou\n"
						+ "					   					ON cou.\"CounterHasCounterId\" = ooc.\"CounterHasCounterId\"\n"
						+ "					   						AND \"OrderHasOrderId\" = orderId\n"
						+ "					   						AND cou.\"Counter_is_surcharged\" LIMIT 1) sc\n"
						+ "				ON o.\"OrderHasOrderId\" = sc.\"OrderHasOrderId\"\n"
						+ "			lEFT JOIN soberano.\"Configuration\"\n"
						+ "				ON true\n"
						+ "		WHERE o.\"OrderHasOrderId\" = orderId\n"
						+ "		INTO customerDiscountRate,\n"
						+ "			surchargeRate,\n"
						+ "			aCounterIsSurcharged,\n"
						+ "			orderDiscountRate;\n"
						+ "	\n"
						+ "	SELECT orderAmountBeforeDiscountsAndSurcharges,\n"
						+ "			depositedAmount - COALESCE(withdrawnAmount, 0) collectedAmount\n"
						+ "		FROM (SELECT oid,\n"
						+ "					orderAmountBeforeDiscountsAndSurcharges,\n"
						+ "					COALESCE(SUM(depoa.\"Amount\" * depoa.\"This_uses_ExchangeRate\" / depo.\"ExchangeRate_is_used_from_order_currency_on_This\"), 0) depositedAmount\n"
						+ "				FROM (SELECT COALESCE(SUM((opr.\"This_has_ordered_Runs\" - opr.\"This_has_customer-canceled_Runs\") * prophfo.\"Price\" - opr.\"This_has_full_discounted_Runs\" * prophfo.\"Price\"), 0) orderAmountBeforeDiscountsAndSurcharges,\n"
						+ "							opr.\"OrderHasOrderId\" oid\n"
						+ "						FROM soberano.\"OrderProcessRun\" opr\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" prophfo\n"
						+ "								ON prophfo.\"OrderHasOrderId\" = opr.\"OrderHasOrderId\"\n"
						+ "									AND opr.\"ProcessRunHasProcessRunId\" = prophfo.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutput\" pro\n"
						+ "								ON pro.\"ProcessRunHasProcessRunId\" = prophfo.\"ProcessRunHasProcessRunId\"\n"
						+ "									AND pro.\"InventoryItemHasInventoryItemCode\" = prophfo.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						WHERE opr.\"OrderHasOrderId\" = orderid\n"
						+ "						GROUP BY opr.\"OrderHasOrderId\") amounts\n"
						+ "					LEFT JOIN soberano.\"Deposit\" depo\n"
						+ "						ON depo.\"This_is_for_Order_with_OrderHasOrderId\" = amounts.oid\n"
						+ "					LEFT JOIN soberano.\"DepositAmount\" depoa\n"
						+ "						ON depo.\"DepositHasDepositId\" = depoa.\"DepositHasDepositId\"\n"
						+ "				GROUP BY oid, orderAmountBeforeDiscountsAndSurcharges) depot\n"
						+ "			LEFT JOIN (SELECT withd.\"This_is_for_Order_with_OrderHasOrderId\" oid,\n"
						+ "							COALESCE(SUM(withda.\"Amount\" * withda.\"This_uses_ExchangeRate\" / withd.\"ExchangeRate_is_used_from_order_currency_on_This\"), 0) withdrawnAmount\n"
						+ "						FROM soberano.\"Withdrawal\" withd\n"
						+ "							INNER JOIN soberano.\"WithdrawalAmount\" withda\n"
						+ "								ON withd.\"WithdrawalHasWithdrawalId\" = withda.\"WithdrawalHasWithdrawalId\"\n"
						+ "									AND withd.\"This_is_for_Order_with_OrderHasOrderId\" = orderid\n"
						+ "						GROUP BY oid) witht\n"
						+ "				ON depot.oid = witht.oid\n"
						+ "		INTO amount, cAmount;\n"
						+ "		\n"
						+ "	--delivery amount is calculated before discounts and surcharges\n"
						+ "	SELECT COALESCE(\"Fee\", CAST(0 AS money)), \n"
						+ "			COALESCE(\"This_charges_Rate_on_order_amount\", CAST(0 AS double precision)),\n"
						+ "			COALESCE(\"DeliveryProvider_is_reseller\", false),\n"
						+ "			CASE WHEN d.\"OrderHasOrderId\" IS NULL THEN false ELSE true END\n"
						+ "		FROM soberano.\"Order\" o\n"
						+ "			LEFT JOIN soberano.\"Delivery\" d\n"
						+ "				ON o.\"OrderHasOrderId\" = d.\"OrderHasOrderId\"\n"
						+ "					AND o.\"OrderHasOrderId\" = orderid\n"
						+ "			LEFT JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "				ON d.\"DeliveryProviderHasDeliveryProviderId\" = dp.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "			LEFT JOIN soberano.\"ContactData\" cd\n"
						+ "				ON o.\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = cd.\"ContactDataHasContactDataId\"\n"
						+ "			LEFT JOIN soberano.\"PostalAddress\" pa\n"
						+ "				ON pa.\"PostalAddressHasPostalAddressId\" = cd.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\"\n"
						+ "			LEFT JOIN soberano.\"Municipality\" mun\n"
						+ "				ON mun.\"MunicipalityHasMunicipalityId\" = pa.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\"\n"
						+ "			LEFT JOIN soberano.\"Province\" prov\n"
						+ "				ON mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = prov.\"ProvinceHasProvinceId\"\n"
						+ "			LEFT JOIN soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\" fees\n"
						+ "				ON fees.\"DeliveryProviderHasDeliveryProviderId\" = dp.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "					AND fees.\"NationalizedPostalCodeHasPostalCode\" = pa.\"This_includes_PostalCode\"\n"
						+ "					AND fees.\"CountryHasCountryCode\" = prov.\"This_belongs_to_Country_with_CountryHasCountryCode\"\n"
						+ "	INTO deliveryFee, deliveryRate, deliveryProviderIsReseller, isDelivery;\n"
						+ "	\n"
						+ "	--if the order isn't a delivery dAmount = 0\n"
						+ "	dAmount := amount * deliveryRate / 100 + CAST(deliveryFee AS numeric);\n"
						+ "	\n"
						+ "	amount := amount * (100 - (orderDiscountRate + customerDiscountRate)) / 100;\n"
						+ "		\n"
						+ "	--only surcharge if not delivery\n"
						+ "	IF aCounterIsSurcharged AND NOT isDelivery THEN	\n"
						+ "		amount := amount * (100 + surchargeRate) / 100;	\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	IF amount < 0 THEN amount := 0; END IF;\n"
						+ "	\n"
						+ "	--the provider isn't a reseller. delivery is considered a sale.\n"
						+ "	IF NOT deliveryProviderIsReseller AND isDelivery THEN\n"
						+ "		amount := amount + dAmount;\n"
						+ "	END IF;\n"
						+ "		\n"
						+ "	RETURN QUERY SELECT amount, \n"
						+ "						cAmount,\n"
						+ "						CASE WHEN aCounterIsSurcharged THEN surchargeRate ELSE 0 END, \n"
						+ "						customerDiscountRate,\n"
						+ "						orderDiscountRate,\n"
						+ "						dAmount;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getAmounts\"(\n"
						+ "	orderid integer)\n"
						+ "    RETURNS TABLE(\"orderAmount\" numeric, \"collectedAmount\" numeric, \"toCollectAmount\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "BEGIN\n"
						+ "	RETURN QUERY SELECT act.\"orderAmount\", \n"
						+ "						act.\"collectedAmount\",\n"
						+ "						(act.\"orderAmount\" - act.\"collectedAmount\") * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\" \"amountToCollect\"\n"
						+ "					FROM (SELECT atable.\"orderAmount\", \n"
						+ "								atable.\"collectedAmount\", \n"
						+ "								MAX(\"This_is_in_Currency_with_CurrencyHasCurrencyId\") ocurr\n"
						+ "								FROM soberano.\"fn_Order_getAmount\"(orderid) atable \n"
						+ "									LEFT JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" oct\n"
						+ "										ON oct.\"OrderHasOrderId\" = orderid\n"
						+ "								GROUP BY atable.\"orderAmount\", \n"
						+ "										atable.\"collectedAmount\") act\n"
						+ "						INNER JOIN soberano.\"Currency\" exchrt\n"
						+ "							ON act.ocurr = exchrt.\"CurrencyHasCurrencyId\";\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getAmount\"(\n"
						+ "	orderid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS numeric\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult numeric;\n"
						+ "	BEGIN\n"
						+ "		SELECT atable.\"orderAmount\" FROM soberano.\"fn_Order_getAmount\"(orderId) atable INTO qryResult;\n"
						+ "		SELECT qryResult\n"
						+ "			FROM soberano.\"Order\" o\n"
						+ "				INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "					ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			WHERE o.\"OrderHasOrderId\" = orderid\n"
						+ "				AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(o.\"This_is_identified_by_EntityTypeInstance_id\", loginname))\n"
						+ "			INTO qryResult;\n"
						+ "		IF qryResult IS NULL THEN qryResult := -1; END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_cancelOrder\"(\n"
						+ "	orderid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(res integer, rep text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		closingDate timestamp with time zone;\n"
						+ "		\n"
						+ "		qryResult integer;\n"
						+ "		qryReport text;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		qryReport := '';\n"
						+ "		\n"
						+ "		SELECT \"This_is_on_Timestamp\",\n"
						+ "				\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Order\" o\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										o.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "									/************/\n"
						+ "									'Cancel order'\n"
						+ "						   			/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "				INNER JOIN metamodel.\"Vote\" vote\n"
						+ "					ON vote.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			WHERE o.\"OrderHasOrderId\" = orderid\n"
						+ "			ORDER BY \"This_is_on_Timestamp\" DESC\n"
						+ "			\n"
						+ "			--the last decision on the order for the user to have canceling rights is Collect decision\n"
						+ "			--an order is closed upon collecting it\n"
						+ "			LIMIT 1\n"
						+ "			INTO closingDate,\n"
						+ "				entityTypeInstanceId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the shift hasn't been closed\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" closure\n"
						+ "								INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "									ON closure.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							--or it has, but the closure was canceled\n"
						+ "							WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "								--for the closure's shift\n"
						+ "								AND date_trunc('day', closingDate) > \"This_is_of_Shift\") THEN\n"
						+ "								\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId, \n"
						+ "												'tt_ORDER_tt ' || CAST(orderid AS text) || ' tt_CANCELED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "				--TODO: ticket\n"
						+ "				qryReport := '';\n"
						+ "				qryResult := 0;								\n"
						+ "			ELSE\n"
						+ "				qryResult := -2;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN QUERY SELECT qryResult, qryReport;\n"
						+ "END;\n"
						+ "$BODY$;\n"
						+ "\n"
						+ "ALTER FUNCTION soberano.\"fn_Order_cancelOrder\"(integer, character varying)\n"
						+ "    OWNER TO postgres;\n"
						+ "",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getTicket\"(\n"
						+ "	orderid integer,\n"
						+ "	receivedamount numeric,\n"
						+ "	change numeric,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"textToPrint\" text, \"printerProfile\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	ticket text;\n"
						+ "	\n"
						+ "	orderAmount numeric;\n"
						+ "	collectedAmount numeric;\n"
						+ "	surcharge numeric;\n"
						+ "	surchargeAmount numeric;\n"
						+ "	customerDiscountRate numeric;\n"
						+ "	orderDiscountRate numeric;\n"
						+ "	combinedDiscountRate numeric;\n"
						+ "	deliveryAmount numeric;\n"
						+ "	toCollectAmount numeric;\n"
						+ "	subtotal numeric;\n"
						+ "	\n"
						+ "	pageHeader text;\n"
						+ "	pageFooter text;\n"
						+ "	printerProfile integer;\n"
						+ "	counterPP integer;\n"
						+ "	cashRegisterPP integer;\n"
						+ "	defaultPP integer;\n"
						+ "	compactPrinting boolean;\n"
						+ "	\n"
						+ "	customerName text;\n"
						+ "	deliveryTo text;\n"
						+ "	orderTime text;\n"
						+ "	counter character varying;\n"
						+ "	stage integer;\n"
						+ "	providerName character varying;\n"
						+ "	providerIsReseller boolean;\n"
						+ "	\n"
						+ "	itemRecord RECORD;\n"
						+ "	itemName character varying;\n"
						+ "	itemQty text;\n"
						+ "	itemAmount text;\n"
						+ "	itemDiscount text;\n"
						+ "	itemPrice text;\n"
						+ "	\n"
						+ "BEGIN\n"
						+ "	ticket := '';\n"
						+ "\n"
						+ "	--get order amounts\n"
						+ "	SELECT \"orderAmount\",\n"
						+ "			\"collectedAmount\", \n"
						+ "			surchage, \n"
						+ "			round(COALESCE(\"customerDiscountRate\", CAST(0 AS numeric)), 2),\n"
						+ "			round(COALESCE(\"orderDiscountRate\", CAST(0 AS numeric)), 2),\n"
						+ "			\"deliveryAmount\" \n"
						+ "		FROM soberano.\"fn_Order_getAmount\"(orderid)\n"
						+ "		INTO orderAmount,\n"
						+ "			collectedAmount,\n"
						+ "			surcharge,\n"
						+ "			customerDiscountRate,\n"
						+ "			orderDiscountRate,\n"
						+ "			deliveryAmount;			\n"
						+ "	SELECT \"collectedAmount\",\n"
						+ "			\"toCollectAmount\"\n"
						+ "		FROM soberano.\"fn_Order_getAmounts\"(orderid)\n"
						+ "    	INTO collectedAmount,\n"
						+ "			toCollectAmount;\n"
						+ "			\n"
						+ "	combinedDiscountRate := customerDiscountRate + orderDiscountRate;\n"
						+ "	IF combinedDiscountRate > 100 THEN combinedDiscountRate := 100; END IF;\n"
						+ "   	\n"
						+ "	--get printer profile\n"
						+ "   	SELECT co.\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\",\n"
						+ "			cr.\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\",\n"
						+ "			dpp.\"PrinterProfileHasPrinterProfileId\"\n"
						+ "		FROM soberano.\"Order\" o\n"
						+ "			INNER JOIN soberano.\"OrderOccupiesCounter\" ooc\n"
						+ "				ON o.\"OrderHasOrderId\" = ooc.\"OrderHasOrderId\"\n"
						+ "					AND o.\"OrderHasOrderId\" = orderid\n"
						+ "			LEFT JOIN soberano.\"Counter\" co\n"
						+ "				ON co.\"CounterHasCounterId\" = ooc.\"CounterHasCounterId\"\n"
						+ "					AND co.\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" IS NOT NULL\n"
						+ "			LEFT JOIN soberano.\"CashRegister\" cr\n"
						+ "				ON cr.\"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" IS NOT NULL\n"
						+ "			LEFT JOIN soberano.\"PrinterProfile\" dpp\n"
						+ "				ON \"PrinterProfile_is_default_printer_profile\"\n"
						+ "		LIMIT 1\n"
						+ "		INTO counterPP,\n"
						+ "			cashRegisterPP,\n"
						+ "			defaultPP;\n"
						+ "			\n"
						+ "	IF counterPP IS NOT NULL THEN\n"
						+ "		printerProfile := counterPP;\n"
						+ "	ELSIF cashRegisterPP IS NOT NULL THEN\n"
						+ "		printerProfile := cashRegisterPP;\n"
						+ "	ELSIF defaultPP IS NOT NULL THEN\n"
						+ "		printerProfile := defaultPP;\n"
						+ "	ELSE printerProfile := 0;\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	--printer profile conf\n"
						+ "	SELECT \"This_has_PageHeader\", \"This_has_PageFooter\", \"PrinterProfile_compacts_text\"\n"
						+ "		FROM soberano.\"PrinterProfile\"\n"
						+ "		WHERE \"PrinterProfileHasPrinterProfileId\" = printerProfile\n"
						+ "		INTO pageHeader, pageFooter, compactPrinting;\n"
						+ "		\n"
						+ "	--get order data\n"
						+ "	SELECT to_char(COALESCE(vote.\"This_is_on_Timestamp\", NOW()), 'YYYY/MM/DD HH24:MI'),\n"
						+ "			\"This_has_Counter_code\",\n"
						+ "			\"This_is_in_Stage_with_StageHasStageId\",\n"
						+ "			cu.\"This_has_FirstName\" || ' ' || cu.\"This_has_LastName\",\n"
						+ "			'Tel: ' || ddata.\"This_includes_PhoneNumber\" || chr(13) ||\n"
						+ "			'Email: ' || ddata.\"This_includes_EmailAddress\" || chr(13) ||\n"
						+ "			'Address: ' || addr.\"This_includes_AddressString\" || ', ' || \n"
						+ "							addr.\"This_includes_Town\" || ', ' || \n"
						+ "							addr.\"This_includes_PostalCode\"	|| ', ' || \n"
						+ "							mun.\"This_has_Name\"	|| ', ' || \n"
						+ "							prov.\"This_has_Name\" || ', ' || \n"
						+ "							ctry.\"This_has_Name\",\n"
						+ "			dp.\"This_has_Name\",\n"
						+ "			dp.\"DeliveryProvider_is_reseller\"\n"
						+ "		FROM soberano.\"OrderOccupiesCounter\" co\n"
						+ "			INNER JOIN soberano.\"Counter\" counter\n"
						+ "				ON counter.\"CounterHasCounterId\" = co.\"CounterHasCounterId\"\n"
						+ "			INNER JOIN soberano.\"Order\" o\n"
						+ "				ON o.\"OrderHasOrderId\" = co.\"OrderHasOrderId\"\n"
						+ "					AND o.\"OrderHasOrderId\" = orderid\n"
						+ "			INNER JOIN \"metamodel\".\"EntityTypeInstance\" eti\n"
						+ "				ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			INNER JOIN \"metamodel\".\"Vote\" vote\n"
						+ "				ON o.\"This_is_identified_by_EntityTypeInstance_id\" = vote.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\"\n"
						+ "			INNER JOIN \"metamodel\".\"Decision\" decision\n"
						+ "				ON vote.\"This_favours_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
						+ "			INNER JOIN \"metamodel\".\"StageFilter\" stage\n"
						+ "				ON stage.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\"\n"
						+ "			LEFT JOIN soberano.\"CustomerOrder\" custoo\n"
						+ "				ON custoo.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "			LEFT JOIN soberano.\"Customer\" cu\n"
						+ "				ON cu.\"CustomerHasCustomerId\" = custoo.\"CustomerHasCustomerId\"\n"
						+ "			LEFT JOIN soberano.\"ContactData\" ddata\n"
						+ "				ON ddata.\"ContactDataHasContactDataId\" = o.\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\"\n"
						+ "			LEFT JOIN soberano.\"PostalAddress\" addr\n"
						+ "				ON ddata.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = addr.\"PostalAddressHasPostalAddressId\"\n"
						+ "			LEFT JOIN soberano.\"Municipality\" mun\n"
						+ "				ON mun.\"MunicipalityHasMunicipalityId\" = addr.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\"\n"
						+ "			LEFT JOIN soberano.\"Province\" prov\n"
						+ "				ON prov.\"ProvinceHasProvinceId\" = mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\"\n"
						+ "			LEFT JOIN soberano.\"Country\" ctry\n"
						+ "				ON ctry.\"CountryHasCountryCode\" = prov.\"This_belongs_to_Country_with_CountryHasCountryCode\"\n"
						+ "			LEFT JOIN soberano.\"Delivery\" delivery\n"
						+ "				ON delivery.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "			LEFT JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "				ON dp.\"DeliveryProviderHasDeliveryProviderId\" = delivery.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "			ORDER BY vote.\"This_is_on_Timestamp\" DESC LIMIT 1\n"
						+ "			INTO orderTime,\n"
						+ "				counter,\n"
						+ "				stage,\n"
						+ "				customerName,\n"
						+ "				deliveryTo,\n"
						+ "				providerName,\n"
						+ "				providerIsReseller;\n"
						+ "\n"
						+ "	IF compactPrinting OR NOT printerProfile = 0 THEN	\n"
						+ "		ticket := ticket || '-------------------- ' || chr(13);\n"
						+ "	ELSE	\n"
						+ "		ticket := ticket || 'tt_ITEM_tt' || chr(13);\n"
						+ "		ticket := ticket || 'tt_ITEM_QTY_tt' || chr(13);\n"
						+ "		ticket := ticket || 'tt_ITEM_PRICE_tt' || '   ' || 'tt_ITEM_AMOUNT_tt' || chr(13) || chr(13);\n"
						+ "		ticket := ticket || '----- ' || chr(13);	\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	subtotal := 0;\n"
						+ "	\n"
						+ "	FOR itemRecord IN SELECT iitem.\"This_has_Name\" iname,\n"
						+ "								round(opr.\"This_has_ordered_Runs\" - opr.\"This_has_customer-canceled_Runs\", 2) iqty,\n"
						+ "								round(prohpfo.\"Price\", 2) iprice,\n"
						+ "								round(((opr.\"This_has_ordered_Runs\" - opr.\"This_has_customer-canceled_Runs\") \n"
						+ "									- opr.\"This_has_full_discounted_Runs\") * prohpfo.\"Price\", 2) iamount,\n"
						+ "								round(opr.\"This_has_full_discounted_Runs\" * prohpfo.\"Price\", 2) idiscount,\n"
						+ "								opr.\"OrderHasOrderId\",\n"
						+ "								unit.\"Acronym\" unit\n"
						+ "						FROM soberano.\"Product\" product\n"
						+ "							INNER JOIN soberano.\"ProductIsOfProductCategory\" ppc\n"
						+ "								ON product.\"ProductHasProductId\" = ppc.\"ProductHasProductId\"\n"
						+ "							INNER JOIN soberano.\"ProductCategory\" pc\n"
						+ "								ON pc.\"ProductCategoryHasProductCategoryId\" = ppc.\"ProductCategoryHasProductCategoryId\"\n"
						+ "							INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "								ON iitem.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							INNER JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" prohpfo\n"
						+ "								ON prohpfo.\"InventoryItemHasInventoryItemCode\" = product.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									AND prohpfo.\"OrderHasOrderId\" = orderid\n"
						+ "							INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "								ON opr.\"OrderHasOrderId\" = prohpfo.\"OrderHasOrderId\"\n"
						+ "									AND opr.\"ProcessRunHasProcessRunId\" = prohpfo.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "								ON unit.\"UnitHasUnitId\" = iitem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "									AND unit.\"Language\" = lang\n"
						+ "						ORDER BY pc.\"This_is_shown_in_Position\" ASC, \n"
						+ "								iitem.\"This_has_Name\" ASC,\n"
						+ "								opr.\"ProcessRunHasProcessRunId\" ASC LOOP\n"
						+ "								\n"
						+ "		subtotal := subtotal + itemRecord.iamount;\n"
						+ "\n"
						+ "		IF compactPrinting THEN\n"
						+ "\n"
						+ "			itemQty := CAST(itemRecord.iqty AS text) || ' ' || itemRecord.unit || ' x ';\n"
						+ "			itemAmount := CAST(itemRecord.iamount AS text);\n"
						+ "			itemDiscount := '-' || CAST(itemRecord.idiscount AS text);\n"
						+ "			itemPrice := CAST(itemRecord.iprice AS text);\n"
						+ "\n"
						+ "			ticket := ticket || itemRecord.iname || chr(13);\n"
						+ "			\n"
						+ "			IF itemRecord.idiscount > 0 THEN\n"
						+ "				ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																				   3,\n"
						+ "																				   ARRAY[itemQty, itemPrice, ''],\n"
						+ "																				   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "				ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																				   3,\n"
						+ "																				   ARRAY[itemDiscount, '', itemAmount],\n"
						+ "																				   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "			ELSE\n"
						+ "				ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																				   3,\n"
						+ "																				   ARRAY[itemQty, itemPrice, itemAmount],\n"
						+ "																				   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "			END IF;\n"
						+ "		ELSE\n"
						+ "			SELECT soberano.\"fn_Utilities_fillWithSpaces\"(CAST(itemRecord.iqty AS text)) INTO itemQty;\n"
						+ "			SELECT soberano.\"fn_Utilities_fillWithSpaces\"(CAST(itemRecord.iamount AS text)) INTO itemAmount;\n"
						+ "			SELECT soberano.\"fn_Utilities_fillWithSpaces\"('-' || CAST(itemRecord.idiscount AS text)) INTO itemDiscount;\n"
						+ "			SELECT soberano.\"fn_Utilities_fillWithSpaces\"(CAST(itemRecord.iprice AS text)) INTO itemPrice;\n"
						+ "\n"
						+ "			ticket := ticket || itemRecord.iname || chr(13);\n"
						+ "			ticket := ticket || itemQty || '   ' || itemRecord.unit || chr(13);\n"
						+ "			ticket := ticket || 'x' || chr(13);\n"
						+ "			IF itemRecord.idiscount > 0 THEN\n"
						+ "				ticket := ticket || itemPrice || chr(13);\n"
						+ "				ticket := ticket || itemDiscount || '   ' || itemAmount || chr(13) || chr(13);\n"
						+ "			ELSE\n"
						+ "				ticket := ticket || itemPrice || '   ' || itemAmount || chr(13) || chr(13);\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "	END LOOP;\n"
						+ "	\n"
						+ "	ticket := ticket || '-------------------- ' || chr(13);\n"
						+ "	ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																	   3,\n"
						+ "																	   ARRAY['tt_SUBTOTAL_tt', '', CAST(round(subtotal, 2) AS text)],\n"
						+ "																	   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "	ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																	   3,\n"
						+ "																	   ARRAY['tt_DISCOUNT_tt' || ' ' || CAST(round(combinedDiscountRate, 2) AS text) || '%', '', CAST(round(subtotal - subtotal * combinedDiscountRate / 100, 2) AS text)],\n"
						+ "																	   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "	\n"
						+ "	--only surcharge if not delivery\n"
						+ "	IF (providerName IS NULL) THEN\n"
						+ "	\n"
						+ "		surchargeAmount := subtotal * surcharge / 100;\n"
						+ "		\n"
						+ "		ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																		   3,\n"
						+ "																		   ARRAY['tt_SURCHARGE_tt' || ' ' || CAST(round(surcharge, 2) AS text) || '%', '', CAST(round(surchargeAmount, 2) AS text)],\n"
						+ "																		   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	ticket := ticket || '-------------------- ' || chr(13);\n"
						+ "	ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																	   3,\n"
						+ "																	   ARRAY['tt_TOTAL_TO_PAY_tt', '', CAST(round(orderAmount, 2) AS text)],\n"
						+ "																	   ARRAY['l', 'r', 'r']) || chr(13);	\n"
						+ "	ticket := ticket || '-------------------- ' || chr(13) || chr(13);\n"
						+ "\n"
						+ "	---order is ongoing\n"
						+ "	IF stage = 3 THEN\n"
						+ "\n"
						+ "		--the order has just been paid\n"
						+ "		IF receivedamount > 0 THEN\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_PAID_tt', '', CAST(round(receivedamount, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_CHANGE_tt', '', CAST(round(change, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_DEBT_tt', '', CAST(round(orderAmount - collectedAmount, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "		ELSE\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_PAID_tt', '', CAST(round(collectedAmount, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13);\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_DEBT_tt', '', CAST(round(orderAmount - collectedAmount, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "		END IF;\n"
						+ "	END IF;\n"
						+ "	\n"
						+ "	ticket := COALESCE(pageHeader, '') || chr(13) || chr(13) || ticket;\n"
						+ "	\n"
						+ "	--it's a delivery\n"
						+ "	IF providerName IS NOT NULL THEN\n"
						+ "	\n"
						+ "		ticket := ticket ||\n"
						+ "				'tt_TO_BE_DELIVERED_TO_tt' || chr(13) || chr(13) ||\n"
						+ "				deliveryTo || chr(13) || chr(13) || \n"
						+ "				'tt_DELIVERY_BY_tt' || ' ' || providerName || chr(13) || chr(13) ||				\n"
						+ "				soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "															   3,\n"
						+ "															   ARRAY['tt_DELIVERY_FEE_tt', '', CAST(round(deliveryAmount, 2) AS text)],\n"
						+ "															   ARRAY['l', 'r', 'r']) || chr(13);				\n"
						+ "		IF providerIsReseller THEN\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_TOTAL_AMOUNT_tt', '', CAST(round(orderAmount + deliveryAmount, 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "		ELSE\n"
						+ "			ticket := ticket || soberano.\"fn_Utilities_formatColumnedTextLine\"(printerProfile, \n"
						+ "																			   3,\n"
						+ "																			   ARRAY['tt_TOTAL_AMOUNT_tt', '', CAST(round(orderAmount , 2) AS text)],\n"
						+ "																			   ARRAY['l', 'r', 'r']) || chr(13) || chr(13);\n"
						+ "		END IF;\n"
						+ "	END IF;\n"
						+ "	ticket := ticket || COALESCE(pageFooter, '');\n"
						+ "	RETURN QUERY SELECT ticket, printerProfile;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_collect\"(\n"
						+ "	cashregister integer,\n"
						+ "	orderid integer,\n"
						+ "	lang character,\n"
						+ "	currencies integer[],\n"
						+ "	amounts numeric[],\n"
						+ "	notes character varying,\n"
						+ "	customer integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(res integer, rep text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		constraint12met boolean;\n"
						+ "		orderAmount numeric; --in order currency\n"
						+ "		collectedAmount numeric; --in order currency\n"
						+ "		toCollectAmount numeric; --in system currency\n"
						+ "		orderEntityTypeInstanceId integer;\n"
						+ "		orderCurrentStatageId integer;\n"
						+ "		decisionIdToCollectOrder integer;\n"
						+ "		passedCustomerExistsAndIsEnabled boolean;\n"
						+ "		receivableEntityTypeInstanceId integer;\n"
						+ "		decisionIdToCollectReceivable integer;\n"
						+ "		currentDebtor integer;\n"
						+ "		currentReceivableId integer;\n"
						+ "		currentDebtorQualifiedName text;\n"
						+ "		newReceivableMustBeRecorded boolean;\n"
						+ "		receivableDishonored boolean;\n"
						+ "		orderMustBeClosed boolean;\n"
						+ "		decisionIdToDishonorReceivable integer;\n"
						+ "		totalInputAmount numeric; --in system currency\n"
						+ "		newReceivableEntityTypeInstanceId integer;\n"
						+ "		newReceivableId integer;systemCurrencyId integer;\n"
						+ "		systemCurrencyArrayIndex integer;\n"
						+ "		withdrawalAmountsArray numeric[];changeAmount numeric; --in system currency\n"
						+ "		qryResult integer;\n"
						+ "		qryReport text;\n"
						+ "	BEGIN\n"
						+ "		--default returning values.\n"
						+ "		qryResult := 0;\n"
						+ "		qryReport := '';		\n"
						+ "		newReceivableMustBeRecorded := false;\n"
						+ "		receivableDishonored := false;\n"
						+ "		orderMustBeClosed := false;\n"
						+ "		\n"
						+ "		SELECT soberano.\"fn_CashRegister_RULE_CONSTRAINT_12\"(currencies, \n"
						+ "															 cashRegister, \n"
						+ "															 false, \n"
						+ "															 loginname) INTO constraint12met;															 \n"
						+ "		IF NOT constraint12met THEN		\n"
						+ "			qryResult := -2; --DisabledCurrencyException\n"
						+ "		ELSE\n"
						+ "			--retrieve order's state\n"
						+ "			SELECT proc.*\n"
						+ "					FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										\"This_is_in_Stage_with_StageHasStageId\",\n"
						+ "										decision.\"DecisionHasDecisionId\"\n"
						+ "									FROM soberano.\"Order\" objectdata\n"
						+ "										INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "											ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = objectdata.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "										LEFT JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "															\"This_has_Name\" \n"
						+ "														FROM metamodel.\"Decision\") decision\n"
						+ "											ON decision.\"DecisionHasDecisionId\" = \n"
						+ "												(SELECT \"DecisionId\" \n"
						+ "													FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "																objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "																loginname)\n"
						+ "													WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "														/************/\n"
						+ "															'Collect'\n"
						+ "														/************/						   \n"
						+ "\n"
						+ "												   )\n"
						+ "										LEFT JOIN soberano.\"CustomerOrder\" ordercust\n"
						+ "											ON ordercust.\"OrderHasOrderId\" = objectdata.\"OrderHasOrderId\"\n"
						+ "									WHERE objectdata.\"OrderHasOrderId\" = orderid) proc\n"
						+ "						INTO orderEntityTypeInstanceId,\n"
						+ "							orderCurrentStatageId,\n"
						+ "							decisionIdToCollectOrder;\n"
						+ "			\n"
						+ "			--retrieve order's amounts\n"
						+ "			SELECT * \n"
						+ "				FROM soberano.\"fn_Order_getAmounts\"(orderid)\n"
						+ "				INTO orderAmount, collectedAmount, toCollectAmount;\n"
						+ "			\n"
						+ "			--calc passed amount in system currency\n"
						+ "			SELECT COALESCE(SUM(amount * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"), 0)\n"
						+ "					FROM (SELECT currency, ROW_NUMBER () OVER () rownumber FROM \n"
						+ "								(SELECT UNNEST(currencies) currency) cu) currsq\n"
						+ "						INNER JOIN (SELECT amount, ROW_NUMBER () OVER () rownumber FROM \n"
						+ "								(SELECT UNNEST(amounts) amount) am) amtsq\n"
						+ "							ON currsq.rownumber = amtsq.rownumber\n"
						+ "						INNER JOIN soberano.\"Currency\" curr\n"
						+ "							ON curr.\"CurrencyHasCurrencyId\" = currsq.currency\n"
						+ "					INTO totalInputAmount;\n"
						+ "			\n"
						+ "			--validate passed customer\n"
						+ "			SELECT EXISTS(SELECT * FROM soberano.\"Customer\" cust\n"
						+ "							  			INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "							  				ON cust.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "							   			--passed customer exists and it's enabled\n"
						+ "							  			WHERE \"CustomerHasCustomerId\" = customer AND \"This_is_in_Stage_with_StageHasStageId\" = 2)\n"
						+ "						INTO passedCustomerExistsAndIsEnabled;\n"
						+ "			\n"
						+ "			IF orderCurrentStatageId = 5 THEN\n"
						+ "				qryResult := -5; --OrderCanceledException\n"
						+ "			\n"
						+ "			--order is closed\n"
						+ "			ELSIF orderCurrentStatageId = 6 THEN\n"
						+ "				\n"
						+ "				--the order was already collected\n"
						+ "				IF toCollectAmount <= 0 THEN\n"
						+ "					qryResult := -4; --OrderAlreadyCollectedException\n"
						+ "				ELSE\n"
						+ "					--in this point, a receivable recorded in previous calls must be collected\n"
						+ "				\n"
						+ "					--so, a debtor is needed				\n"
						+ "					IF NOT passedCustomerExistsAndIsEnabled THEN\n"
						+ "						qryResult := -3; --DebtorRequiredException\n"
						+ "					ELSE\n"
						+ "						--retrieve the last order's receivable data.\n"
						+ "						--always, the last recivable tied to the order is the one that is collected\n"
						+ "						SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								\"DecisionHasDecisionId\",\n"
						+ "								\"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\",\n"
						+ "								receivableId,\n"
						+ "								\"This_has_FirstName\" || ' ' || \"This_has_LastName\" || ' : ' || \"This_includes_EmailAddress\"\n"
						+ "							FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "										decision.\"DecisionHasDecisionId\",\n"
						+ "										\"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\",\n"
						+ "										\"This_is_of_Order_with_OrderHasOrderId\",\n"
						+ "										\"This_has_FirstName\",\n"
						+ "										\"This_has_LastName\",\n"
						+ "										\"This_includes_EmailAddress\",\n"
						+ "\n"
						+ "										--last receivable\n"
						+ "										MAX(\"ReceivableHasReceivableId\") receivableId\n"
						+ "									FROM soberano.\"Receivable\" objectdata\n"
						+ "										INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "															\"This_has_Name\" \n"
						+ "														FROM metamodel.\"Decision\") decision\n"
						+ "											ON decision.\"DecisionHasDecisionId\" = \n"
						+ "												(SELECT \"DecisionId\" \n"
						+ "													FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "																objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "																loginname)\n"
						+ "													WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "														/************/\n"
						+ "															'Collect'\n"
						+ "														/************/						   \n"
						+ "\n"
						+ "												   )\n"
						+ "										INNER JOIN soberano.\"Customer\" customer\n"
						+ "											ON customer.\"CustomerHasCustomerId\" = objectdata.\"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\"\n"
						+ "										INNER JOIN soberano.\"ContactData\" u\n"
						+ "											ON u.\"ContactDataHasContactDataId\" = customer.\"This_has_ContactData_with_ContactDataHasContactDataId\"\n"
						+ "										LEFT JOIN soberano.\"Order\" ord\n"
						+ "											ON objectdata.\"This_is_of_Order_with_OrderHasOrderId\" = ord.\"OrderHasOrderId\"\n"
						+ "												AND ord.\"OrderHasOrderId\" = orderid\n"
						+ "									GROUP BY objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "											\"DecisionHasDecisionId\",\n"
						+ "											\"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\",\n"
						+ "											\"This_is_of_Order_with_OrderHasOrderId\",\n"
						+ "											\"This_has_FirstName\",\n"
						+ "											\"This_has_LastName\",\n"
						+ "											\"This_includes_EmailAddress\") proc\n"
						+ "								INTO receivableEntityTypeInstanceId,\n"
						+ "									decisionIdToCollectReceivable,\n"
						+ "									currentDebtor,\n"
						+ "									currentReceivableId,\n"
						+ "									currentDebtorQualifiedName;\n"
						+ "						\n"
						+ "						--debtor changed\n"
						+ "						IF COALESCE(customer != currentDebtor, false) THEN\n"
						+ "							\n"
						+ "							--a new receivable must be recorded\n"
						+ "							newReceivableMustBeRecorded := true;\n"
						+ "							receivableDishonored := true;\n"
						+ "							\n"
						+ "							--the current receivable must be marked as dishonored\n"
						+ "							SELECT \"DecisionHasDecisionId\"\n"
						+ "								FROM (SELECT decision.\"DecisionHasDecisionId\"\n"
						+ "										FROM soberano.\"Receivable\" objectdata\n"
						+ "											INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "																\"This_has_Name\" \n"
						+ "															FROM metamodel.\"Decision\") decision\n"
						+ "												ON decision.\"DecisionHasDecisionId\" = \n"
						+ "													(SELECT \"DecisionId\" \n"
						+ "														FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "																	objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "																	loginname)\n"
						+ "														WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "															/************/\n"
						+ "																'Dishonor'\n"
						+ "															/************/						   \n"
						+ "\n"
						+ "													   )\n"
						+ "										WHERE \"ReceivableHasReceivableId\" = currentReceivableId) proc\n"
						+ "									INTO decisionIdToDishonorReceivable;\n"
						+ "									\n"
						+ "							IF decisionIdToDishonorReceivable IS NULL THEN\n"
						+ "								qryResult := -1; --NotEnoughRightsException\n"
						+ "							END IF;\n"
						+ "\n"
						+ "						--same debtor, but the user has no right to collect a receivable\n"
						+ "						ELSIF decisionIdToCollectReceivable IS NULL OR receivableEntityTypeInstanceId IS NULL THEN\n"
						+ "							qryResult := -1; --NotEnoughRightsException\n"
						+ "						END IF;						\n"
						+ "					END IF;\n"
						+ "				END IF;\n"
						+ "			\n"
						+ "			--order is ongoing\n"
						+ "			ELSE\n"
						+ "				--user isn't allowed to collect the order\n"
						+ "				IF decisionIdToCollectOrder IS NULL THEN\n"
						+ "					qryResult := -1; --NotEnoughRightsException\n"
						+ "				ELSE\n"
						+ "					orderMustBeClosed := true;\n"
						+ "				\n"
						+ "					--if the passed amount is lower than the amount to collect\n"
						+ "					IF totalInputAmount < toCollectAmount THEN\n"
						+ "						\n"
						+ "						--upon collecting the order, it's required to record a receivable, so a debtor is needed\n"
						+ "						IF NOT passedCustomerExistsAndIsEnabled THEN\n"
						+ "							qryResult := -3; --DebtorRequiredException\n"
						+ "						ELSE\n"
						+ "							newReceivableMustBeRecorded := true;\n"
						+ "						END IF;\n"
						+ "					END IF;					\n"
						+ "				END IF;\n"
						+ "			END IF;\n"
						+ "			\n"
						+ "			--validation passed\n"
						+ "			IF qryResult = 0 THEN\n"
						+ "			\n"
						+ "				SELECT \"CurrencyHasCurrencyId\",\n"
						+ "								rownumber\n"
						+ "							FROM (SELECT \"CurrencyHasCurrencyId\",\n"
						+ "										\"Currency_is_system_currency\",\n"
						+ "										ROW_NUMBER () OVER (ORDER BY \"CurrencyHasCurrencyId\" ASC) rownumber\n"
						+ "									FROM soberano.\"Currency\"\n"
						+ "									ORDER BY \"This_is_shown_in_Position\" ASC) sq\n"
						+ "							WHERE \"Currency_is_system_currency\"\n"
						+ "							INTO systemCurrencyId, systemCurrencyArrayIndex;\n"
						+ "			\n"
						+ "				--if needed, record receivable\n"
						+ "				IF newReceivableMustBeRecorded THEN\n"
						+ "					\n"
						+ "					--create receivable entity type instance	\n"
						+ "					SELECT metamodel.\"fn_EntityTypeInstance_create\"('Receivable', loginname)\n"
						+ "						INTO newReceivableEntityTypeInstanceId;\n"
						+ "\n"
						+ "					--rights to record receivable?\n"
						+ "					IF newReceivableEntityTypeInstanceId < 0 THEN\n"
						+ "						qryResult := -1; --NotEnoughRightsException\n"
						+ "					ELSE\n"
						+ "						INSERT INTO soberano.\"Receivable\"(\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "														  \"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\", \n"
						+ "														  \"This_is_of_Order_with_OrderHasOrderId\")\n"
						+ "							VALUES (newReceivableEntityTypeInstanceId,\n"
						+ "								   customer,\n"
						+ "								   orderId)\n"
						+ "							RETURNING \"ReceivableHasReceivableId\" INTO newReceivableId;\n"
						+ "\n"
						+ "						IF NOT receivableDishonored THEN\n"
						+ "							INSERT INTO soberano.\"ReceivableIsForAmountInCurrency\"(\"Amount\", \n"
						+ "																			   \"ReceivableHasReceivableId\", \n"
						+ "																			   \"CurrencyHasCurrencyId\")\n"
						+ "								VALUES (toCollectAmount - totalInputAmount, --order closing. new receivable must not be collected in this call to collect\n"
						+ "										newReceivableId,\n"
						+ "										systemCurrencyId);\n"
						+ "						ELSE\n"
						+ "							INSERT INTO soberano.\"ReceivableIsForAmountInCurrency\"(\"Amount\", \n"
						+ "																			   \"ReceivableHasReceivableId\", \n"
						+ "																			   \"CurrencyHasCurrencyId\")\n"
						+ "								VALUES (toCollectAmount, --debtor changed. new receivable must be collected in this call to collect\n"
						+ "										newReceivableId,\n"
						+ "										systemCurrencyId);									\n"
						+ "							\n"
						+ "							--dishonor the previous receivable\n"
						+ "							PERFORM metamodel.\"fn_Vote_vote\"('soberano.user.top',\n"
						+ "													receivableEntityTypeInstanceId, \n"
						+ "													decisionIdToDishonorReceivable,\n"
						+ "													'#TO_TRANSLATE(RECEIVABLE)# ' || CAST(currentReceivableId AS text) || ' #TO_TRANSLATE(DISHONORED_BY)# ' || currentDebtorQualifiedName);\n"
						+ "							\n"
						+ "							--update the active receivable\n"
						+ "							currentReceivableId := newReceivableId;\n"
						+ "							receivableEntityTypeInstanceId := newReceivableEntityTypeInstanceId;\n"
						+ "						END IF;\n"
						+ "					END IF;\n"
						+ "				END IF;\n"
						+ "				\n"
						+ "				--no new receivable required to be recorded, or the recording succeded\n"
						+ "				IF qryResult = 0 THEN					\n"
						+ "					IF orderMustBeClosed THEN					\n"
						+ "						--make decision. order goes to 'Close' stage\n"
						+ "						PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "														orderEntityTypeInstanceId, \n"
						+ "														decisionIdToCollectOrder, \n"
						+ "														'#TO_TRANSLATE(ORDER)# ' || CAST(orderid AS text) || ' #TO_TRANSLATE(CLOSED_BY)# ' || loginname);\n"
						+ "\n"
						+ "						PERFORM soberano.\"fn_Order_closeProcessRuns\"(orderid, loginname);\n"
						+ "					ELSE\n"
						+ "						--make decision. collect receivable\n"
						+ "						PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "														receivableEntityTypeInstanceId, \n"
						+ "														decisionIdToCollectReceivable, \n"
						+ "														'#TO_TRANSLATE(RECEIVABLE)# ' || CAST(currentReceivableId AS text) || ' #TO_TRANSLATE(COLLECTED_BY)# ' || loginname);\n"
						+ "					END IF;\n"
						+ "					\n"
						+ "					PERFORM soberano.\"fn_Deposit_create\"(1,\n"
						+ "												false,\n"
						+ "												orderid,\n"
						+ "												currentReceivableId,\n"
						+ "												currencies,\n"
						+ "												amounts,\n"
						+ "												notes,\n"
						+ "												'soberano.user.top');\n"
						+ "				\n"
						+ "					changeAmount := totalInputAmount - toCollectAmount;\n"
						+ "\n"
						+ "					IF changeAmount > 0 THEN\n"
						+ "						SELECT array_fill(0, ARRAY[array_length(currencies, 1)]) INTO withdrawalAmountsArray;\n"
						+ "						withdrawalAmountsArray[systemCurrencyArrayIndex] := changeAmount;				\n"
						+ "						PERFORM soberano.\"fn_Withdrawal_create\"(1, \n"
						+ "																false,\n"
						+ "																orderid,\n"
						+ "																currentReceivableId,\n"
						+ "																currencies,\n"
						+ "																withdrawalAmountsArray,\n"
						+ "																notes,\n"
						+ "																'soberano.user.top');\n"
						+ "					END IF;\n"
						+ "					SELECT * FROM soberano.\"fn_Order_getTicket\"(orderid, lang, 'soberano.user.top') INTO qryReport;					\n"
						+ "				END IF;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN QUERY SELECT qryResult, qryReport;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_closeProcessRuns\"(\n"
						+ "	orderid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS void\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		processRunRecord record;\n"
						+ "		outputquantities numeric[];\n"
						+ "		outputitems character varying[];		\n"
						+ "		outputunits integer[];\n"
						+ "		weights integer[];\n"
						+ "		salesWarehouseId integer;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"WarehouseHasWarehouseId\" \n"
						+ "			FROM soberano.\"Warehouse\" \n"
						+ "			WHERE \"Warehouse_is_sales_warehouse\"\n"
						+ "			INTO salesWarehouseId;\n"
						+ "			\n"
						+ "		FOR processRunRecord IN SELECT opr.\"ProcessRunHasProcessRunId\" prId, \n"
						+ "										prohpfo.\"InventoryItemHasInventoryItemCode\" iItemCode,\n"
						+ "										\"This_increases_stock_in_OutputWarehouse_with_WarehouseHasWareho\" outputWarehouse\n"
						+ "									FROM soberano.\"OrderProcessRun\" opr\n"
						+ "										INNER JOIN soberano.\"ProcessRunOutputHasPriceForOrder\" prohpfo\n"
						+ "											ON opr.\"ProcessRunHasProcessRunId\" = prohpfo.\"ProcessRunHasProcessRunId\"\n"
						+ "										INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "											ON pr.\"ProcessRunHasProcessRunId\" = opr.\"ProcessRunHasProcessRunId\"\n"
						+ "										INNER JOIN soberano.\"CostCenter\" cc\n"
						+ "											ON cc.\"CostCenterHasCostCenterId\" = pr.\"This_is_executed_in_CostCenter_with_CostCenterHasCostCenterId\"\n"
						+ "										LEFT JOIN soberano.\"Product\" product\n"
						+ "											ON product.\"InventoryItemHasInventoryItemCode\" = prohpfo.\"InventoryItemHasInventoryItemCode\"\n"
						+ "									WHERE opr.\"OrderHasOrderId\" = orderId LOOP\n"
						+ "\n"
						+ "			SELECT ARRAY(SELECT CASE WHEN po.\"Quantity\" * \"This_has_ended_Runs\" < 0 THEN 0 \n"
						+ "									ELSE po.\"Quantity\" * \"This_has_ended_Runs\" END\n"
						+ "							FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "								INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "									ON opr.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "									ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = processRunRecord.iItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON iitem.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE pro.\"ProcessRunHasProcessRunId\" = processRunRecord.prId\n"
						+ "								ORDER BY pro.\"InventoryItemHasInventoryItemCode\") INTO outputquantities;\n"
						+ "\n"
						+ "			SELECT ARRAY(SELECT pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "								INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "									ON opr.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "									ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = processRunRecord.iItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON iitem.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE pro.\"ProcessRunHasProcessRunId\" = processRunRecord.prId\n"
						+ "								ORDER BY pro.\"InventoryItemHasInventoryItemCode\") INTO outputitems;\n"
						+ "\n"
						+ "			SELECT ARRAY(SELECT pro.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "							FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "								INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "									ON opr.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "									ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = processRunRecord.iItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "									ON iitem.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								WHERE pro.\"ProcessRunHasProcessRunId\" = processRunRecord.prId\n"
						+ "								ORDER BY pro.\"InventoryItemHasInventoryItemCode\") INTO outputunits;\n"
						+ "								\n"
						+ "			SELECT array_fill(100, ARRAY[array_length(outputunits, 1)]) INTO weights;\n"
						+ "			\n"
						+ "			PERFORM soberano.\"fn_ProcessRun_close\"(processRunRecord.prId,\n"
						+ "												outputitems,\n"
						+ "												outputquantities,\n"
						+ "												outputunits,\n"
						+ "												weights,\n"
						+ "												'soberano.user.top');\n"
						+ "			\n"
						+ "			--move all outputs to sales warehouse.\n"
						+ "			PERFORM soberano.\"fn_InventoryOperation_create\"(processRunRecord.outputWarehouse,\n"
						+ "														salesWarehouseId,\n"
						+ "														\"WorkerHasWorkerId\",\n"
						+ "														outputitems,\n"
						+ "														outputunits,\n"
						+ "														outputquantities,\n"
						+ "														'soberano.user.top')\n"
						+ "				FROM soberano.\"Worker\" WHERE \"This_has_LoginName\" = loginname;								\n"
						+ "		END LOOP;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_getAllWithStringId\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \n"
						+ "				  \"domainObjectStringId\" character varying, \n"
						+ "				  \"domainObjectName\" text, \n"
						+ "				  unit integer, \n"
						+ "				  \"oneRunQuantity\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT am.\"ProductHasProductId\",\n"
						+ "							  		am.\"InventoryItemHasInventoryItemCode\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\",\n"
						+ "							  		\"This_is_measured_in_Unit_with_UnitHasUnitId\",\n"
						+ "							  		\"Quantity\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(13, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Product\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							 			LEFT JOIN (	--only one of the processes that produces the item is returned\n"
						+ "			  										--the last one configured\n"
						+ "													SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "												   			pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												   		FROM soberano.\"Product\" pro\n"
						+ "														INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "															ON pro.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "														GROUP BY pro.\"InventoryItemHasInventoryItemCode\") pout\n"
						+ "											ON ii.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										LEFT JOIN soberano.\"ProcessOutput\" pout1\n"
						+ "											ON pout.\"InventoryItemHasInventoryItemCode\" = pout1.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												AND pout.\"proid\" = pout1.\"ProcessHasProcessId\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_getAllWithStringIdForOrder\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectStringId\" character varying, \"domainObjectName\" text, unit integer, \"oneRunQuantity\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 100\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT am.\"ProductHasProductId\",\n"
						+ "							  		am.\"InventoryItemHasInventoryItemCode\", \n"
						+ "									\"This_has_Name\" || ' : ' || am.\"InventoryItemHasInventoryItemCode\" \"domainObjectName\",\n"
						+ "							  		\"This_is_measured_in_Unit_with_UnitHasUnitId\",\n"
						+ "							  		\"Quantity\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(13, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"Product\" am\n"
						+ "											ON instance.\"InstanceId\" = am.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "							  					\n"
						+ "							  					--the product must be shown (enabled) in catalog\n"
						+ "							  					AND am.\"Product_is_enabled\"\n"
						+ "							 			INNER JOIN soberano.\"InventoryItem\" ii\n"
						+ "											ON am.\"InventoryItemHasInventoryItemCode\" = ii.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							 			LEFT JOIN (	--only one of the processes that produces the item is returned\n"
						+ "			  										--the last one configured\n"
						+ "													SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "												   			pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												   		FROM soberano.\"Product\" pro\n"
						+ "														INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "															ON pro.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "														GROUP BY pro.\"InventoryItemHasInventoryItemCode\") pout\n"
						+ "											ON ii.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "										LEFT JOIN soberano.\"ProcessOutput\" pout1\n"
						+ "											ON pout.\"InventoryItemHasInventoryItemCode\" = pout1.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												AND pout.\"proid\" = pout1.\"ProcessHasProcessId\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_cancel\"(\n"
						+ "	lang character,\n"
						+ "	orderid integer,\n"
						+ "	processrunid integer,\n"
						+ "	inventoryitemcode character varying,\n"
						+ "	runstocancel numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		inventoryItemName character varying;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		cancellableRuns numeric;\n"
						+ "		canceledRuns numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		SELECT \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\"\n"
						+ "				FROM soberano.\"OrderProcessRun\" \n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processRunId \n"
						+ "					AND \"OrderHasOrderId\" = orderid\n"
						+ "				INTO cancellableRuns;\n"
						+ "				\n"
						+ "		IF runsToCancel < 0 THEN\n"
						+ "			canceledRuns := 0;\n"
						+ "		ELSIF cancellableRuns < runsToCancel THEN \n"
						+ "			canceledRuns := cancellableRuns;\n"
						+ "		ELSE \n"
						+ "			canceledRuns := runsToCancel;\n"
						+ "		END IF;\n"
						+ "		\n"
						+ "		IF canceledRuns > 0 THEN\n"
						+ "		\n"
						+ "			--user has rights\n"
						+ "			IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "\n"
						+ "				SELECT \"This_has_Name\" \n"
						+ "					FROM soberano.\"InventoryItem\" \n"
						+ "					WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "					INTO inventoryItemName;\n"
						+ "\n"
						+ "				--update order's canceled and discounted runs counts\n"
						+ "				UPDATE soberano.\"OrderProcessRun\"\n"
						+ "					SET \"This_has_customer-canceled_Runs\" = \n"
						+ "						CASE WHEN \"This_has_customer-canceled_Runs\" + canceledRuns > \"This_has_ordered_Runs\" THEN \"This_has_ordered_Runs\"\n"
						+ "							ELSE \"This_has_customer-canceled_Runs\" + canceledRuns END,\n"
						+ "						\"This_has_full_discounted_Runs\" = \n"
						+ "						CASE WHEN \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\" - canceledRuns < \"This_has_full_discounted_Runs\" THEN \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\" - canceledRuns\n"
						+ "							ELSE \"This_has_full_discounted_Runs\" END\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid\n"
						+ "						AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "						\n"
						+ "				--update order's ended runs count\n"
						+ "				UPDATE soberano.\"OrderProcessRun\"\n"
						+ "					SET \"This_has_ended_Runs\" = \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\"\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid\n"
						+ "						AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "\n"
						+ "				--update corresponding process run inputs according to process specification\n"
						+ "				UPDATE soberano.\"ProcessRunInput\" t1\n"
						+ "					SET \"Quantity\" = t2.newQuantity\n"
						+ "					FROM (SELECT pri.\"ProcessRunHasProcessRunId\",\n"
						+ "								CASE WHEN pri.\"Quantity\" - pi.\"Quantity\" * canceledRuns < 0 THEN 0 ELSE pri.\"Quantity\" - pi.\"Quantity\" * canceledRuns END newQuantity,\n"
						+ "								pri.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"ProcessRunInput\" pri\n"
						+ "								INNER JOIN soberano.\"ProcessInput\" pi\n"
						+ "									ON pri.\"InventoryItemHasInventoryItemCode\" = pi.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pri.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON pi.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								WHERE pri.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "					WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "						AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "\n"
						+ "				--update corresponding process run outputs according to process specification\n"
						+ "				UPDATE soberano.\"ProcessRunOutput\" t1\n"
						+ "					SET \"Quantity\" = t2.newQuantity\n"
						+ "					FROM (SELECT pro.\"ProcessRunHasProcessRunId\",\n"
						+ "								CASE WHEN pro.\"Quantity\" - po.\"Quantity\" * canceledRuns < 0 THEN 0 ELSE pro.\"Quantity\" - po.\"Quantity\" * canceledRuns END newQuantity,\n"
						+ "								pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "									ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								WHERE pro.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "					WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "						AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId,\n"
						+ "												CAST(canceledRuns AS text) || ' ' || \n"
						+ "												inventoryItemName || ' : ' || inventoryItemCode || \n"
						+ "												' tt_REMOVED_FROM_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "		ELSE qryResult := 0; END IF;\n"
						+ "\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_reorder\"(\n"
						+ "	lang character,\n"
						+ "	orderid integer,\n"
						+ "	processrunid integer,\n"
						+ "	inventoryitemcode character varying,\n"
						+ "	runstoreorder numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		inventoryItemName character varying;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		reorderableRuns numeric;\n"
						+ "		reorderedRuns numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "		\n"
						+ "		SELECT \"This_has_customer-canceled_Runs\" FROM soberano.\"OrderProcessRun\" \n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processRunId \n"
						+ "					AND \"OrderHasOrderId\" = orderid\n"
						+ "				INTO reorderableRuns;\n"
						+ "				\n"
						+ "		IF runsToReorder < 0 THEN\n"
						+ "			reorderedRuns := 0;\n"
						+ "		ELSIF runsToReorder > reorderableRuns THEN\n"
						+ "			reorderedRuns := reorderableRuns;\n"
						+ "		ELSE\n"
						+ "			reorderedRuns := runsToReorder;\n"
						+ "		END IF;\n"
						+ "			\n"
						+ "		IF reorderedRuns > 0 THEN\n"
						+ "		\n"
						+ "			--user has rights\n"
						+ "			IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "\n"
						+ "				SELECT \"This_has_Name\" \n"
						+ "					FROM soberano.\"InventoryItem\" \n"
						+ "					WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "					INTO inventoryItemName;\n"
						+ "\n"
						+ "				--update order's canceled runs count\n"
						+ "				UPDATE soberano.\"OrderProcessRun\"\n"
						+ "					SET \"This_has_customer-canceled_Runs\" = \n"
						+ "						CASE WHEN \"This_has_customer-canceled_Runs\" - reorderedRuns < 0 THEN 0\n"
						+ "							ELSE \"This_has_customer-canceled_Runs\" - reorderedRuns END\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid\n"
						+ "						AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "						\n"
						+ "				--update order's ended runs count\n"
						+ "				UPDATE soberano.\"OrderProcessRun\"\n"
						+ "					SET \"This_has_ended_Runs\" = \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\"\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid\n"
						+ "						AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "\n"
						+ "				--update corresponding process run inputs according to process specification\n"
						+ "				UPDATE soberano.\"ProcessRunInput\" t1\n"
						+ "					SET \"Quantity\" = t2.newQuantity\n"
						+ "					FROM (SELECT pri.\"ProcessRunHasProcessRunId\",\n"
						+ "								CASE WHEN pri.\"Quantity\" + pi.\"Quantity\" * reorderedRuns < 0 THEN 0 ELSE pri.\"Quantity\" + pi.\"Quantity\" * reorderedRuns END newQuantity,\n"
						+ "								pri.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"ProcessRunInput\" pri\n"
						+ "								INNER JOIN soberano.\"ProcessInput\" pi\n"
						+ "									ON pri.\"InventoryItemHasInventoryItemCode\" = pi.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pri.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON pi.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								WHERE pri.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "					WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "						AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "\n"
						+ "				--update corresponding process run outputs according to process specification\n"
						+ "				UPDATE soberano.\"ProcessRunOutput\" t1\n"
						+ "					SET \"Quantity\" = t2.newQuantity\n"
						+ "					FROM (SELECT pro.\"ProcessRunHasProcessRunId\",\n"
						+ "								CASE WHEN pro.\"Quantity\" + po.\"Quantity\" * reorderedRuns < 0 THEN 0 ELSE pro.\"Quantity\" + po.\"Quantity\" * reorderedRuns END newQuantity,\n"
						+ "								pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "								INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "									ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "								INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "									ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "								INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "											--the last one configured\n"
						+ "											SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "													prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												FROM soberano.\"Product\" prod\n"
						+ "													INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "														ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "												WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "												GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "									ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "										AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "								WHERE pro.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "					WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "						AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "						AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId,\n"
						+ "												CAST(reorderedRuns AS text) || ' ' || \n"
						+ "												inventoryItemName || ' : ' || inventoryItemCode || \n"
						+ "												' tt_REORDERED_FOR_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "		ELSE qryResult := 0; END IF; \n"
						+ "					\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_applyItemDiscount\"(\n"
						+ "	orderid integer,\n"
						+ "	processrunid integer,\n"
						+ "	inventoryitemcode character varying,\n"
						+ "	runstodiscount numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		inventoryItemName character varying;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		discountableRuns numeric;\n"
						+ "		discountedRuns numeric;\n"
						+ "		currentDiscountedRuns numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		SELECT \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\",\n"
						+ "				\"This_has_full_discounted_Runs\"\n"
						+ "				FROM soberano.\"OrderProcessRun\" \n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processRunId \n"
						+ "					AND \"OrderHasOrderId\" = orderid\n"
						+ "				INTO discountableRuns, currentDiscountedRuns;\n"
						+ "					\n"
						+ "		IF runstodiscount < 0 THEN\n"
						+ "			discountedRuns := 0;\n"
						+ "		ELSIF runstodiscount > discountableRuns THEN\n"
						+ "			discountedRuns := discountableRuns;\n"
						+ "		ELSE\n"
						+ "			discountedRuns := runstodiscount;\n"
						+ "		END IF;\n"
						+ "		\n"
						+ "		IF discountedRuns <> currentDiscountedRuns THEN\n"
						+ "		\n"
						+ "			--user has rights\n"
						+ "			IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "			\n"
						+ "				SELECT \"This_has_Name\" \n"
						+ "					FROM soberano.\"InventoryItem\" \n"
						+ "					WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "					INTO inventoryItemName;\n"
						+ "					\n"
						+ "				--update order's discounted runs\n"
						+ "				UPDATE soberano.\"OrderProcessRun\"\n"
						+ "					SET \"This_has_full_discounted_Runs\" = discountedRuns\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid\n"
						+ "						AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId,\n"
						+ "												CAST(discountedRuns AS text) || ' ' || \n"
						+ "												inventoryItemName || ' : ' || inventoryItemCode || \n"
						+ "												' tt_DISCOUNTED_FOR_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "		ELSE qryResult := 0; END IF;\n"
						+ "			\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_applyDiscount\"(\n"
						+ "	orderid integer,\n"
						+ "	discountRate integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		currentDiscountRate integer;\n"
						+ "		discountRateToApply integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		SELECT \"This_is_granted_a_DiscountRate\"\n"
						+ "				FROM soberano.\"Order\" \n"
						+ "				WHERE \"OrderHasOrderId\" = orderid\n"
						+ "				INTO currentDiscountRate;\n"
						+ "					\n"
						+ "		IF discountRate < 0 THEN\n"
						+ "			discountRateToApply := 0;\n"
						+ "		ELSIF discountRate > 100 THEN\n"
						+ "			discountRateToApply := 100;\n"
						+ "		ELSE\n"
						+ "			discountRateToApply := discountRate;\n"
						+ "		END IF;\n"
						+ "		\n"
						+ "		IF discountRateToApply <> currentDiscountRate THEN\n"
						+ "		\n"
						+ "			--user has rights\n"
						+ "			IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "			\n"
						+ "				--update order's discount\n"
						+ "				UPDATE soberano.\"Order\"\n"
						+ "					SET \"This_is_granted_a_DiscountRate\" = discountRateToApply\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "												entityTypeInstanceId, \n"
						+ "												decisionId,\n"
						+ "												CAST(discountRateToApply AS text) || ' % ' || \n"
						+ "												' tt_DISCOUNTED_FOR_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "			END IF;\n"
						+ "		\n"
						+ "		ELSE qryResult := 0; END IF;\n"
						+ "			\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_getCanceledRunsCount\"(\n"
						+ "	orderid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS numeric\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult numeric;\n"
						+ "	BEGIN\n"
						+ "		SELECT SUM(\"This_has_customer-canceled_Runs\")\n"
						+ "			FROM soberano.\"OrderProcessRun\" opr\n"
						+ "				INNER JOIN soberano.\"Order\" o\n"
						+ "					ON opr.\"OrderHasOrderId\" = o.\"OrderHasOrderId\"\n"
						+ "				INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "					ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			WHERE o.\"OrderHasOrderId\" = orderid\n"
						+ "				AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(o.\"This_is_identified_by_EntityTypeInstance_id\", loginname))\n"
						+ "			INTO qryResult;\n"
						+ "		IF qryResult IS NULL THEN qryResult := -1; END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_endCanceledRuns\"(\n"
						+ "	orderid integer,\n"
						+ "	processrunid integer,\n"
						+ "	inventoryitemcode character varying,\n"
						+ "	runstoend numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		inventoryItemName character varying;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		canceledEndableRuns numeric;\n"
						+ "		canceledButEndedRuns numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		SELECT \"This_has_customer-canceled_Runs\"\n"
						+ "				FROM soberano.\"OrderProcessRun\" \n"
						+ "				WHERE \"ProcessRunHasProcessRunId\" = processRunId \n"
						+ "					AND \"OrderHasOrderId\" = orderid\n"
						+ "				INTO canceledEndableRuns;\n"
						+ "					\n"
						+ "		IF runsToEnd < 0 THEN\n"
						+ "			canceledButEndedRuns := 0;\n"
						+ "		ELSIF runsToEnd > canceledEndableRuns THEN\n"
						+ "			canceledButEndedRuns := canceledEndableRuns;\n"
						+ "		ELSE\n"
						+ "			canceledButEndedRuns := runsToEnd;\n"
						+ "		END IF;\n"
						+ "		\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "\n"
						+ "			SELECT \"This_has_Name\" \n"
						+ "				FROM soberano.\"InventoryItem\" \n"
						+ "				WHERE \"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "				INTO inventoryItemName;\n"
						+ "\n"
						+ "			--update order's ended runs\n"
						+ "			UPDATE soberano.\"OrderProcessRun\"\n"
						+ "				SET \"This_has_ended_Runs\" = \"This_has_ordered_Runs\" - \"This_has_customer-canceled_Runs\" + canceledButEndedRuns\n"
						+ "				WHERE \"OrderHasOrderId\" = orderid\n"
						+ "					AND \"ProcessRunHasProcessRunId\" = processRunId;\n"
						+ "					\n"
						+ "			--update corresponding process run inputs according to process specification\n"
						+ "			UPDATE soberano.\"ProcessRunInput\" t1\n"
						+ "				SET \"Quantity\" = t2.newQuantity\n"
						+ "				FROM (SELECT pri.\"ProcessRunHasProcessRunId\",\n"
						+ "							CASE WHEN pi.\"Quantity\" * \"This_has_ended_Runs\" < 0 THEN 0 ELSE pi.\"Quantity\" * \"This_has_ended_Runs\" END newQuantity,\n"
						+ "							pri.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						FROM soberano.\"ProcessRunInput\" pri\n"
						+ "					  		INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "					  			ON opr.\"ProcessRunHasProcessRunId\" = pri.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN soberano.\"ProcessInput\" pi\n"
						+ "								ON pri.\"InventoryItemHasInventoryItemCode\" = pi.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "								ON pri.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "										--the last one configured\n"
						+ "										SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "												prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											FROM soberano.\"Product\" prod\n"
						+ "												INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "													ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "											GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "								ON pi.\"ProcessHasProcessId\" = proc.proid\n"
						+ "									AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "							WHERE pri.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "				WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "					AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "					AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "\n"
						+ "			--update corresponding process run outputs according to process specification\n"
						+ "			UPDATE soberano.\"ProcessRunOutput\" t1\n"
						+ "				SET \"Quantity\" = t2.newQuantity\n"
						+ "				FROM (SELECT pro.\"ProcessRunHasProcessRunId\",\n"
						+ "							CASE WHEN po.\"Quantity\" * \"This_has_ended_Runs\" < 0 THEN 0 ELSE po.\"Quantity\" * \"This_has_ended_Runs\" END newQuantity,\n"
						+ "							pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "						FROM soberano.\"ProcessRunOutput\" pro\n"
						+ "					  		INNER JOIN soberano.\"OrderProcessRun\" opr\n"
						+ "					  			ON opr.\"ProcessRunHasProcessRunId\" = pro.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN soberano.\"ProcessOutput\" po\n"
						+ "								ON pro.\"InventoryItemHasInventoryItemCode\" = po.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							INNER JOIN soberano.\"ProcessRun\" pr\n"
						+ "								ON pro.\"ProcessRunHasProcessRunId\" = pr.\"ProcessRunHasProcessRunId\"\n"
						+ "							INNER JOIN (--only one of the processes that produces the item is returned\n"
						+ "										--the last one configured\n"
						+ "										SELECT MAX(\"ProcessHasProcessId\") proid, \n"
						+ "												prod.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											FROM soberano.\"Product\" prod\n"
						+ "												INNER JOIN soberano.\"ProcessOutput\" pout\n"
						+ "													ON prod.\"InventoryItemHasInventoryItemCode\" = pout.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											WHERE prod.\"InventoryItemHasInventoryItemCode\" = inventoryItemCode\n"
						+ "											GROUP BY prod.\"InventoryItemHasInventoryItemCode\") proc\n"
						+ "								ON po.\"ProcessHasProcessId\" = proc.proid\n"
						+ "									AND pr.\"This_is_of_Process_with_ProcessHasProcessId\" = proc.proid\n"
						+ "							WHERE pro.\"ProcessRunHasProcessRunId\" = processRunId) t2\n"
						+ "				WHERE t1.\"ProcessRunHasProcessRunId\" = processRunId\n"
						+ "					AND t1.\"ProcessRunHasProcessRunId\" = t2.\"ProcessRunHasProcessRunId\"\n"
						+ "					AND	t1.\"InventoryItemHasInventoryItemCode\" = t2.\"InventoryItemHasInventoryItemCode\";\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId,\n"
						+ "											CAST(canceledButEndedRuns AS text) || ' ' || \n"
						+ "											inventoryItemName || ' : ' || inventoryItemCode || \n"
						+ "											' tt_CANCELED_BUT_ENDED_FOR_ORDER_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' tt_BY_tt ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "			\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_changeCustomer\"(\n"
						+ "	orderid integer,\n"
						+ "	customerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		rate double precision;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;	\n"
						+ "		\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--the customer changed. convert the order into an in situ order\n"
						+ "			UPDATE soberano.\"Order\"\n"
						+ "				SET \"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = NULL\n"
						+ "				WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "			DELETE FROM soberano.\"Delivery\" WHERE \"OrderHasOrderId\" = orderid;			\n"
						+ "		\n"
						+ "			SELECT \"This_is_granted_a_DiscountRate\" \n"
						+ "				FROM soberano.\"Customer\"\n"
						+ "				WHERE \"CustomerHasCustomerId\" = customerid\n"
						+ "				INTO rate;\n"
						+ "			\n"
						+ "			UPDATE soberano.\"CustomerOrder\"\n"
						+ "				SET \"This_has_DiscountRate\" = COALESCE(rate, 0),\n"
						+ "					\"CustomerHasCustomerId\" = customerid\n"
						+ "				WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId,\n"
						+ "											'tt_CUSTOMER_CHANGED_FOR ORDER)_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(BY)# ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "\n"
						+ "		END IF;\n"
						+ "					\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_changeDeliveryProvider\"(\n"
						+ "	orderid integer,\n"
						+ "	providerid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		country character(2);\n"
						+ "		postalCode character varying;\n"
						+ "		rate double precision;\n"
						+ "		fee money;\n"
						+ "		deliveryContactData integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;	\n"
						+ "		\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			IF providerId IS NULL THEN\n"
						+ "			\n"
						+ "				DELETE FROM soberano.\"Delivery\" WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "				UPDATE soberano.\"Order\"\n"
						+ "					SET \"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = NULL\n"
						+ "					WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "				qryResult := 0;\n"
						+ "			ELSE\n"
						+ "			\n"
						+ "				--a customer has been specified\n"
						+ "				IF EXISTS(SELECT * FROM soberano.\"CustomerOrder\" \n"
						+ "							WHERE \"OrderHasOrderId\" = orderid\n"
						+ "								AND \"CustomerHasCustomerId\" IS NOT NULL) THEN\n"
						+ "\n"
						+ "					--the country and postal code from the order's delivery address\n"
						+ "					SELECT \"This_includes_PostalCode\",\n"
						+ "							\"This_belongs_to_Country_with_CountryHasCountryCode\",\n"
						+ "							\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\"\n"
						+ "						FROM soberano.\"PostalAddress\" pa\n"
						+ "							INNER JOIN soberano.\"ContactData\" cd\n"
						+ "								ON cd.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = pa.\"PostalAddressHasPostalAddressId\"\n"
						+ "							INNER JOIN soberano.\"Order\" o\n"
						+ "								ON o.\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = cd.\"ContactDataHasContactDataId\"\n"
						+ "									AND o.\"OrderHasOrderId\" = orderid\n"
						+ "							INNER JOIN soberano.\"Municipality\" mun\n"
						+ "								ON mun.\"MunicipalityHasMunicipalityId\" = pa.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\"\n"
						+ "							INNER JOIN soberano.\"Province\" prov\n"
						+ "								ON mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = prov.\"ProvinceHasProvinceId\"\n"
						+ "						INTO postalCode, country, deliveryContactData;\n"
						+ "\n"
						+ "					--a delivery address has not been specified\n"
						+ "					IF deliveryContactData IS NULL THEN\n"
						+ "\n"
						+ "						--in this point, a customer has been specified. take the customer'address\n"
						+ "						SELECT \"This_includes_PostalCode\",\n"
						+ "								\"This_belongs_to_Country_with_CountryHasCountryCode\",\n"
						+ "								\"This_has_ContactData_with_ContactDataHasContactDataId\"\n"
						+ "							FROM soberano.\"PostalAddress\" pa\n"
						+ "								INNER JOIN soberano.\"ContactData\" cd\n"
						+ "									ON cd.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = pa.\"PostalAddressHasPostalAddressId\"\n"
						+ "								INNER JOIN soberano.\"Customer\" cust\n"
						+ "									ON cust.\"This_has_ContactData_with_ContactDataHasContactDataId\" = cd.\"ContactDataHasContactDataId\"\n"
						+ "								INNER JOIN soberano.\"CustomerOrder\" co\n"
						+ "									ON co.\"CustomerHasCustomerId\" = cust.\"CustomerHasCustomerId\"\n"
						+ "										AND co.\"OrderHasOrderId\" = orderid\n"
						+ "								INNER JOIN soberano.\"Municipality\" mun\n"
						+ "									ON mun.\"MunicipalityHasMunicipalityId\" = pa.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\"\n"
						+ "								INNER JOIN soberano.\"Province\" prov\n"
						+ "									ON mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = prov.\"ProvinceHasProvinceId\"\n"
						+ "							INTO postalCode, country, deliveryContactData;\n"
						+ "					END IF;\n"
						+ "\n"
						+ "					--check whether the provider delivers to that postal code\n"
						+ "					SELECT \"This_charges_Rate_on_order_amount\",\n"
						+ "							\"Fee\"\n"
						+ "						FROM soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\" fees\n"
						+ "							INNER JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "								ON dp.\"DeliveryProviderHasDeliveryProviderId\" = fees.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "						WHERE dp.\"DeliveryProviderHasDeliveryProviderId\" = providerid\n"
						+ "							AND \"NationalizedPostalCodeHasPostalCode\" = postalCode\n"
						+ "							AND \"CountryHasCountryCode\" = country\n"
						+ "						INTO rate, fee;\n"
						+ "\n"
						+ "					IF fee IS NOT NULL THEN\n"
						+ "						UPDATE soberano.\"Order\"\n"
						+ "							SET \"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = deliveryContactData\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "\n"
						+ "						DELETE FROM soberano.\"Delivery\" WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "\n"
						+ "						INSERT INTO soberano.\"Delivery\"(\"Rate_is_applied_to_This\", \n"
						+ "														\"Fee_is_charges_to_This\", \n"
						+ "														\"OrderHasOrderId\", \n"
						+ "														\"DeliveryProviderHasDeliveryProviderId\")\n"
						+ "							VALUES (rate, fee, orderid, providerid);\n"
						+ "\n"
						+ "						--make the decision\n"
						+ "						PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "														entityTypeInstanceId, \n"
						+ "														decisionId,\n"
						+ "														'tt_DELIVERY_PROVIDER_CHANGED_FOR_ORDER)_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(BY)# ' || loginname);\n"
						+ "						qryResult := 0;\n"
						+ "					ELSE\n"
						+ "						--the provider does not deliver to that postal code\n"
						+ "						qryResult := -3;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					--customer not specified\n"
						+ "					qryResult := -2;\n"
						+ "				END IF;\n"
						+ "			\n"
						+ "			END IF;\n"
						+ "		END IF;					\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_changeDeliveryAddress\"(\n"
						+ "	orderid integer,\n"
						+ "	emailaddress character varying,\n"
						+ "	mobilephonenumber character varying,\n"
						+ "	address character varying,\n"
						+ "	postalcode character varying,\n"
						+ "	town character varying,\n"
						+ "	municipalityid integer,\n"
						+ "	city character varying,\n"
						+ "	latitude double precision,\n"
						+ "	longitude double precision,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		qryResult integer;\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		decisionId integer;\n"
						+ "		deliveryContactData integer;\n"
						+ "	\n"
						+ "		postalAddressId integer;\n"
						+ "		contactDataId integer;\n"
						+ "		fee money;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT proc.*\n"
						+ "			FROM (SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "								objectdata.\"This_is_identified_by_Label\",\n"
						+ "								decision.\"DecisionHasDecisionId\" \n"
						+ "							FROM soberano.\"Order\" objectdata\n"
						+ "								INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "													\"This_has_Name\" \n"
						+ "												FROM metamodel.\"Decision\") decision\n"
						+ "									ON decision.\"DecisionHasDecisionId\" = \n"
						+ "										(SELECT \"DecisionId\" \n"
						+ "											FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "														objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "														loginname)\n"
						+ "											WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "												/************/\n"
						+ "													'Change'\n"
						+ "												/************/						   \n"
						+ "\n"
						+ "										   )\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid) proc\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--in case the address is the same as the current address, do nothing\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ContactData\" cd\n"
						+ "						  				INNER JOIN soberano.\"Order\" o\n"
						+ "											ON o.\"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = cd.\"ContactDataHasContactDataId\"\n"
						+ "						 				INNER JOIN soberano.\"PostalAddress\" pa\n"
						+ "											ON cd.\"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\" = pa.\"PostalAddressHasPostalAddressId\"\n"
						+ "						 			WHERE o.\"OrderHasOrderId\" = orderid\n"
						+ "						 				AND pa.\"This_includes_Town\" = town\n"
						+ "										AND pa.\"This_includes_PostalCode\" = postalcode\n"
						+ "										AND pa.\"This_includes_AddressString\" = address\n"
						+ "										AND pa.\"This_includes_Latitute\" = latitude\n"
						+ "										AND pa.\"This_includes_Longitude\" = longitude\n"
						+ "										AND pa.\"This_includes_City\" = city\n"
						+ "										AND pa.\"This_includes_Municipality_with_MunicipalityHasMunicipalityId\" = municipalityid\n"
						+ "										AND cd.\"This_includes_PhoneNumber\" = mobilephonenumber\n"
						+ "										AND cd.\"This_includes_EmailAddress\" = emailaddress) THEN\n"
						+ "						\n"
						+ "				--a customer has been specified\n"
						+ "				IF EXISTS(SELECT * FROM soberano.\"CustomerOrder\" \n"
						+ "							WHERE \"OrderHasOrderId\" = orderid\n"
						+ "								AND \"CustomerHasCustomerId\" IS NOT NULL) THEN\n"
						+ "\n"
						+ "					--check whether the provider delivers to that postal code\n"
						+ "					IF EXISTS(SELECT * FROM soberano.\"Delivery\" delivery\n"
						+ "							  			INNER JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "							  				ON dp.\"DeliveryProviderHasDeliveryProviderId\" = delivery.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "							  					AND delivery.\"OrderHasOrderId\" = orderid\n"
						+ "							  			INNER JOIN soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\" fees\n"
						+ "											ON dp.\"DeliveryProviderHasDeliveryProviderId\" = fees.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "							  					AND fees.\"NationalizedPostalCodeHasPostalCode\" = postalCode\n"
						+ "							  			INNER JOIN soberano.\"Province\" prov\n"
						+ "							  				ON prov.\"This_belongs_to_Country_with_CountryHasCountryCode\" = fees.\"CountryHasCountryCode\"\n"
						+ "							  			INNER JOIN soberano.\"Municipality\" mun\n"
						+ "							  				ON mun.\"This_belongs_to_Province_with_ProvinceHasProvinceId\" = prov.\"ProvinceHasProvinceId\"\n"
						+ "							  					AND mun.\"MunicipalityHasMunicipalityId\" = municipalityid) THEN\n"
						+ "												\n"
						+ "						--create postal address\n"
						+ "						INSERT INTO soberano.\"PostalAddress\"(\"This_includes_Town\", \n"
						+ "															 \"This_includes_PostalCode\", \n"
						+ "															 \"This_includes_AddressString\", \n"
						+ "															 \"This_includes_Latitute\", \n"
						+ "															 \"This_includes_Longitude\", \n"
						+ "															 \"This_includes_City\", \n"
						+ "															 \"This_includes_Municipality_with_MunicipalityHasMunicipalityId\")\n"
						+ "							VALUES (town,\n"
						+ "								   postalCode,\n"
						+ "								   address,\n"
						+ "								   latitude,\n"
						+ "								   longitude,\n"
						+ "								   city,\n"
						+ "								   municipalityId) \n"
						+ "							RETURNING \"PostalAddressHasPostalAddressId\" INTO postalAddressId;\n"
						+ "\n"
						+ "						--create contact data\n"
						+ "						INSERT INTO soberano.\"ContactData\"(\"This_includes_PhoneNumber\", \n"
						+ "														   \"This_includes_EmailAddress\", \n"
						+ "														   \"This_includes_PostalAddress_with_PostalAddressHasPostalAddressI\")\n"
						+ "							VALUES (mobilePhoneNumber,\n"
						+ "								   emailAddress,\n"
						+ "								   postalAddressId) \n"
						+ "							RETURNING \"ContactDataHasContactDataId\" INTO contactDataId;\n"
						+ "							\n"
						+ "						--update order's delivery address\n"
						+ "						UPDATE soberano.\"Order\" \n"
						+ "							SET \"This_is_delivered_to_ContactData_with_ContactDataHasContactData\" = contactDataId\n"
						+ "							WHERE \"OrderHasOrderId\" = orderid;\n"
						+ "												\n"
						+ "						--make the decision\n"
						+ "						PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "														entityTypeInstanceId, \n"
						+ "														decisionId,\n"
						+ "														'tt_DELIVERY_ADDRESS_CHANGED_FOR_ORDER)_tt ' || CAST(orderid AS text) || ' : ' || objectCode || ' #TO_TRANSLATE(BY)# ' || loginname);\n"
						+ "						qryResult := 0;\n"
						+ "					ELSE\n"
						+ "						--the provider does not deliver to that postal code\n"
						+ "						qryResult := -3;\n"
						+ "					END IF;\n"
						+ "				ELSE\n"
						+ "					--customer not specified\n"
						+ "					qryResult := -2;\n"
						+ "				END IF;				\n"
						+ "			ELSE\n"
						+ "				qryResult := 0;\n"
						+ "			END IF;\n"
						+ "		END IF;					\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Order_RULE_CONSTRAINT_15\"()\n"
						+ "    RETURNS boolean\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		ruleMet boolean;\n"
						+ "	BEGIN\n"
						+ "		SELECT NOT EXISTS(SELECT * FROM soberano.\"Order\" o\n"
						+ "								INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "									ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = o.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "\n"
						+ "										--order is in stage Ongoing\n"
						+ "										AND eti.\"This_is_in_Stage_with_StageHasStageId\" = 3)\n"
						+ "			INTO ruleMet;\n"
						+ "		RETURN ruleMet;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Receivable_getCount\"(\n"
						+ "	lang character,\n"
						+ "	\"delayedDays\" integer,\n"
						+ "	customer integer,\n"
						+ "	debtor integer,\n"
						+ "	dishonored boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_Receivable_getAll\"(lang, \n"
						+ "														 \"delayedDays\",\n"
						+ "														 customer,\n"
						+ "														 debtor,\n"
						+ "														 dishonored, \n"
						+ "														 loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Receivable_getAll\"(\n"
						+ "	lang character,\n"
						+ "	\"delayedDays\" integer,\n"
						+ "	custome integer,\n"
						+ "	debto integer,\n"
						+ "	dishonored boolean,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"receivableId\" integer, \"daysDelayed\" integer, customer text, debtor text, \"order\" integer, \"amountDue\" numeric, history text, \"recordingDate\" timestamp with time zone, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT recId, delay, cust, debt, \"This_is_of_Order_with_OrderHasOrderId\", toCollectAmt, hist, recDate, etiId \n"
						+ "						FROM (SELECT MAX(rect.\"ReceivableHasReceivableId\") recId,\n"
						+ "											CAST(DATE_PART('day', NOW() - orderCollectingVotet.\"This_is_on_Timestamp\") AS integer) delay,\n"
						+ "											(customert.\"This_has_FirstName\" || ' ' || customert.\"This_has_LastName\" || ' : ' || uc.\"This_includes_EmailAddress\") cust,\n"
						+ "											(debtort.\"This_has_FirstName\" || ' ' || debtort.\"This_has_LastName\" || ' : ' || ud.\"This_includes_EmailAddress\") debt,\n"
						+ "											\"This_is_of_Order_with_OrderHasOrderId\",\n"
						+ "											amounts.\"toCollectAmount\" toCollectAmt,\n"
						+ "											'TODO: \"fn_Order_getPaymentHistory' hist,\n"
						+ "											eti.\"This_is_created_at_Timestamp\" recDate,\n"
						+ "											rect.\"This_is_identified_by_EntityTypeInstance_id\" etiId,\n"
						+ "							  				customert.\"CustomerHasCustomerId\" custId,\n"
						+ "							  				debtort.\"CustomerHasCustomerId\" debtorId,\n"
						+ "							  				\"StageHasStageId\" stageId\n"
						+ "\n"
						+ "											--receivables the user has rights to make some decision on\n"
						+ "										FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(25, 1, loginname) instance\n"
						+ "											INNER JOIN soberano.\"Receivable\" rect\n"
						+ "												ON instance.\"InstanceId\" = rect.\"This_is_identified_by_EntityTypeInstance_id\"							  \n"
						+ "							  				INNER JOIN metamodel.\"EntityTypeInstance\" etir\n"
						+ "												ON etir.\"EntityTypeInstanceHasEntityTypeInstanceId\" = instance.\"InstanceId\"\n"
						+ "											INNER JOIN metamodel.\"Stage\" st\n"
						+ "							  					ON etir.\"This_is_in_Stage_with_StageHasStageId\" = st.\"StageHasStageId\"\n"
						+ "											INNER JOIN soberano.\"Order\" ordert\n"
						+ "												ON rect.\"This_is_of_Order_with_OrderHasOrderId\" = ordert.\"OrderHasOrderId\"							\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON eti.\"EntityTypeInstanceHasEntityTypeInstanceId\" = ordert.\"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "											INNER JOIN metamodel.\"Vote\" orderCollectingVotet\n"
						+ "												ON ordert.\"This_is_identified_by_EntityTypeInstance_id\" = orderCollectingVotet.\"This_is_on_EntityTypeInstance_with_EntityTypeInstanceHasEntityT\"\n"
						+ "\n"
						+ "													--delay is counted from corresponding order collecting (closing) date\n"
						+ "													AND orderCollectingVotet.\"This_favours_Decision_with_DecisionHasDecisionId\" = 3005\n"
						+ "											INNER JOIN soberano.\"Customer\" debtort\n"
						+ "												ON debtort.\"CustomerHasCustomerId\" = rect.\"Customer_with_CustomerHasCustomerId_is_the_debtor_of_This\"\n"
						+ "											INNER JOIN soberano.\"ContactData\" ud\n"
						+ "												ON debtort.\"This_has_ContactData_with_ContactDataHasContactDataId\" = ud.\"ContactDataHasContactDataId\"\n"
						+ "											INNER JOIN soberano.soberano.\"fn_Order_getAmounts\"(rect.\"This_is_of_Order_with_OrderHasOrderId\") amounts\n"
						+ "												ON true\n"
						+ "											LEFT JOIN soberano.\"CustomerOrder\" customerOrdert\n"
						+ "												ON customerOrdert.\"OrderHasOrderId\" = ordert.\"OrderHasOrderId\"\n"
						+ "											LEFT JOIN (SELECT * FROM soberano.\"Customer\"\n"
						+ "													  			WHERE custome IS NULL OR (custome IS NOT NULL AND custome = \"CustomerHasCustomerId\")) customert\n"
						+ "												ON customert.\"CustomerHasCustomerId\" = customerOrdert.\"CustomerHasCustomerId\"\n"
						+ "											LEFT JOIN soberano.\"ContactData\" uc\n"
						+ "												ON customert.\"This_has_ContactData_with_ContactDataHasContactDataId\" = uc.\"ContactDataHasContactDataId\"\n"
						+ "										WHERE amounts.\"toCollectAmount\" > 0\n"
						+ "										GROUP BY ordercollectingvotet.\"This_is_on_Timestamp\",\n"
						+ "												customert.\"This_has_FirstName\",\n"
						+ "												customert.\"This_has_LastName\",\n"
						+ "												debtort.\"This_has_FirstName\",\n"
						+ "												debtort.\"This_has_LastName\",\n"
						+ "												uc.\"This_includes_EmailAddress\",\n"
						+ "												ud.\"This_includes_EmailAddress\",\n"
						+ "												rect.\"This_is_of_Order_with_OrderHasOrderId\",\n"
						+ "												amounts.\"toCollectAmount\",\n"
						+ "												eti.\"This_is_created_at_Timestamp\",\n"
						+ "												rect.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "							 					customert.\"CustomerHasCustomerId\",\n"
						+ "							 					debtort.\"CustomerHasCustomerId\",\n"
						+ "							 					\"StageHasStageId\") sq\n"
						+ "									WHERE (\"delayedDays\" IS NULL OR (\"delayedDays\" IS NOT NULL AND delay >= \"delayedDays\"))\n"
						+ "										AND (custome IS NULL OR (custome IS NOT NULL AND custome = custId))\n"
						+ "										AND (debto IS NULL OR (debto IS NOT NULL AND debto = debtorId))\n"
						+ "										\n"
						+ "										--dishonored receivables are only returned on request (dishonored checkbox checked)\n"
						+ "										AND (dishonored IS NULL OR dishonored OR (dishonored IS NOT NULL AND NOT dishonored AND stageId <> 9));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Receivable_dishonor\"(\n"
						+ "	receivableid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		orderId integer;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_is_of_Order_with_OrderHasOrderId\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"Receivable\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Dishonor'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ReceivableHasReceivableId\" = receivableid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				orderId,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "				\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_RECEIVABLE_tt ' || CAST(receivableid AS text) || ' : tt_ORDER_tt ' || CAST(orderId AS text) || ' tt_DISHONORED_BY_tt ' || loginname);\n"
						+ "				\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_hideInCatalog\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Product\" am\n"
						+ "				 								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "													ON iitem.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"Product_is_enabled\" = false\n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_HIDE_IN_CATALOG_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_showInCatalog\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Product\" am\n"
						+ "				 								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "													ON iitem.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"Product_is_enabled\" = true\n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_SHOW_IN_CATALOG_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_setPrice\"(\n"
						+ "	itemid integer,\n"
						+ "	itemprice numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS numeric\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult numeric;\n"
						+ "		\n"
						+ "		finalreferenceprice numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Product\" am\n"
						+ "				 								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "													ON iitem.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "					\n"
						+ "			SELECT itemprice / \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "				FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "				INTO finalreferenceprice;\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"This_has_Price\" = itemprice, \"This_has_Price_in_reference_currency\" = finalreferenceprice\n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_PRICE_CHANGED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := finalreferenceprice;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Product_setReferencePrice\"(\n"
						+ "	itemid integer,\n"
						+ "	itemrefprice numeric,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS numeric\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult numeric;\n"
						+ "		\n"
						+ "		finalprice numeric;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT objectdata.\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\"\n"
						+ "			FROM (SELECT \"ProductHasProductId\",\n"
						+ "				  		\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "				  		\"This_has_Name\" FROM soberano.\"Product\" am\n"
						+ "				 								INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "													ON iitem.\"InventoryItemHasInventoryItemCode\" = am.\"InventoryItemHasInventoryItemCode\") objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Apply'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE objectdata.\"ProductHasProductId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;	\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "					\n"
						+ "			SELECT itemrefprice * \"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "				FROM soberano.\"Currency\" WHERE \"Currency_is_price_reference_currency\"\n"
						+ "				INTO finalprice;\n"
						+ "		\n"
						+ "			--update the object\n"
						+ "			UPDATE soberano.\"Product\"\n"
						+ "				SET \"This_has_Price\" = finalprice, \"This_has_Price_in_reference_currency\" = itemrefprice\n"
						+ "				WHERE \"ProductHasProductId\" = itemid;\n"
						+ "\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_Product_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_REF_PRICE_CHANGED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := finalprice;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Catalog_getAll\"(\n"
						+ "	)\n"
						+ "    RETURNS TABLE(\"itemId\" integer, \"itemName\" character varying, \"categoryName\" character varying, \"entityTypeInstanceId\" integer, \"itemEnabled\" boolean, \"itemPrice\" numeric, \"itemReferencePrice\" numeric, \"sysCurrency\" character varying, \"refCurrency\" character varying, \"exchRate\" numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT pro.\"ProductHasProductId\", \n"
						+ "							iitem.\"This_has_Name\",\n"
						+ "							cat.\"This_has_Name\",\n"
						+ "							pro.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "							\"Product_is_enabled\",\n"
						+ "							\"This_has_Price\",\n"
						+ "							\"This_has_Price_in_reference_currency\",\n"
						+ "							syscurr.\"This_has_Currency_code\",\n"
						+ "							refcurr.\"This_has_Currency_code\",\n"
						+ "							refcurr.\"This_is_converted_to_system_currency_multiplying_by_ExchangeRat\"\n"
						+ "						FROM soberano.\"Product\" pro\n"
						+ "							INNER JOIN soberano.\"InventoryItem\" iitem\n"
						+ "								ON iitem.\"InventoryItemHasInventoryItemCode\" = pro.\"InventoryItemHasInventoryItemCode\"\n"
						+ "							INNER JOIN soberano.\"ProductIsOfProductCategory\" procat\n"
						+ "								ON pro.\"ProductHasProductId\" = procat.\"ProductHasProductId\"\n"
						+ "							INNER JOIN soberano.\"ProductCategory\" cat\n"
						+ "								ON cat.\"ProductCategoryHasProductCategoryId\" = procat.\"ProductCategoryHasProductCategoryId\"\n"
						+ "							INNER JOIN soberano.\"Currency\" syscurr\n"
						+ "								ON syscurr.\"Currency_is_system_currency\"\n"
						+ "							INNER JOIN soberano.\"Currency\" refcurr\n"
						+ "								ON refcurr.\"Currency_is_price_reference_currency\"\n"
						+ "							INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "								ON pro.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "									\n"
						+ "									--only enabled products\n"
						+ "									AND \"This_is_in_Stage_with_StageHasStageId\" = 2\n"
						+ "						ORDER BY cat.\"This_has_Name\" ASC, iitem.\"This_has_Name\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_closureAllowed\"(loginname character varying)\n"
						+ "    RETURNS boolean\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		--the user has rights to record a closure,\n"
						+ "		IF EXISTS(SELECT * FROM \"metamodel\".\"StageFilter\" destinationFilter,\n"
						+ "								\"metamodel\".\"Decision\" decision,\n"
						+ "								\"metamodel\".\"StageFilter\" originFilter,\n"
						+ "								\"metamodel\".\"LifeCycle\" lifeCycle,\n"
						+ "								\"metamodel\".\"LifeCycleIsDeployedAcrossAuthority\" deployment,\n"
						+ "								\"metamodel\".\"ResponsibilityFilter\" responsibilityFilter,\n"
						+ "								\"metamodel\".\"User\" users\n"
						+ "							WHERE destinationFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_to_StageFilter_with_StageFilterHasStageFilt\"\n"
						+ "								AND originFilter.\"StageFilterHasStageFilterId\" = decision.\"This_causes_advance_from_StageFilter_with_StageFilterHasStageFi\"\n"
						+ "								AND decision.\"This_belongs_to_LifeCycle_with_LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
						+ "								AND deployment.\"LifeCycleHasLifeCycleId\" = lifeCycle.\"LifeCycleHasLifeCycleId\"\n"
						+ "								AND responsibilityFilter.\"This_filters_by_Decision_with_DecisionHasDecisionId\" = decision.\"DecisionHasDecisionId\"\n"
						+ "								AND users.\"This_has_LoginName\" = loginName\n"
						+ "								AND users.\"User_is_enabled\" = true\n"
						+ "								AND deployment.\"AuthorityHasAuthorityId\" = 1\n"
						+ "								AND originFilter.\"This_filters_by_FilterExpression\" = 'soberano.stage.starting'\n"
						+ "								AND \"metamodel\".\"fn_User_matches_responsibilityFilter\"(1, loginName, responsibilityFilter.\"This_filters_by_FilterExpression\")\n"
						+ "\n"
						+ "							--shif closure specifically\n"
						+ "							AND lifeCycle.\"This_is_for_EntityType_with_MeaningHasMeaningId\" = '_26546A60-384E-49D7-912B-D5D174CEEE14') THEN\n"
						+ "			RETURN true;\n"
						+ "		ELSE\n"
						+ "			RETURN false;\n"
						+ "		END IF;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_create\"(\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	itemId integer;\n"
						+ "	previousClosureTime timestamp with time zone;\n"
						+ "	previousClosureDay date;\n"
						+ "	closureHour smallint;\n"
						+ "	closureMinutes smallint;\n"
						+ "	entityTypeInstanceId integer;\n"
						+ "	currentTime timestamp with time zone;\n"
						+ "	currentDay date;\n"
						+ "	dayToClose date;\n"
						+ "	nextDay date;\n"
						+ "	closureTime timestamp with time zone;\n"
						+ "	dayMayBeClosed boolean;\n"
						+ "BEGIN\n"
						+ "	itemId := -1;\n"
						+ "	currentTime := NOW();\n"
						+ "	currentDay := make_date(CAST(date_part('year', currentTime) AS integer),\n"
						+ "						CAST(date_part('month', currentTime) AS integer),\n"
						+ "						CAST(date_part('day', currentTime) AS integer));\n"
						+ "	dayMayBeClosed := false;\n"
						+ "\n"
						+ "	--the user has rights to record a closure,\n"
						+ "	IF (soberano.\"fn_ShiftClosure_closureAllowed\"(loginname)) THEN\n"
						+ "	\n"
						+ "		--date and time of the the last not canceled closure\n"
						+ "		SELECT \"This_has_ClosureTime\", \n"
						+ "			\"This_is_of_Shift\" \n"
						+ "			FROM soberano.\"ShiftClosure\" cierre \n"
						+ "				INNER JOIN \"metamodel\".\"EntityTypeInstance\" instancia\n"
						+ "					ON cierre.\"This_is_identified_by_EntityTypeInstance_id\" = instancia.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "\n"
						+ "			--not canceled condition\n"
						+ "			WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "			INTO previousClosureTime, previousClosureDay\n"
						+ "			ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 1;\n"
						+ "			\n"
						+ "		SELECT \"This_has_ShiftClosureHours\", \"This_has_ShiftClosureMinutes\"	FROM soberano.\"Configuration\"\n"
						+ "			INTO closureHour, closureMinutes;\n"
						+ "	\n"
						+ "		--no recorded not canceled closure exists\n"
						+ "		IF previousClosureDay IS NULL THEN\n"
						+ "\n"
						+ "			previousClosureDay := currentDay - make_interval(days := 2);\n"
						+ "\n"
						+ "			previousClosureTime := make_timestamp(CAST(date_part('year', currentTime) AS integer), \n"
						+ "							CAST(date_part('month', currentTime) AS integer), \n"
						+ "							CAST(date_part('day', currentTime) AS integer), \n"
						+ "							closureHour, \n"
						+ "							closureMinutes, \n"
						+ "							0)  - make_interval(days := 1);\n"
						+ "							\n"
						+ "			--create entity type instance	\n"
						+ "			SELECT metamodel.\"fn_EntityTypeInstance_create\"('ShiftClosure', loginname)\n"
						+ "				INTO entityTypeInstanceId;\n"
						+ "				\n"
						+ "			INSERT INTO soberano.\"ShiftClosure\"(\"This_is_of_Shift\", \n"
						+ "												\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "												\"Report_is_of_This\", \n"
						+ "												\"This_has_ClosureTime\")\n"
						+ "				VALUES (previousClosureDay,\n"
						+ "						entityTypeInstanceId,\n"
						+ "						'',\n"
						+ "					   previousClosureTime) RETURNING \"ShiftClosureHasShiftClosureId\" INTO itemId;\n"
						+ "		END IF;\n"
						+ "	\n"
						+ "		--current day already closed\n"
						+ "		IF currentDay = previousClosureDay THEN\n"
						+ "\n"
						+ "			--no closure possible. it cannot be closed tomorrow day before 00:00\n"
						+ "			dayMayBeClosed := false;\n"
						+ "\n"
						+ "		ELSE\n"
						+ "			--it can be closed the day of today, or a previous day\n"
						+ "			dayMayBeClosed := true;\n"
						+ "\n"
						+ "			--the day of yesterday has been already closed\n"
						+ "			IF currentDay - make_interval(days := 1) = previousClosureDay THEN\n"
						+ "\n"
						+ "				--only to close the day of today is possible. \n"
						+ "				dayToClose := currentDay;\n"
						+ "				closureTime := currentTime;\n"
						+ "\n"
						+ "			ELSE\n"
						+ "				--it must be closed the day of yesterday\n"
						+ "				dayToClose := currentDay - make_interval(days := 1);\n"
						+ "\n"
						+ "				--closure time already passed\n"
						+ "				IF make_timestamp(CAST(date_part('year', currentTime) AS integer), \n"
						+ "							CAST(date_part('month', currentTime) AS integer), \n"
						+ "							CAST(date_part('day', currentTime) AS integer), \n"
						+ "							closureHour, \n"
						+ "							closureMinutes, \n"
						+ "							0) <= currentTime THEN\n"
						+ "\n"
						+ "					closureTime := make_timestamp(CAST(date_part('year', currentTime) AS integer), \n"
						+ "							CAST(date_part('month', currentTime) AS integer), \n"
						+ "							CAST(date_part('day', currentTime) AS integer), \n"
						+ "							closureHour, \n"
						+ "							closureMinutes, \n"
						+ "							0);\n"
						+ "				ELSE				\n"
						+ "					closureTime := currentTime;\n"
						+ "				END IF;			\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "\n"
						+ "		IF dayMayBeClosed THEN\n"
						+ "\n"
						+ "			nextDay := previousClosureDay + make_interval(days := 1);\n"
						+ "\n"
						+ "			LOOP\n"
						+ "				EXIT WHEN dayToClose = nextDay;\n"
						+ "				previousClosureTime := make_timestamp(CAST(date_part('year', nextDay) AS integer), \n"
						+ "								CAST(date_part('month', nextDay) AS integer), \n"
						+ "								CAST(date_part('day', nextDay) AS integer), \n"
						+ "								closureHour, \n"
						+ "								closureMinutes, \n"
						+ "								0) + make_interval(days := 1);\n"
						+ "								\n"
						+ "				--se registran los cierres intermedios\n"
						+ "				SELECT metamodel.\"fn_EntityTypeInstance_create\"('ShiftClosure', loginname)\n"
						+ "					INTO entityTypeInstanceId;\n"
						+ "				\n"
						+ "				INSERT INTO soberano.\"ShiftClosure\"(\"This_is_of_Shift\", \n"
						+ "													\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "													\"Report_is_of_This\", \n"
						+ "													\"This_has_ClosureTime\")\n"
						+ "					VALUES (nextDay,\n"
						+ "							entityTypeInstanceId,\n"
						+ "							'',\n"
						+ "						   previousClosureTime) RETURNING \"ShiftClosureHasShiftClosureId\" INTO itemId;\n"
						+ "				--------------------------------------\n"
						+ "								\n"
						+ "				nextDay := nextDay + make_interval(days := 1);\n"
						+ "			END LOOP;\n"
						+ "\n"
						+ "			--se registra el cierre\n"
						+ "			SELECT metamodel.\"fn_EntityTypeInstance_create\"('ShiftClosure', loginname)\n"
						+ "				INTO entityTypeInstanceId;\n"
						+ "				\n"
						+ "			INSERT INTO soberano.\"ShiftClosure\"(\"This_is_of_Shift\", \n"
						+ "												\"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "												\"Report_is_of_This\", \n"
						+ "												\"This_has_ClosureTime\")\n"
						+ "				VALUES (dayToClose,\n"
						+ "						entityTypeInstanceId,\n"
						+ "						'',\n"
						+ "					   closureTime) RETURNING \"ShiftClosureHasShiftClosureId\" INTO itemId;\n"
						+ "					   \n"
						+ "			DELETE FROM soberano.\"StockRecord\";\n"
						+ "					   \n"
						+ "			INSERT INTO soberano.\"StockRecord\"(\"Quantity\", \n"
						+ "											   \"This_has_Value\", \n"
						+ "											   \"WarehouseHasWarehouseId\", \n"
						+ "											   \"InventoryItemHasInventoryItemCode\", \n"
						+ "											   \"This_is_made_on_ShiftClosure_with_ShiftClosureHasShiftClosureId\")\n"
						+ "				SELECT \"Quantity\", \n"
						+ "						\"This_has_Value\", \n"
						+ "						\"WarehouseHasWarehouseId\", \n"
						+ "						\"InventoryItemHasInventoryItemCode\",\n"
						+ "						itemId\n"
						+ "					FROM soberano.\"Stock\";\n"
						+ "		ELSE\n"
						+ "			--todavía no es posible registrar un cierre contable o el día ya cerró\n"
						+ "			itemId := -2;\n"
						+ "		END IF;\n"
						+ "	END IF;\n"
						+ "	RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_cancel\"(\n"
						+ "	shiftid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		closureTime timestamp with time zone;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				CAST(objectdata.\"This_is_of_Shift\" AS character varying),\n"
						+ "				\"This_has_ClosureTime\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ShiftClosure\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Cancel'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ShiftClosureHasShiftClosureId\" = shiftid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				closureTime,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--si no hay cierres contables registrados no anulados posteriores a este\n"
						+ "			IF NOT EXISTS(SELECT * FROM soberano.\"ShiftClosure\" cierre\n"
						+ "					INNER JOIN \"metamodel\".\"EntityTypeInstance\" instance\n"
						+ "						ON cierre.\"This_is_identified_by_EntityTypeInstance_id\" = instance.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "						--cierres no anulados\n"
						+ "					WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "						AND \"This_has_ClosureTime\" > closureTime) THEN\n"
						+ "\n"
						+ "				--make the decision\n"
						+ "				PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_ShiftClosure_tt ' || CAST(shiftid AS text) || ' : ' || objectCode || ' tt_CANCELED_BY_tt ' || loginname);\n"
						+ "				qryResult := 0;\n"
						+ "			ELSE\n"
						+ "				qryResult := -1;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ShiftClosure_recordClosuresOnDeployment\"(\n"
								+ "	lang character,\n"
								+ "	loginname character varying)\n"
								+ "    RETURNS void\n"
								+ "    LANGUAGE 'plpgsql'\n"
								+ "    COST 100\n"
								+ "    VOLATILE PARALLEL UNSAFE\n"
								+ "AS $BODY$\n"
								+ "DECLARE\n"
								+ "	closureId integer;\n"
								+ "BEGIN\n"
								+ "	closureId := 0;\n"
								+ "	WHILE closureId >= 0 LOOP\n"
								+ "		SELECT FROM soberano.\"fn_ShiftClosure_create\"(lang, loginname) INTO closureId;\n"
								+ "	END LOOP;\n"
								+ "	\n"
								+ "	--close the day of yesterday\n"
								+ "	SELECT FROM soberano.\"fn_ShiftClosure_create\"(lang, loginname) INTO closureId;\n"
								+ "	\n"
								+ "	--cancel current day closure\n"
								+ "	PERFORM soberano.\"fn_ShiftClosure_cancel\"(\"ShiftClosureHasShiftClosureId\", loginname)\n"
								+ "		FROM soberano.\"ShiftClosure\" ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 1;\n"
								+ "END;\n"
								+ "$BODY$;",
								
								
						//close last eleven days
						"SELECT soberano.\"fn_ShiftClosure_recordClosuresOnDeployment\"('en', 'soberano.user.top');",
						
						
						//cancel last nine closures.
						"SELECT soberano.\"fn_ShiftClosure_cancel\"(\"ShiftClosureHasShiftClosureId\", 'soberano.user.top')\n"
						+ "	FROM soberano.\"ShiftClosure\" \n"
						+ "	ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 9;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getSPICount\"(\n"
						+ "	warehouseid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	count integer;\n"
						+ "BEGIN\n"
						+ "	SELECT COUNT(*) FROM soberano.\"fn_InventoryOperation_getSPI\"(warehouseId, lang, loginname) INTO count;\n"
						+ "	RETURN count;\n"
						+ "END;\n"
						+ "$BODY$;\n"
						+ "",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_InventoryOperation_getSPI\"(\n"
						+ "	warehouseid integer,\n"
						+ "	lang character,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"inventoryItemName\" text, unit character varying, opening numeric, \n"
						+ "				  input_ numeric, available numeric, output_ numeric, ending numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1000\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		previousClosureTime timestamp with time zone;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"This_has_ClosureTime\"\n"
						+ "			FROM soberano.\"ShiftClosure\" cierre \n"
						+ "				INNER JOIN \"metamodel\".\"EntityTypeInstance\" instancia\n"
						+ "					ON cierre.\"This_is_identified_by_EntityTypeInstance_id\" = instancia.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "\n"
						+ "			--not canceled condition\n"
						+ "			WHERE \"This_is_in_Stage_with_StageHasStageId\" != 5\n"
						+ "			INTO previousClosureTime\n"
						+ "			ORDER BY \"ShiftClosureHasShiftClosureId\" DESC LIMIT 1;			\n"
						+ "		\n"
						+ "		RETURN QUERY SELECT itemNamef,\n"
						+ "							unitf,\n"
						+ "							openingf,\n"
						+ "							inputsf,\n"
						+ "							availablef,\n"
						+ "							outputsf,\n"
						+ "							endingf\n"
						+ "								FROM (SELECT DISTINCT inventoryItem.\"This_has_Name\" || ' : ' || stock.\"InventoryItemHasInventoryItemCode\" itemNamef,\n"
						+ "												unit.\"Acronym\" unitf,\n"
						+ "												COALESCE(SUM(stockrecord.\"Quantity\"), 0) openingf,\n"
						+ "												COALESCE(SUM(inputs.\"This_is_called_with_Quantity\"), 0) inputsf,\n"
						+ "												COALESCE(SUM(stock.\"Quantity\"), 0) availablef,\n"
						+ "												COALESCE(SUM(outputs.\"This_is_called_with_Quantity\"), 0) outputsf,\n"
						+ "												COALESCE(SUM(stock.\"Quantity\"), 0) endingf\n"
						+ "										FROM soberano.\"Stock\" stock\n"
						+ "											INNER JOIN soberano.\"InventoryItem\" inventoryItem\n"
						+ "												ON inventoryItem.\"InventoryItemHasInventoryItemCode\" = stock.\"InventoryItemHasInventoryItemCode\"\n"
						+ "											INNER JOIN soberano.\"UnitHasAcronymInLanguage\" unit\n"
						+ "												ON unit.\"UnitHasUnitId\" = inventoryItem.\"This_is_measured_in_Unit_with_UnitHasUnitId\"\n"
						+ "													AND unit.\"Language\" = lang\n"
						+ "											INNER JOIN soberano.\"StockRecord\" stockrecord\n"
						+ "												ON stock.\"InventoryItemHasInventoryItemCode\" = stockrecord.\"InventoryItemHasInventoryItemCode\"\n"
						+ "													AND (stock.\"WarehouseHasWarehouseId\" = stockrecord.\"WarehouseHasWarehouseId\"\n"
						+ "														OR warehouseId = 0)\n"
						+ "											LEFT JOIN soberano.\"StockChange\" inputs\n"
						+ "												ON stock.\"InventoryItemHasInventoryItemCode\" = inputs.\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\"\n"
						+ "													AND (stock.\"WarehouseHasWarehouseId\" = inputs.\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "														OR warehouseId = 0)\n"
						+ "													AND inputs.\"This_is_called_with_Quantity\" > 0\n"
						+ "													AND inputs.\"This_is_at_DateTime\" > previousClosureTime\n"
						+ "											LEFT JOIN soberano.\"StockChange\" outputs\n"
						+ "												ON stock.\"InventoryItemHasInventoryItemCode\" = outputs.\"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\"\n"
						+ "													AND (stock.\"WarehouseHasWarehouseId\" = outputs.\"This_is_called_with_Warehouse_with_WarehouseHasWarehouseId\"\n"
						+ "														OR warehouseId = 0)\n"
						+ "													AND outputs.\"This_is_called_with_Quantity\" < 0\n"
						+ "													AND outputs.\"This_is_at_DateTime\" > previousClosureTime\n"
						+ "										WHERE --user can make decisions on inventory operations \n"
						+ "											(EXISTS(SELECT * FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(21, 1, loginname))\n"
						+ "												--or user can execute inventory operations\n"
						+ "												OR 1 IN (SELECT * FROM metamodel.\"fn_User_canCreateInstance\"(1, '_E439FAF1-C89D-4C86-A1F7-0A970074FA02', loginname)))\n"
						+ "											AND (stock.\"WarehouseHasWarehouseId\" = warehouseId OR warehouseId = 0)						  \n"
						+ "									GROUP BY stock.\"InventoryItemHasInventoryItemCode\",\n"
						+ "											inventoryItem.\"This_has_Name\",\n"
						+ "											unit.\"Acronym\"\n"
						+ "								   	ORDER BY itemNamef ASC) sq;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"PrinterProfileHasPrinterProfileId\", \n"
						+ "									\"This_has_Name\" || ' : ' || \"This_has_PrintServer\" || ' : ' || \"This_has_PrinterName\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(28, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"PrinterProfile\" printerProfile\n"
						+ "								ON instance.\"InstanceId\" = printerProfile.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_create\"(\n"
						+ "	printerprofilename character varying,\n"
						+ "	fontsize integer,\n"
						+ "	pagewidth integer,\n"
						+ "	pageheight integer,\n"
						+ "	margin integer,\n"
						+ "	pageheader character varying,\n"
						+ "	pagefooter character varying,\n"
						+ "	compactformat boolean,\n"
						+ "	isdefaultprinter boolean,\n"
						+ "	ismanagementprinter boolean,\n"
						+ "	printserver character varying,\n"
						+ "	printername character varying,\n"
						+ "	objectusingthisids integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		oldDefaultPrinterProfile integer;\n"
						+ "		entityTypeMeaningId character varying;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('PrinterProfile', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "\n"
						+ "			SELECT \"PrinterProfileHasPrinterProfileId\" FROM soberano.\"PrinterProfile\" \n"
						+ "				WHERE \"PrinterProfile_is_default_printer_profile\" INTO oldDefaultPrinterProfile;\n"
						+ "\n"
						+ "			--at most one 'PrinterProfile' can be the default printer profile.\n"
						+ "			--at most one 'PrinterProfile' can be the management printer profile. \n"
						+ "			PERFORM soberano.\"fn_PrinterProfile_RULE_CONSTRAINTS_16_AND_17\"(isDefaultPrinter, \n"
						+ "																			isManagementPrinter);\n"
						+ "																			\n"
						+ "			INSERT INTO soberano.\"PrinterProfile\"(\"This_has_Name\",\n"
						+ "												  \"This_uses_FontSize\", \n"
						+ "												  \"This_uses_PageWidth\", \n"
						+ "												  \"This_uses_PageHeight\", \n"
						+ "												  \"This_uses_Margin\", \n"
						+ "												  \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "												  \"PrinterProfile_compacts_text\", \n"
						+ "												  \"PrinterProfile_is_used_by_management\", \n"
						+ "												  \"PrinterProfile_is_default_printer_profile\", \n"
						+ "												  \"This_has_PrintServer\",\n"
						+ "												  \"This_has_PrinterName\", \n"
						+ "												  \"This_has_PageHeader\", \n"
						+ "												  \"This_has_PageFooter\")\n"
						+ "				VALUES (printerProfileName,\n"
						+ "					   fontSize,\n"
						+ "					   pageWidth,\n"
						+ "					   pageHeight,\n"
						+ "					   margin,\n"
						+ "					   entityTypeInstanceId,\n"
						+ "					   compactFormat,\n"
						+ "					   isManagementPrinter,\n"
						+ "					   isDefaultPrinter,\n"
						+ "					   printserver,\n"
						+ "					   printername,\n"
						+ "					   pageHeader,\n"
						+ "					   pageFooter)\n"
						+ "				RETURNING \"PrinterProfileHasPrinterProfileId\" \n"
						+ "				INTO itemId;\n"
						+ "							\n"
						+ "			IF array_lower(objectUsingThisIds, 1) IS NOT NULL AND array_upper(objectUsingThisIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(objectUsingThisIds, 1) .. array_upper(objectUsingThisIds, 1) LOOP\n"
						+ "				\n"
						+ "					SELECT \"This_is_instance_of_EntityType_with_MeaningHasMeaningId\"\n"
						+ "						FROM metamodel.\"EntityTypeInstance\"\n"
						+ "						WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = objectUsingThisIds[i]\n"
						+ "						INTO entityTypeMeaningId;\n"
						+ "					\n"
						+ "					--cash register\n"
						+ "					IF entityTypeMeaningId = '_7E0F5DAA-21DB-433E-BFBF-F4437F3E0FE9' THEN\n"
						+ "						UPDATE soberano.\"CashRegister\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--cost center\n"
						+ "					ELSIF entityTypeMeaningId = '_BF752D2F-A23F-4764-BFE3-8B3ED196AB88' THEN\n"
						+ "						UPDATE soberano.\"CostCenter\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--counter\n"
						+ "					ELSIF entityTypeMeaningId = '_0126EFEB-6646-4C9C-B0C2-28EB3B25E3A7' THEN\n"
						+ "						UPDATE soberano.\"Counter\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--production line\n"
						+ "					ELSIF entityTypeMeaningId = '_D6394DC1-F701-4B68-96A3-8167D217F6E8' THEN\n"
						+ "						UPDATE soberano.\"ProductionLine\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--warehouse\n"
						+ "					ELSIF entityTypeMeaningId = '_F6E70C11-9ABC-469E-8468-930AAC301E70' THEN					\n"
						+ "						UPDATE soberano.\"Warehouse\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "					END IF;\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	printerprofilename character varying,\n"
						+ "	fontsize integer,\n"
						+ "	pagewidth integer,\n"
						+ "	pageheight integer,\n"
						+ "	margin integer,\n"
						+ "	pageheader character varying,\n"
						+ "	pagefooter character varying,\n"
						+ "	compactformat boolean,\n"
						+ "	isdefaultprinter boolean,\n"
						+ "	ismanagementprinter boolean,\n"
						+ "	printserver character varying,\n"
						+ "	printername character varying,\n"
						+ "	objectusingthisids integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		oldDefaultPrinterProfile integer;\n"
						+ "		rules16and17Met boolean;\n"
						+ "		entityTypeMeaningId character varying;\n"
						+ "		\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "					objectdata.\"This_has_Name\",\n"
						+ "					decision.\"DecisionHasDecisionId\" \n"
						+ "				FROM soberano.\"PrinterProfile\" objectdata\n"
						+ "					INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "										\"This_has_Name\" \n"
						+ "									FROM metamodel.\"Decision\") decision\n"
						+ "						ON decision.\"DecisionHasDecisionId\" = \n"
						+ "							(SELECT \"DecisionId\" \n"
						+ "								FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "											objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											loginname)\n"
						+ "								WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "									/************/\n"
						+ "										'Apply'\n"
						+ "									/************/						   \n"
						+ "\n"
						+ "							   )\n"
						+ "				WHERE \"PrinterProfileHasPrinterProfileId\" = itemid\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			SELECT \"PrinterProfileHasPrinterProfileId\" FROM soberano.\"PrinterProfile\" \n"
						+ "				WHERE \"PrinterProfile_is_default_printer_profile\" INTO oldDefaultPrinterProfile;\n"
						+ "				\n"
						+ "			\n"
						+ "			--at most one 'PrinterProfile' can be the default printer profile.\n"
						+ "			--at most one 'PrinterProfile' can be the management printer profile. \n"
						+ "			PERFORM soberano.\"fn_PrinterProfile_RULE_CONSTRAINTS_16_AND_17\"(isDefaultPrinter, \n"
						+ "																			isManagementPrinter);\n"
						+ "																			\n"
						+ "			UPDATE soberano.\"PrinterProfile\" SET \"This_has_Name\" = printerProfileName,\n"
						+ "												  \"This_uses_FontSize\" = fontSize,\n"
						+ "												  \"This_uses_PageWidth\" = pageWidth,\n"
						+ "												  \"This_uses_PageHeight\" = pageHeight,\n"
						+ "												  \"This_uses_Margin\" = margin,\n"
						+ "												  \"PrinterProfile_compacts_text\" = compactFormat,\n"
						+ "												  \"PrinterProfile_is_used_by_management\" = isManagementPrinter,\n"
						+ "												  \"PrinterProfile_is_default_printer_profile\" = isDefaultPrinter,\n"
						+ "												  \"This_has_PrintServer\" = printserver,\n"
						+ "												  \"This_has_PrinterName\" = printername,\n"
						+ "												  \"This_has_PageHeader\" = pageHeader,\n"
						+ "												  \"This_has_PageFooter\" = pageFooter\n"
						+ "				WHERE \"PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "				\n"
						+ "			UPDATE soberano.\"CashRegister\"\n"
						+ "				SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = NULL\n"
						+ "				WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "			UPDATE soberano.\"CostCenter\"\n"
						+ "				SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = NULL\n"
						+ "				WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "			UPDATE soberano.\"Counter\"\n"
						+ "				SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = NULL\n"
						+ "				WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "			UPDATE soberano.\"ProductionLine\"\n"
						+ "				SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = NULL\n"
						+ "				WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "			UPDATE soberano.\"Warehouse\"\n"
						+ "				SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = NULL\n"
						+ "				WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId;\n"
						+ "			 \n"
						+ "			IF array_lower(objectUsingThisIds, 1) IS NOT NULL AND array_upper(objectUsingThisIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(objectUsingThisIds, 1) .. array_upper(objectUsingThisIds, 1) LOOP\n"
						+ "				\n"
						+ "					SELECT \"This_is_instance_of_EntityType_with_MeaningHasMeaningId\"\n"
						+ "						FROM metamodel.\"EntityTypeInstance\"\n"
						+ "						WHERE \"EntityTypeInstanceHasEntityTypeInstanceId\" = objectUsingThisIds[i]\n"
						+ "						INTO entityTypeMeaningId;\n"
						+ "					\n"
						+ "					--cash register\n"
						+ "					IF entityTypeMeaningId = '_7E0F5DAA-21DB-433E-BFBF-F4437F3E0FE9' THEN\n"
						+ "						UPDATE soberano.\"CashRegister\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--cost center\n"
						+ "					ELSIF entityTypeMeaningId = '_BF752D2F-A23F-4764-BFE3-8B3ED196AB88' THEN\n"
						+ "						UPDATE soberano.\"CostCenter\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--counter\n"
						+ "					ELSIF entityTypeMeaningId = '_0126EFEB-6646-4C9C-B0C2-28EB3B25E3A7' THEN\n"
						+ "						UPDATE soberano.\"Counter\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--production line\n"
						+ "					ELSIF entityTypeMeaningId = '_D6394DC1-F701-4B68-96A3-8167D217F6E8' THEN\n"
						+ "						UPDATE soberano.\"ProductionLine\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "							\n"
						+ "					--warehouse\n"
						+ "					ELSIF entityTypeMeaningId = '_F6E70C11-9ABC-469E-8468-930AAC301E70' THEN					\n"
						+ "						UPDATE soberano.\"Warehouse\"\n"
						+ "							SET \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = itemId\n"
						+ "							WHERE \"This_is_identified_by_EntityTypeInstance_id\" = objectUsingThisIds[i];\n"
						+ "					END IF;\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "																			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRINTER_PROFILE_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := 0;		\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"PrinterProfile\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"PrinterProfileHasPrinterProfileId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRINTER_PROFILE_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_get\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"printerProfileId\" integer, \"entityTypeInstanceId\" integer, \"profileName\" character varying, \n"
						+ "				  \"fontSize\" integer, \"pageWidth\" integer, \"pageHeight\" integer, margin integer, \n"
						+ "				  header character varying, footer character varying, \"compactFormat\" boolean, \n"
						+ "				  \"isDefaultPrinter\" boolean, \"isManagementPrinter\" boolean, \"printServer\" character varying, \n"
						+ "				  \"printerName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"PrinterProfileHasPrinterProfileId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_uses_FontSize\",\n"
						+ "										\"This_uses_PageWidth\",\n"
						+ "										\"This_uses_PageHeight\",\n"
						+ "										\"This_uses_Margin\",\n"
						+ "										\"This_has_PageHeader\",\n"
						+ "										\"This_has_PageFooter\",\n"
						+ "										\"PrinterProfile_compacts_text\",\n"
						+ "										\"PrinterProfile_is_default_printer_profile\",\n"
						+ "										\"PrinterProfile_is_used_by_management\",\n"
						+ "										\"This_has_PrintServer\",\n"
						+ "										\"This_has_PrinterName\"\n"
						+ "								FROM soberano.\"PrinterProfile\" pprof\n"
						+ "								WHERE pprof.\"PrinterProfileHasPrinterProfileId\" = itemid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_getObjectsUsingThis\"(\n"
						+ "	printerprofileid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying, \"entityTypeMeaningId\" character, \"entityTypeName\" text, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\"\n"
						+ "			FROM soberano.\"PrinterProfile\"\n"
						+ "			WHERE \"PrinterProfileHasPrinterProfileId\" = printerProfileId\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "		RETURN QUERY SELECT * FROM (SELECT \"CashRegisterHasCashRegisterId\" pjSourceId,\n"
						+ "											CAST(\"CashRegisterHasCashRegisterId\" AS character varying) pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'CashRegister' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"CashRegister\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = printerProfileId\n"
						+ "										UNION\n"
						+ "										SELECT \"CostCenterHasCostCenterId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'CostCenter' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"CostCenter\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = printerProfileId\n"
						+ "										UNION\n"
						+ "										SELECT \"CounterHasCounterId\" pjSourceId,\n"
						+ "											\"This_has_Counter_code\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'Counter' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"Counter\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = printerProfileId\n"
						+ "										UNION\n"
						+ "										SELECT \"ProductionLineHasProductionLineId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'ProductionLine' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"ProductionLine\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = printerProfileId	\n"
						+ "										UNION\n"
						+ "										SELECT \"WarehouseHasWarehouseId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'Warehouse' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"Warehouse\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_PrinterProfile_with_PrinterProfileHasPrinterProfileId\" = printerProfileId) pjsources\n"
						+ "								WHERE EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(entityTypeInstanceId, loginname))\n"
						+ "								ORDER BY pjSourceTypeName || ' : ' || pjSourceName ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PrinterProfile_getPrintJobSources\"(\n"
						+ "	)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying, \n"
						+ "				  \"entityTypeMeaningId\" character(37), \"entityTypeName\" text, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT * FROM (SELECT \"CashRegisterHasCashRegisterId\" pjSourceId,\n"
						+ "											CAST(\"CashRegisterHasCashRegisterId\" AS character varying) pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'CashRegister' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"CashRegister\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										UNION\n"
						+ "										SELECT \"CostCenterHasCostCenterId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'CostCenter' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"CostCenter\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										UNION\n"
						+ "										SELECT \"CounterHasCounterId\" pjSourceId,\n"
						+ "											\"This_has_Counter_code\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'Counter' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"Counter\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										UNION\n"
						+ "										SELECT \"ProductionLineHasProductionLineId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'ProductionLine' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"ProductionLine\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										UNION\n"
						+ "										SELECT \"WarehouseHasWarehouseId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'Warehouse' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"Warehouse\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\") pjsources\n"
						+ "								ORDER BY pjSourceTypeName || ' : ' || pjSourceName ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" text) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"ProductionLineHasProductionLineId\", \n"
						+ "									\"This_has_Name\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(29, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"ProductionLine\" productionLine\n"
						+ "								ON instance.\"InstanceId\" = productionLine.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_create\"(\n"
						+ "	productionlinename character varying,\n"
						+ "	objectusingthisids integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		entityTypeMeaningId character varying;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('ProductionLine', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "\n"
						+ "			INSERT INTO soberano.\"ProductionLine\"(\"This_has_Name\",\n"
						+ "												  \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				VALUES (productionlinename,\n"
						+ "					   entityTypeInstanceId)\n"
						+ "				RETURNING \"ProductionLineHasProductionLineId\" \n"
						+ "				INTO itemId;\n"
						+ "							\n"
						+ "			IF array_lower(objectUsingThisIds, 1) IS NOT NULL AND array_upper(objectUsingThisIds, 1) IS NOT NULL THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(objectUsingThisIds, 1) .. array_upper(objectUsingThisIds, 1) LOOP\n"
						+ "					UPDATE soberano.\"CostCenter\"\n"
						+ "						SET \"This_uses_ProductionLine_with_ProductionLineHasProductionLineId\" = itemId\n"
						+ "						WHERE \"CostCenterHasCostCenterId\" = objectUsingThisIds[i];\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	productionlinename character varying,\n"
						+ "	objectusingthisids integer[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		entityTypeMeaningId character varying;\n"
						+ "		\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "					objectdata.\"This_has_Name\",\n"
						+ "					decision.\"DecisionHasDecisionId\" \n"
						+ "				FROM soberano.\"ProductionLine\" objectdata\n"
						+ "					INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "										\"This_has_Name\" \n"
						+ "									FROM metamodel.\"Decision\") decision\n"
						+ "						ON decision.\"DecisionHasDecisionId\" = \n"
						+ "							(SELECT \"DecisionId\" \n"
						+ "								FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "											objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											loginname)\n"
						+ "								WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "									/************/\n"
						+ "										'Apply'\n"
						+ "									/************/						   \n"
						+ "\n"
						+ "							   )\n"
						+ "				WHERE \"ProductionLineHasProductionLineId\" = itemid\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			UPDATE soberano.\"ProductionLine\" SET \"This_has_Name\" = productionlinename\n"
						+ "				WHERE \"ProductionLineHasProductionLineId\" = itemId;\n"
						+ "				\n"
						+ "			UPDATE soberano.\"CostCenter\"\n"
						+ "				SET \"This_uses_ProductionLine_with_ProductionLineHasProductionLineId\" = NULL\n"
						+ "				WHERE \"This_uses_ProductionLine_with_ProductionLineHasProductionLineId\" = itemId;\n"
						+ "			 \n"
						+ "			IF array_lower(objectUsingThisIds, 1) IS NOT NULL AND array_upper(objectUsingThisIds, 1) IS NOT NULL THEN\n"
						+ "				FOR i IN array_lower(objectUsingThisIds, 1) .. array_upper(objectUsingThisIds, 1) LOOP\n"
						+ "					UPDATE soberano.\"CostCenter\"\n"
						+ "						SET \"This_uses_ProductionLine_with_ProductionLineHasProductionLineId\" = itemId\n"
						+ "						WHERE \"CostCenterHasCostCenterId\" = objectUsingThisIds[i];\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "																			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRODUCTION_LINE_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := 0;		\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"ProductionLine\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"ProductionLineHasProductionLineId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_PRODUCTION_LINE_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_get\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"productionLineId\" integer, \"entityTypeInstanceId\" integer, \"productionLineName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT \"ProductionLineHasProductionLineId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\"\n"
						+ "								FROM soberano.\"ProductionLine\" pprof\n"
						+ "								WHERE pprof.\"ProductionLineHasProductionLineId\" = itemid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_ProductionLine_getObjectsUsingThis\"(\n"
						+ "	productionlineid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying, \"entityTypeMeaningId\" character, \"entityTypeName\" text, \"entityTypeInstanceId\" integer) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 20\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "	BEGIN\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\" \n"
						+ "			FROM soberano.\"ProductionLine\"\n"
						+ "			WHERE \"ProductionLineHasProductionLineId\" = productionlineid\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "		RETURN QUERY SELECT * FROM (SELECT \"CostCenterHasCostCenterId\" pjSourceId,\n"
						+ "											\"This_has_Name\" pjSourceName,\n"
						+ "											\"This_is_instance_of_EntityType_with_MeaningHasMeaningId\" pjSourceTypeMeaningId,\n"
						+ "											'CostCenter' pjSourceTypeName,\n"
						+ "											\"This_is_identified_by_EntityTypeInstance_id\" pjSourceETIId\n"
						+ "										FROM soberano.\"CostCenter\" pjsource\n"
						+ "											INNER JOIN metamodel.\"EntityTypeInstance\" eti\n"
						+ "												ON pjsource.\"This_is_identified_by_EntityTypeInstance_id\" = eti.\"EntityTypeInstanceHasEntityTypeInstanceId\"\n"
						+ "										WHERE \"This_uses_ProductionLine_with_ProductionLineHasProductionLineId\" = productionlineid) pjsources\n"
						+ "								WHERE EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(entityTypeInstanceId, loginname))\n"
						+ "								ORDER BY pjSourceTypeName || ' : ' || pjSourceName ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_PostalCode_getAll\"(\n"
						+ "	countrycode character)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 300\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT DISTINCT 0, \"NationalizedPostalCodeHasPostalCode\"  \n"
						+ "						FROM soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\"\n"
						+ "						--WHERE \"CountryHasCountryCode\" = countryCode\n"
						+ "						ORDER BY \"NationalizedPostalCodeHasPostalCode\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_getAll\"(\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"domainObjectId\" integer, \"domainObjectName\" character varying) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 50\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT *\n"
						+ "						FROM (SELECT DISTINCT \"DeliveryProviderHasDeliveryProviderId\", \n"
						+ "									\"This_has_Name\" \"domainObjectName\"\n"
						+ "									FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(30, 1, loginname) instance\n"
						+ "										INNER JOIN soberano.\"DeliveryProvider\" deliveryProvider\n"
						+ "								ON instance.\"InstanceId\" = deliveryProvider.\"This_is_identified_by_EntityTypeInstance_id\") sq\n"
						+ "						ORDER BY \"domainObjectName\" ASC;\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_create\"(\n"
						+ "	deliveryprovidername character varying,\n"
						+ "	rate double precision,\n"
						+ "	isreseller boolean,\n"
						+ "	countries character[],\n"
						+ "	postalcodes character varying[],\n"
						+ "	fees numeric[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		itemId integer;\n"
						+ "		entityTypeMeaningId character varying;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		itemId = -1;\n"
						+ "		\n"
						+ "		--create entity type instance	\n"
						+ "		SELECT metamodel.\"fn_EntityTypeInstance_create\"('DeliveryProvider', loginname)\n"
						+ "			INTO entityTypeInstanceId;\n"
						+ "			\n"
						+ "		--user has rights to create instance of that entity type\n"
						+ "		IF entityTypeInstanceId > 0 THEN\n"
						+ "		\n"
						+ "			IF rate IS NULL OR rate < 0 THEN rate := 0; END IF;\n"
						+ "			IF rate > 100 THEN rate := 100; END IF;\n"
						+ "\n"
						+ "			INSERT INTO soberano.\"DeliveryProvider\"(\"This_has_Name\",\n"
						+ "												  \"This_charges_Rate_on_order_amount\", \n"
						+ "												  \"DeliveryProvider_is_reseller\",\n"
						+ "												  \"This_is_identified_by_EntityTypeInstance_id\")\n"
						+ "				VALUES (deliveryProviderName,\n"
						+ "					   rate,\n"
						+ "					   isreseller,\n"
						+ "					   entityTypeInstanceId)\n"
						+ "				RETURNING \"DeliveryProviderHasDeliveryProviderId\" \n"
						+ "				INTO itemId;\n"
						+ "							\n"
						+ "			IF array_lower(countries, 1) IS NOT NULL AND array_upper(countries, 1) IS NOT NULL \n"
						+ "				AND array_lower(postalcodes, 1) IS NOT NULL AND array_upper(postalcodes, 1) IS NOT NULL \n"
						+ "				AND array_lower(fees, 1) IS NOT NULL AND array_upper(fees, 1) IS NOT NULL \n"
						+ "				AND array_length(countries, 1) = array_length(postalcodes, 1) \n"
						+ "				AND array_length(postalcodes, 1) = array_length(fees, 1) THEN\n"
						+ "			\n"
						+ "				FOR i IN array_lower(countries, 1) .. array_upper(countries, 1) LOOP\n"
						+ "				\n"
						+ "					IF NOT EXISTS(SELECT * \n"
						+ "								  	FROM soberano.\"NationalizedPostalCode\"\n"
						+ "								  WHERE \"NationalizedPostalCodeHasPostalCode\" = postalcodes[i]\n"
						+ "								  	AND \"CountryHasCountryCode\" = countries[i]) THEN\n"
						+ "						INSERT INTO soberano.\"NationalizedPostalCode\"(\"CountryHasCountryCode\",\n"
						+ "																\"NationalizedPostalCodeHasPostalCode\")\n"
						+ "							VALUES(countries[i], postalcodes[i]);\n"
						+ "					END IF;\n"
						+ "								  \n"
						+ "					INSERT INTO soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\"(\n"
						+ "							\"Fee\", \n"
						+ "							\"DeliveryProviderHasDeliveryProviderId\", \n"
						+ "							\"NationalizedPostalCodeHasPostalCode\", \n"
						+ "							\"CountryHasCountryCode\")\n"
						+ "						VALUES (fees[i], itemId, postalcodes[i], countries[i]);\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "		END IF;\n"
						+ "		RETURN itemId;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_modify\"(\n"
						+ "	itemid integer,\n"
						+ "	deliveryprovidername character varying,\n"
						+ "	rate double precision,\n"
						+ "	isreseller boolean,\n"
						+ "	countries character[],\n"
						+ "	postalcodes character varying[],\n"
						+ "	fees numeric[],\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "		\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "					objectdata.\"This_has_Name\",\n"
						+ "					decision.\"DecisionHasDecisionId\" \n"
						+ "				FROM soberano.\"DeliveryProvider\" objectdata\n"
						+ "					INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "										\"This_has_Name\" \n"
						+ "									FROM metamodel.\"Decision\") decision\n"
						+ "						ON decision.\"DecisionHasDecisionId\" = \n"
						+ "							(SELECT \"DecisionId\" \n"
						+ "								FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "											objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "											loginname)\n"
						+ "								WHERE \"DecisionName\" =\n"
						+ "\n"
						+ "									/************/\n"
						+ "										'Apply'\n"
						+ "									/************/						   \n"
						+ "\n"
						+ "							   )\n"
						+ "				WHERE \"DeliveryProviderHasDeliveryProviderId\" = itemid\n"
						+ "				INTO entityTypeInstanceId,\n"
						+ "					objectCode,\n"
						+ "					decisionId;\n"
						+ "					\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			IF rate IS NULL OR rate < 0 THEN rate := 0; END IF;\n"
						+ "			IF rate > 100 THEN rate := 100; END IF;\n"
						+ "		\n"
						+ "			UPDATE soberano.\"DeliveryProvider\" SET \"This_has_Name\" = deliveryprovidername,\n"
						+ "													\"This_charges_Rate_on_order_amount\" = rate, \n"
						+ "												  	\"DeliveryProvider_is_reseller\" = isreseller\n"
						+ "				WHERE \"DeliveryProviderHasDeliveryProviderId\" = itemid;\n"
						+ "				\n"
						+ "			IF array_lower(countries, 1) IS NOT NULL AND array_upper(countries, 1) IS NOT NULL \n"
						+ "				AND array_lower(postalcodes, 1) IS NOT NULL AND array_upper(postalcodes, 1) IS NOT NULL \n"
						+ "				AND array_lower(fees, 1) IS NOT NULL AND array_upper(fees, 1) IS NOT NULL \n"
						+ "				AND array_length(countries, 1) = array_length(postalcodes, 1) \n"
						+ "				AND array_length(postalcodes, 1) = array_length(fees, 1) THEN\n"
						+ "				\n"
						+ "				DELETE FROM soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\"\n"
						+ "					WHERE \"DeliveryProviderHasDeliveryProviderId\" = itemid;\n"
						+ "			\n"
						+ "				FOR i IN array_lower(countries, 1) .. array_upper(countries, 1) LOOP\n"
						+ "				\n"
						+ "					IF NOT EXISTS(SELECT * \n"
						+ "								  	FROM soberano.\"NationalizedPostalCode\"\n"
						+ "								  WHERE \"NationalizedPostalCodeHasPostalCode\" = postalcodes[i]\n"
						+ "								  	AND \"CountryHasCountryCode\" = countries[i]) THEN\n"
						+ "						INSERT INTO soberano.\"NationalizedPostalCode\"(\"CountryHasCountryCode\",\n"
						+ "																\"NationalizedPostalCodeHasPostalCode\")\n"
						+ "							VALUES(countries[i], postalcodes[i]);\n"
						+ "					END IF;\n"
						+ "								  \n"
						+ "					INSERT INTO soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\"(\n"
						+ "							\"Fee\", \n"
						+ "							\"DeliveryProviderHasDeliveryProviderId\", \n"
						+ "							\"NationalizedPostalCodeHasPostalCode\", \n"
						+ "							\"CountryHasCountryCode\")\n"
						+ "						VALUES (fees[i], itemId, postalcodes[i], countries[i]);\n"
						+ "				END LOOP;\n"
						+ "			END IF;\n"
						+ "																			\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_DELIVERY_PROVIDER_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_MODIFIED_BY_tt ' || loginname);\n"
						+ "\n"
						+ "			qryResult := 0;		\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_disable\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS integer\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		entityTypeInstanceId integer;\n"
						+ "		decisionId integer;\n"
						+ "		objectCode character varying;\n"
						+ "		qryResult integer;\n"
						+ "	BEGIN\n"
						+ "		--default returning value. user has no right.\n"
						+ "		qryResult := -1;\n"
						+ "		\n"
						+ "		SELECT \"This_is_identified_by_EntityTypeInstance_id\", \n"
						+ "				objectdata.\"This_has_Name\",\n"
						+ "				decision.\"DecisionHasDecisionId\" \n"
						+ "			FROM soberano.\"DeliveryProvider\" objectdata\n"
						+ "				INNER JOIN (SELECT \"DecisionHasDecisionId\", \n"
						+ "									\"This_has_Name\" \n"
						+ "								FROM metamodel.\"Decision\") decision\n"
						+ "					ON decision.\"DecisionHasDecisionId\" = \n"
						+ "						(SELECT \"DecisionId\" \n"
						+ "						 	FROM metamodel.\"fn_EntityTypeInstance_getDecisions\"(\n"
						+ "										objectdata.\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										loginname)\n"
						+ "							WHERE \"DecisionName\" =\n"
						+ "						   \n"
						+ "								/************/\n"
						+ "									'Disable'\n"
						+ "						   		/************/						   \n"
						+ "						   \n"
						+ "						   )\n"
						+ "			WHERE \"DeliveryProviderHasDeliveryProviderId\" = itemid\n"
						+ "			INTO entityTypeInstanceId,\n"
						+ "				objectCode,\n"
						+ "				decisionId;		\n"
						+ "			\n"
						+ "		--user has rights\n"
						+ "		IF decisionId IS NOT NULL AND entityTypeInstanceId IS NOT NULL THEN\n"
						+ "		\n"
						+ "			--make the decision\n"
						+ "			PERFORM metamodel.\"fn_Vote_vote\"(loginname,\n"
						+ "											entityTypeInstanceId, \n"
						+ "											decisionId, \n"
						+ "											'tt_DELIVERY_PROVIDER_tt ' || CAST(itemid AS text) || ' : ' || objectCode || ' tt_DISABLED_BY_tt ' || loginname);\n"
						+ "			qryResult := 0;\n"
						+ "		END IF;\n"
						+ "		RETURN qryResult;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_get\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(\"deliveryProviderId\" integer, \"entityTypeInstanceId\" integer, \n"
						+ "				  \"deliveryProviderName\" character varying, \"rate\" double precision, \n"
						+ "				  \"isReseller\" boolean) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"DeliveryProviderHasDeliveryProviderId\",\n"
						+ "										\"This_is_identified_by_EntityTypeInstance_id\",\n"
						+ "										\"This_has_Name\",\n"
						+ "										\"This_charges_Rate_on_order_amount\",\n"
						+ "										\"DeliveryProvider_is_reseller\"\n"
						+ "								FROM soberano.\"DeliveryProvider\" pprof\n"
						+ "								WHERE pprof.\"DeliveryProviderHasDeliveryProviderId\" = itemid\n"
						+ "									AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_DeliveryProvider_getFees\"(\n"
						+ "	itemid integer,\n"
						+ "	loginname character varying)\n"
						+ "    RETURNS TABLE(country character, \"postalCode\" character varying, fee numeric) \n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "    ROWS 1\n"
						+ "\n"
						+ "AS $BODY$\n"
						+ "	BEGIN\n"
						+ "		RETURN QUERY SELECT \"CountryHasCountryCode\",\n"
						+ "							\"NationalizedPostalCodeHasPostalCode\",\n"
						+ "							CAST(\"Fee\" AS numeric)\n"
						+ "						FROM soberano.\"DeliveryProviderChargesFeeForDeliveringToNationalizedPostalCode\" pprof\n"
						+ "							INNER JOIN soberano.\"DeliveryProvider\" dp\n"
						+ "								ON dp.\"DeliveryProviderHasDeliveryProviderId\" = pprof.\"DeliveryProviderHasDeliveryProviderId\"\n"
						+ "							WHERE pprof.\"DeliveryProviderHasDeliveryProviderId\" = itemid\n"
						+ "								AND EXISTS (SELECT metamodel.\"fn_EntityTypeInstance_getDecisions\"(\"This_is_identified_by_EntityTypeInstance_id\", loginname));\n"
						+ "	END;	\n"
						+ "$BODY$;",
						
						
						
						////////////////////
						// business facts //
						////////////////////
						
						//countries and provinces
						
						"INSERT INTO soberano.\"Country\"(\"CountryHasCountryCode\", \"This_has_Name\")\n"
						+ "	VALUES ('CU', 'Cuba');\n"
						+ "	\n"
						+ "INSERT INTO soberano.\"Province\"(\"ProvinceHasProvinceId\", \"This_has_Name\", \"This_belongs_to_Country_with_CountryHasCountryCode\")\n"
						+ "	VALUES (1, 'Pinar del Río', 'CU'),\n"
						+ "		(2, 'La Habana', 'CU'),\n"
						+ "		(3, 'Matanzas', 'CU'),\n"
						+ "		(4, 'Villa Clara', 'CU'),\n"
						+ "		(5, 'Isla de la Juventud', 'CU'),\n"
						+ "		(6, 'Artemisa', 'CU'),\n"
						+ "		(7, 'Mayabeque', 'CU'),\n"
						+ "		(8, 'Guantánamo', 'CU'),\n"
						+ "		(9, 'Santiago de Cuba', 'CU'),\n"
						+ "		(10, 'Granma', 'CU'),\n"
						+ "		(11, 'Holguín', 'CU'),\n"
						+ "		(12, 'Las Tunas', 'CU'),\n"
						+ "		(13, 'Camagüey', 'CU'),\n"
						+ "		(14, 'Ciego de Ávila', 'CU'),\n"
						+ "		(15, 'Sancti Spíritus', 'CU'),\n"
						+ "		(16, 'Cienfuegos', 'CU');",
						
						//municipalities
						
						"INSERT INTO soberano.\"Municipality\"(\"This_has_Name\", \"This_belongs_to_Province_with_ProvinceHasProvinceId\")\n"
						+ "			VALUES	('Mantua', 1),\n"
						+ "					('Minas de Matahambre', 1),\n"
						+ "					('Viñales', 1),\n"
						+ "					('La Palma', 1),\n"
						+ "					('Los Palacios', 1),\n"
						+ "					('San Luis', 1),\n"
						+ "					('Guane', 1),\n"
						+ "					('Sandino', 1),\n"
						+ "					('Consolación del Sur', 1),\n"
						+ "					('Pinar del Río', 1),\n"
						+ "					('San Juan y Martínez', 1),\n"
						+ "					('Playa', 2),\n"
						+ "					('Plaza de la Revolución', 2),\n"
						+ "					('Centro Habana', 2),\n"
						+ "					('La Habana Vieja', 2),\n"
						+ "					('Regla', 2),\n"
						+ "					('La Habana del Este', 2),\n"
						+ "					('Guanabacoa', 2),\n"
						+ "					('San Miguel del Padrón', 2),\n"
						+ "					('Diez de Octubre', 2),\n"
						+ "					('Cerro', 2),\n"
						+ "					('Marianao', 2),\n"
						+ "					('La Lisa', 2),\n"
						+ "					('Boyeros', 2),\n"
						+ "					('Arroyo Naranjo', 2),\n"
						+ "					('Cotorro', 2),\n"
						+ "					('Matanzas', 3),\n"
						+ "					('Cárdenas', 3),\n"
						+ "					('Antiguo - Varadero', 3),\n"
						+ "					('Colón', 3),\n"
						+ "					('Perico', 3),\n"
						+ "					('Jovellanos', 3),\n"
						+ "					('Pedro Betancourt', 3),\n"
						+ "					('Limonar', 3),\n"
						+ "					('Unión de Reyes', 3),\n"
						+ "					('Ciénaga de Zapata', 3),\n"
						+ "					('Jagüey Grande', 3),\n"
						+ "					('Calimete', 3),\n"
						+ "					('Los Arabos', 3),\n"
						+ "					('Martí', 3),\n"
						+ "					('Corralillo', 4),\n"
						+ "					('Quemado de Guines', 4),\n"
						+ "					('Sagua la Grande', 4),\n"
						+ "					('Encrucijada', 4),\n"
						+ "					('Camajuaní', 4),\n"
						+ "					('Caibarién', 4),\n"
						+ "					('Remedios', 4),\n"
						+ "					('Placetas', 4),\n"
						+ "					('Santa Clara', 4),\n"
						+ "					('Cifuentes', 4),\n"
						+ "					('Santo Domingo', 4),\n"
						+ "					('Ranchuelo', 4),\n"
						+ "					('Manicaragua', 4),\n"
						+ "					('Aguada de Pasajeros', 16),\n"
						+ "					('Rodas', 16),\n"
						+ "					('Palmira', 16),\n"
						+ "					('Lajas', 16),\n"
						+ "					('Cruces', 16),\n"
						+ "					('Cumanayagua', 16),\n"
						+ "					('Cienfuegos', 16),\n"
						+ "					('Abreus', 16),\n"
						+ "					('Yaguajay', 15),\n"
						+ "					('Jatibonico', 15),\n"
						+ "					('Taguasco', 15),\n"
						+ "					('Cabaiguán', 15),\n"
						+ "					('Fomento', 15),\n"
						+ "					('Trinidad', 15),\n"
						+ "					('La Sierpe', 15),\n"
						+ "					('Sancti Spíritus', 15),\n"
						+ "					('Chambas', 14),\n"
						+ "					('Morón', 14),\n"
						+ "					('Bolivia', 14),\n"
						+ "					('Primero de Enero', 14),\n"
						+ "					('Ciro Redondo', 14),\n"
						+ "					('Florencia', 14),\n"
						+ "					('Majagua', 14),\n"
						+ "					('Venezuela', 14),\n"
						+ "					('Baraguá', 14),\n"
						+ "					('Ciego de Ávila', 14),\n"
						+ "					('Carlos Manuel de Céspedes', 13),\n"
						+ "					('Esmeralda', 13),\n"
						+ "					('Sierra de Cubitas', 13),\n"
						+ "					('Minas', 13),\n"
						+ "					('Nuevitas', 13),\n"
						+ "					('Sibanicú', 13),\n"
						+ "					('Camagüey', 13),\n"
						+ "					('Florida', 13),\n"
						+ "					('Vertientes', 13),\n"
						+ "					('Jimaguayú', 13),\n"
						+ "					('Najasa', 13),\n"
						+ "					('Santa Cruz del Sur', 13),\n"
						+ "					('Guáimaro', 13),\n"
						+ "					('Manatí', 12),\n"
						+ "					('Puerto Padre', 12),\n"
						+ "					('Majibacoa', 12),\n"
						+ "					('Las Tunas', 12),\n"
						+ "					('Jobabo', 12),\n"
						+ "					('Colombia', 12),\n"
						+ "					('Amancio', 12),\n"
						+ "					('Jesús Menéndez', 12),\n"
						+ "					('Gibara', 11),\n"
						+ "					('Rafael Freyre', 11),\n"
						+ "					('Banes', 11),\n"
						+ "					('Antilla', 11),\n"
						+ "					('Báguanos', 11),\n"
						+ "					('Holguín', 11),\n"
						+ "					('Cacocúm', 11),\n"
						+ "					('Urbano Noris', 11),\n"
						+ "					('Cueto', 11),\n"
						+ "					('Sagua de Tánamo', 11),\n"
						+ "					('Moa', 11),\n"
						+ "					('Calixto García', 11),\n"
						+ "					('Mayarí', 11),\n"
						+ "					('Frank País', 11),\n"
						+ "					('Cauto Cristo', 10),\n"
						+ "					('Bayamo', 10),\n"
						+ "					('Yara', 10),\n"
						+ "					('Manzanillo', 10),\n"
						+ "					('Campechuela', 10),\n"
						+ "					('Media Luna', 10),\n"
						+ "					('Niquero', 10),\n"
						+ "					('Pilón', 10),\n"
						+ "					('Bartolomé Masó', 10),\n"
						+ "					('Buey Arriba', 10),\n"
						+ "					('Guisa', 10),\n"
						+ "					('Río Cauto', 10),\n"
						+ "					('Jiguaní', 10),\n"
						+ "					('Contramaestre', 9),\n"
						+ "					('Mella', 9),\n"
						+ "					('San Luis', 9),\n"
						+ "					('Segundo Frente', 9),\n"
						+ "					('Songo - La Maya', 9),\n"
						+ "					('Santiago de Cuba', 9),\n"
						+ "					('Palma Soriano', 9),\n"
						+ "					('Tercer Frente', 9),\n"
						+ "					('Guamá', 9),\n"
						+ "					('El Salvador', 8),\n"
						+ "					('Guantánamo', 8),\n"
						+ "					('Yateras', 8),\n"
						+ "					('Baracoa', 8),\n"
						+ "					('Imías', 8),\n"
						+ "					('San Antonio del Sur', 8),\n"
						+ "					('Manuel Támes', 8),\n"
						+ "					('Caimanera', 8),\n"
						+ "					('Niceto Pérez', 8),\n"
						+ "					('Maisí', 8),\n"
						+ "					('Isla de la Juventud', 5),\n"
						+ "					('Bahía Honda', 6),\n"
						+ "					('Mariel', 6),\n"
						+ "					('Guanajay', 6),\n"
						+ "					('Caimito', 6),\n"
						+ "					('Bauta', 6),\n"
						+ "					('San antonio de los Baños', 6),\n"
						+ "					('Guira de Melena', 6),\n"
						+ "					('Alquizar', 6),\n"
						+ "					('Artemisa', 6),\n"
						+ "					('Candelaria', 6),\n"
						+ "					('San Cristóbal', 6),\n"
						+ "					('Bejucal', 7),\n"
						+ "					('San José de las Lajas', 7),\n"
						+ "					('Jaruco', 7),\n"
						+ "					('Santa Cruz del Norte', 7),\n"
						+ "					('Madruga', 7),\n"
						+ "					('Nueva Paz', 7),\n"
						+ "					('San Nicolás', 7),\n"
						+ "					('Guines', 7),\n"
						+ "					('Melena del Sur', 7),\n"
						+ "					('Batabanó', 7),\n"
						+ "					('Quivicán', 7);",
						
						////////////////////
						// helper queries //
						////////////////////
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Utilities_justifyColumnContent\"(\n"
						+ "	colContent text,\n"
						+ "	colJustify character(1),\n"
						+ "	colSizeInPoints integer,\n"
						+ "	fontWidthInPoints integer\n"
						+ "	)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "	DECLARE\n"
						+ "		spaceCharsToAdd integer;\n"
						+ "		spaceCharsString text;\n"
						+ "		justifiedText text;\n"
						+ "	BEGIN\n"
						+ "		spaceCharsToAdd := (colSizeInPoints - char_length(colContent) * fontWidthInPoints) / fontWidthInPoints;\n"
						+ "		spaceCharsString := '';\n"
						+ "		FOR i IN 1..spaceCharsToAdd LOOP\n"
						+ "			spaceCharsString := spaceCharsString || ' ';\n"
						+ "		END LOOP;\n"
						+ "		justifiedText := '';\n"
						+ "		IF colJustify = 'r' THEN\n"
						+ "			justifiedText := spaceCharsString || colContent;\n"
						+ "		ELSE\n"
						+ "			justifiedText := colContent || spaceCharsString;\n"
						+ "		END IF;\n"
						+ "		RETURN justifiedText;\n"
						+ "	END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Utilities_formatColumnedTextLine\"(\n"
						+ "	printerprofile integer,\n"
						+ "	cols integer,\n"
						+ "	colcontent text[],\n"
						+ "	coljustify character[])\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	formattedText text;\n"
						+ "	colSizeInPoints integer;\n"
						+ "	fontWidthInPoints integer;\n"
						+ "	pageWidth integer;\n"
						+ "	pageMargin integer;\n"
						+ "	\n"
						+ "BEGIN\n"
						+ "	SELECT \"This_uses_FontSize\" * 0.6,\n"
						+ "			\"This_uses_PageWidth\",\n"
						+ "			\"This_uses_Margin\"\n"
						+ "		FROM soberano.\"PrinterProfile\" \n"
						+ "		WHERE \"PrinterProfileHasPrinterProfileId\" = printerprofile\n"
						+ "		INTO fontWidthInPoints, pageWidth, pageMargin;\n"
						+ "		\n"
						+ "	colSizeInPoints := trunc((pageWidth - 2 * pageMargin) / cols, 0);\n"
						+ "		\n"
						+ "	formattedText := '';\n"
						+ "	\n"
						+ "	FOR i IN 1..cols LOOP\n"
						+ "		formattedText := formattedText || soberano.\"fn_Utilities_justifyColumnContent\"(colContent[i], colJustify[i], colSizeInPoints, fontWidthInPoints);\n"
						+ "	END LOOP;\n"
						+ "	RETURN formattedText;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Utilities_fillWithSpaces_compact\"(\n"
						+ "	inputstring text)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	strLength integer;\n"
						+ "	result text;\n"
						+ "BEGIN\n"
						+ "	strLength := char_length(inputString);\n"
						+ "	SELECT CASE WHEN strLength = 6  THEN ' ' || inputString\n"
						+ "		     WHEN strLength = 5  THEN '  ' || inputString\n"
						+ "		     WHEN strLength = 4  THEN '   ' || inputString\n"
						+ "		     WHEN strLength = 3  THEN '    ' || inputString\n"
						+ "		     WHEN strLength = 2  THEN '     ' || inputString\n"
						+ "		     WHEN strLength = 1  THEN '      ' || inputString\n"
						+ "		     WHEN strLength = 0  THEN '       ' || inputString\n"
						+ "		     ELSE inputString\n"
						+ "		END INTO result;\n"
						+ "	RETURN result;\n"
						+ "END;\n"
						+ "$BODY$;",
												
						
						
						"CREATE OR REPLACE FUNCTION soberano.\"fn_Utilities_fillWithSpaces\"(\n"
						+ "	inputstring text)\n"
						+ "    RETURNS text\n"
						+ "    LANGUAGE 'plpgsql'\n"
						+ "    COST 100\n"
						+ "    VOLATILE PARALLEL UNSAFE\n"
						+ "AS $BODY$\n"
						+ "DECLARE\n"
						+ "	strLength integer;\n"
						+ "	result text;\n"
						+ "BEGIN\n"
						+ "	strLength := char_length(inputString);\n"
						+ "	SELECT CASE  WHEN strLength = 9  THEN ' ' || inputString\n"
						+ "		     WHEN strLength = 8  THEN '  ' || inputString\n"
						+ "		     WHEN strLength = 7  THEN '   ' || inputString\n"
						+ "		     WHEN strLength = 6  THEN '    ' || inputString\n"
						+ "		     WHEN strLength = 5  THEN '     ' || inputString\n"
						+ "		     WHEN strLength = 4  THEN '      ' || inputString\n"
						+ "		     WHEN strLength = 3  THEN '       ' || inputString\n"
						+ "		     WHEN strLength = 2  THEN '        ' || inputString\n"
						+ "		     WHEN strLength = 1  THEN '         ' || inputString\n"
						+ "		     WHEN strLength = 0  THEN '          ' || inputString\n"
						+ "		     ELSE inputString\n"
						+ "		END INTO result;\n"
						+ "	RETURN result;\n"
						+ "END;\n"
						+ "$BODY$;",
						
						
						
						"--optimizations\n"
						+ "CREATE INDEX IF NOT EXISTS index1\n"
						+ "    ON soberano.\"Worker\" USING btree\n"
						+ "    (\"This_has_LoginName\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
						+ "    TABLESPACE pg_default;",
						
						
						
						"CREATE INDEX IF NOT EXISTS index2\n"
						+ "    ON soberano.\"StockChange\" USING btree\n"
						+ "    (\"This_is_at_DateTime\" ASC NULLS LAST, \"This_is_called_with_InventoryItem_with_InventoryItemHasInventor\" COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n"
						+ "    TABLESPACE pg_default;",
						
						
						
						"CREATE INDEX IF NOT EXISTS index3\n"
						+ "    ON soberano.\"Stock\" USING btree\n"
						+ "    (\"InventoryItemHasInventoryItemCode\" COLLATE pg_catalog.\"default\" ASC NULLS LAST, \"WarehouseHasWarehouseId\" ASC NULLS LAST)\n"
						+ "    TABLESPACE pg_default;"
					}
				)
			);
	}
}
