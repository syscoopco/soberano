<!-- for spring 6.2 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-6.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-3.2.xsd">
 
 	<context:component-scan base-package="co.syscoop.soberano"/>
 	
 	<!-- 
	spring security configuration
	-->
	 
	<!-- access rules for web service requests -->
	<security:http pattern="/ws/**" create-session="stateless" use-expressions="true">
		<security:intercept-url pattern='/**' access="isFullyAuthenticated()"/>
    	<security:http-basic />
	</security:http>
	
	<!-- CSRF is required to be disabled in Spring Security for ZK to function.
			ZK implement its own CSRF mechanism.
			References:
			https://tracker.zkoss.org/projects/ZKSPRING/issues/ZKSPRING-55?filter=allopenissues
			https://www.zkoss.org/_w/images/e/ea/ZK_Security_Report.pdf
			https://www.zkoss.org/wiki/ZK_Spring_Essentials/Working_with_ZK_Spring/Working_with_ZK_Spring_Security/Secure_a_ZK_Application_with_Spring_Security
			That is why this code line is disabled. -->
	
	<!-- access rules, sessions and login / logout --> 
	<security:http auto-config="true" use-expressions="true" create-session="ifRequired">
	
		<!-- deny all -->
		<security:intercept-url pattern="/zkau/web/**/*.zul" access="denyAll()"/>
						
		<!-- permit all -->
		<security:intercept-url pattern="/zkau/web/**/js/**" method="GET" access="permitAll()"/>
		<security:intercept-url pattern="/zkau/web/**/zul/css/**" method="GET" access="permitAll()"/>
		<security:intercept-url pattern="/zkau/web/**/img/**" method="GET" access="permitAll()"/>
		<security:intercept-url pattern="/login" access="permitAll()"/>
		<security:intercept-url pattern="/logout" access="permitAll()"/>
		<security:intercept-url pattern="/" access="permitAll()"/>
		<security:intercept-url pattern="/welcome.zul" access="permitAll()"/>
		<security:intercept-url pattern="/images/*" access="permitAll()"/>
		
		<!-- authenticated access -->
 		<security:intercept-url pattern="/*" access="isFullyAuthenticated()"/>
 		<security:intercept-url pattern="/job_orders/*" access="isFullyAuthenticated()"/>
 		<security:intercept-url pattern="/receipts/*" access="isFullyAuthenticated()"/>
 		<security:intercept-url pattern="/reports/*" access="isFullyAuthenticated()"/>
 		<security:intercept-url pattern="/zkau/view/**" access="isFullyAuthenticated()"/>
 		
 		<!-- sessions -->
 		<security:session-management session-fixation-protection="migrateSession" invalid-session-url="/welcome.zul">
			<security:concurrency-control max-sessions="1" expired-url="/welcome.zul"/>
		</security:session-management>
		
		<!-- login / logout -->
		<security:logout logout-url="/logout" success-handler-ref="urlLogoutSuccessHandler" invalidate-session="true" />
		<security:form-login login-processing-url="/login" username-parameter="username" password-parameter="password" authentication-failure-handler-ref="authenticationFailureHandler" authentication-success-handler-ref="authenticationSuccessHandler" login-page="/welcome.zul"/>
	
		<!-- csrf -->
		<security:csrf disabled="true"/>
		
		<!-- cors -->
		<!-- 
		<security:cors configuration-source-ref="corsSource"/>
		 -->
		
	</security:http>
	
 	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="ldapAuthProvider"/>
 	</security:authentication-manager>
 	<security:ldap-user-service id="ldapUserService" user-search-filter="${ldap.userSearchFilter}" server-ref="springLdapContextSource"/>

 	<!-- 
	beans
	-->
	
	<!-- cors -->
	<!-- 
	<bean id="corsConfiguration" class="org.springframework.web.cors.CorsConfiguration">
		<property name="allowedOrigins">
			<list value-type="java.lang.String">
				<value>http://127.0.0.1:8080</value>
				<value>http://localhost:8080</value>
			</list>
		</property>
		<property name="allowedMethods">
			<list value-type="java.lang.String">
				<value>GET</value>
				<value>POST</value>
				<value>HEAD</value>
				<value>OPTIONS</value>
				<value>PUT</value>
			</list>
		</property>
		<property name="allowedHeaders">
			<list value-type="java.lang.String">
				<value>Content-Type</value>
				<value>X-Requested-With</value>
				<value>accept</value>
				<value>Origin</value>
				<value>Access-Control-Request-Method</value>
				<value>Access-Control-Allow-Origin</value>
				<value>Access-Control-Allow-Credentials</value>
				<value>Access-Control-Request-Headers</value>
			</list>
		</property>
		<property name="allowCredentials">
			<value>false</value>
		</property>
		<property name="maxAge">
			<value>86400</value>
		</property>
	</bean>	
	<util:map id="corsConfigurationsMap" map-class="java.util.HashMap">
	    <entry key="/**" value-ref="corsConfiguration"/>
	</util:map>
	<bean id="corsSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
		<property name="corsConfigurations" ref="corsConfigurationsMap">
   		 </property>
	</bean>
	 -->
		
	<!-- spring ldap -->
 	<bean id="springLdapContextSource" class="org.springframework.ldap.core.support.LdapContextSource">
        <property name="url" value="${ldap.ldapAddress}"/>
        <property name="base" value="${ldap.base}"/>
        <property name="userDn" value="${ldap.userDn}"/>
        <property name="password" value="${ldap.password}"/>
        <property name="pooled" value="true"/>
    </bean>    
    <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
        <constructor-arg ref="springLdapContextSource"/>
    </bean>    
    <bean id="ldapUser" class="co.syscoop.soberano.ldap.dao.LdapUserDao">
        <property name="ldapTemplate" ref="ldapTemplate"/>
   	</bean>
   	<bean  id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="${ldap.ldapAddress}"/>
	</bean>
	<bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
 		<constructor-arg>
 			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
 				<constructor-arg ref="contextSource"/>
 				<property name="userDnPatterns">
 					<list>
 						<value>${ldap.ldapUserDnPatterns}</value>
 					</list>
 				</property>
 			</bean>
 		</constructor-arg>
 	</bean> 	 	
 	 	
 	<!-- spring transactions -->
 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceForLogicalModelGeneration"/>
	</bean>
	<bean id="transactionDefinition" class="org.springframework.transaction.support.DefaultTransactionDefinition">
 		<property name="timeout" value="${transactions.transactionTimeout}"/>
 		<property name="isolationLevel" value="${transactions.transactionIsolationLevel}"/>
 		<property name="propagationBehavior" value="${transactions.transactionPropagationBehavior}"/>
	</bean>
 	
 	<!-- java properties --> 
	
	<!-- without Jasypt -->
	<bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:soberano.properties" />
	</bean>

	<!-- with Jasypt -->
<!--  	<bean id="environmentVariablesConfiguration" class="co.syscoop.soberano.obf.PropObf"> -->
<!-- 	</bean>	 -->
<!-- 	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor"> -->
<!-- 		<property name="config" ref="environmentVariablesConfiguration"/>		 -->
<!-- 	</bean>	 -->
<!-- 	<bean id="propertyConfigurer" class="org.jasypt.spring4.properties.EncryptablePropertyPlaceholderConfigurer"> -->
<!--    		<constructor-arg ref="configurationEncryptor"/> -->
<!--    		<property name="locations"> -->
<!-- 	     	<list> -->
<!-- 	       		<value>classpath:soberano.properties</value> -->
<!-- 	     	</list> -->
<!--    		</property>   		 -->
<!--  	</bean> -->
 	
 	<!-- jdbc datasource with connection pooling for logical model generation. -->
 	<bean id="dataSourceForLogicalModelGeneration" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" scope="singleton">
 		<property name="driverClassName">
            <value>${jdbc.driverClassName}</value> 
        </property> 
        <property name="url">
            <value>${jdbc.urlForLMGeneration}</value>
        </property> 
        <property name="username">
            <value>${jdbc.username}</value>
        </property>  
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <property name="initialSize">
            <value>${jdbc.initialSize}</value>
        </property>
        <property name="validationQuery">
            <value>${jdbc.validationQuery}</value>
        </property>
        <property name="validationQueryTimeout">
            <value>${jdbc.validationQueryTimeout}</value>
        </property>
        <property name="maxTotal">
            <value>${jdbc.maxTotal}</value>
        </property>
        <property name="minIdle">
            <value>${jdbc.minIdle}</value>
        </property>
        <property name="maxIdle">
            <value>${jdbc.maxIdle}</value>
        </property>
        <property name="maxWaitMillis">
            <value>${jdbc.maxWaitMillis}</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>${jdbc.timeBetweenEvictionRunsMillis}</value>
        </property>
        <property name="minEvictableIdleTimeMillis">
            <value>${jdbc.minEvictableIdleTimeMillis}</value>
        </property>
        <property name="testOnBorrow">
            <value>${jdbc.testOnBorrow}</value>
        </property>
        <property name="removeAbandonedOnBorrow">
            <value>${jdbc.removeAbandonedOnBorrow}</value>
        </property>
        <property name="removeAbandonedTimeout">
            <value>${jdbc.removeAbandonedTimeout}</value>
        </property>
    </bean>
    
    <!-- jdbc datasource with connection pooling for web application. -->
 	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" scope="singleton">
 		<property name="driverClassName">
            <value>${jdbc.driverClassName}</value> 
        </property> 
        <property name="url">
            <value>${jdbc.url}</value>
        </property> 
        <property name="username">
            <value>${jdbc.username}</value>
        </property>  
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <property name="initialSize">
            <value>${jdbc.initialSize}</value>
        </property>
        <property name="validationQuery">
            <value>${jdbc.validationQuery}</value>
        </property>
        <property name="validationQueryTimeout">
            <value>${jdbc.validationQueryTimeout}</value>
        </property>
        <property name="maxTotal">
            <value>${jdbc.maxTotal}</value>
        </property>
        <property name="minIdle">
            <value>${jdbc.minIdle}</value>
        </property>
        <property name="maxIdle">
            <value>${jdbc.maxIdle}</value>
        </property>
        <property name="maxWaitMillis">
            <value>${jdbc.maxWaitMillis}</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>${jdbc.timeBetweenEvictionRunsMillis}</value>
        </property>
        <property name="minEvictableIdleTimeMillis">
            <value>${jdbc.minEvictableIdleTimeMillis}</value>
        </property>
        <property name="testOnBorrow">
            <value>${jdbc.testOnBorrow}</value>
        </property>
        <property name="removeAbandonedOnBorrow">
            <value>${jdbc.removeAbandonedOnBorrow}</value>
        </property>
        <property name="removeAbandonedTimeout">
            <value>${jdbc.removeAbandonedTimeout}</value>
        </property>
    </bean>
    
    <!-- soberano beans -->
  	<bean name="authenticationFailureHandler" class="co.syscoop.soberano.spring.AuthenticationFailureHandlerImpl"/>
	<bean name="authenticationSuccessHandler" class="co.syscoop.soberano.spring.AuthenticationSuccessHandlerImpl"/>
	<bean id="soberanoProperties" class="co.syscoop.soberano.beans.WebApplicationProperties">
		<property name="vocabulary">
			<value>${vocabulary}</value>
		</property>
	</bean>
	<bean name="urlLogoutSuccessHandler" class="co.syscoop.soberano.spring.LogoutSuccessHandlerImpl"/>
	
	<!-- conceptual model processing beans -->
	<bean name="PortableFormatORMModelFileParser" class="${rules.PortableFormatORMModelFileParser}"/>
 	<bean name="LogicalModelGenerator" class="${rules.LogicalModelGenerator}">
 		<constructor-arg ref="dataSourceForLogicalModelGeneration"/>
 		<constructor-arg ref="transactionManager"/>
 		<constructor-arg ref="transactionDefinition"/>
 		<constructor-arg value="${rules.metamodelFileName}"/>
 	</bean>
 	<bean name="ORMConceptualModel" class="co.syscoop.soberano.rules.enforcer.ORMConceptualModel">
 		<constructor-arg ref="PortableFormatORMModelFileParser"/>
 		<constructor-arg ref="LogicalModelGenerator"/>
 		<constructor-arg value="${rules.soberanoInstanceConceptualModelFileName}"/> 		
 	</bean>
 	<bean id="soberanoDatasource" class="co.syscoop.soberano.beans.SoberanoDatasource" scope="singleton">
 		<constructor-arg ref="dataSource"/>
 	</bean>
 	
 	<!-- payment processor beans -->
 	<bean name="tropipay" class="co.syscoop.soberano.beans.Tropipay">
 	</bean>
 	<bean name="opennode" class="co.syscoop.soberano.beans.Opennode">
 	</bean>
 	<bean name="enzona" class="co.syscoop.soberano.beans.EnZona">
 	</bean>
 	<bean name="transfermovil" class="co.syscoop.soberano.beans.Transfermovil">
 	</bean>
 	<bean name="mlc" class="co.syscoop.soberano.beans.MLC">
 	</bean>
 	<bean name="lnbits_cubabitcoin_org" class="co.syscoop.soberano.beans.lnbits_cubabitcoin_org">
 	</bean>
 	
 	<!-- printer profile beans -->
 	<bean name="facturalanuevaprinterprofile" class="co.syscoop.soberano.beans.FacturaLaNuevaPrinterProfile">
 	</bean>
 	 	
</beans>